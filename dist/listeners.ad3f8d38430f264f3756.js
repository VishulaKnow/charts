/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/listeners/listeners.ts":
/*!************************************!*\
  !*** ./src/listeners/listeners.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _model_modelOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/modelOptions */ \"./src/model/modelOptions.ts\");\n\r\nvar ListenersHelper = /** @class */ (function () {\r\n    function ListenersHelper() {\r\n    }\r\n    ListenersHelper.randInt = function (min, max) {\r\n        return Math.round(Math.random() * (max - min) + min);\r\n    };\r\n    ListenersHelper.getCopy = function (obj) {\r\n        var newObj = {};\r\n        if (typeof obj === 'object') {\r\n            for (var key in obj) {\r\n                if (Array.isArray(obj[key])) {\r\n                    newObj[key] = this.getCopyOfArr(obj[key]);\r\n                }\r\n                else if (typeof obj[key] === 'object') {\r\n                    newObj[key] = this.getCopy(obj[key]);\r\n                }\r\n                else {\r\n                    newObj[key] = obj[key];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return obj;\r\n        }\r\n        return newObj;\r\n    };\r\n    ListenersHelper.getCopyOfArr = function (initial) {\r\n        var _this = this;\r\n        var newArr = [];\r\n        initial.forEach(function (d) { return newArr.push(_this.getCopy(d)); });\r\n        return newArr;\r\n    };\r\n    ListenersHelper.getInputValue = function (selector) {\r\n        return document.querySelector(selector).value;\r\n    };\r\n    ListenersHelper.setInputValue = function (selector, value) {\r\n        document.querySelector(selector).value = value.toString();\r\n    };\r\n    ListenersHelper.setCheckboxValue = function (selector, value) {\r\n        document.querySelector(selector).checked = value;\r\n    };\r\n    return ListenersHelper;\r\n}());\r\nvar Listeners = /** @class */ (function () {\r\n    function Listeners(engine, config, designerConfig, data) {\r\n        this.engine = engine;\r\n        this.config = config;\r\n        this.designerConfig = designerConfig;\r\n        this.data = data;\r\n        this.setControlsValues();\r\n        this.showControlsForNotation(this.config.options.type);\r\n        this.setMainListeners();\r\n        this.setDesignerListeners();\r\n        this.setCommonListeners();\r\n        this.setAxisListeners();\r\n        this.set2DListeners();\r\n    }\r\n    Listeners.prototype.updateFull = function () {\r\n        this.dropAxisDomain(this.config);\r\n        var model = (0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getUpdatedModel)(this.config, this.data, this.designerConfig);\r\n        var preparedData = (0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getPreparedData)(model, this.data, this.config);\r\n        this.engine.updateFullBlock(model, preparedData);\r\n    };\r\n    Listeners.prototype.dropAxisDomain = function (config) {\r\n        if (config.options.type === '2d') {\r\n            config.options.axis.valueAxis.domain.end = -1;\r\n            config.options.axis.valueAxis.domain.start = -1;\r\n        }\r\n    };\r\n    Listeners.prototype.showControlsForNotation = function (notationType) {\r\n        if (notationType === '2d') {\r\n            document.querySelector('.block-polar').style.display = 'none';\r\n            document.querySelector('.block-2d').style.display = 'block';\r\n            document.querySelector('.block-axis').style.display = 'block';\r\n        }\r\n        else if (notationType === 'polar') {\r\n            document.querySelector('.block-2d').style.display = 'none';\r\n            document.querySelector('.block-polar').style.display = 'block';\r\n            document.querySelector('.block-axis').style.display = 'none';\r\n        }\r\n        else if (notationType === 'interval') {\r\n            document.querySelector('.block-polar').style.display = 'none';\r\n            document.querySelector('.block-2d').style.display = 'none';\r\n            document.querySelector('.block-axis').style.display = 'block';\r\n        }\r\n    };\r\n    Listeners.prototype.getDataWithRandomValues = function (data, maxRand) {\r\n        if (this.config.options.type === '2d')\r\n            this.config.options.charts.forEach(function (chart) {\r\n                data[chart.data.dataSource].forEach(function (row) {\r\n                    row[chart.data.valueFields[0].name] = ListenersHelper.randInt(0, maxRand);\r\n                });\r\n            });\r\n        else if (this.config.options.type === 'polar') {\r\n            this.config.options.charts.forEach(function (chart) {\r\n                data[chart.data.dataSource].forEach(function (row) {\r\n                    row[chart.data.valueField.name] = ListenersHelper.randInt(0, maxRand);\r\n                });\r\n            });\r\n        }\r\n        return data;\r\n    };\r\n    Listeners.prototype.getDataConfig = function (notationType) {\r\n        if (notationType === '2d') {\r\n            return {\r\n                dataSource: ListenersHelper.getInputValue('#data-size') === 'normal' ? 'dataSet' : 'dataSet_large',\r\n                keyField: {\r\n                    name: 'brand',\r\n                    format: 'string'\r\n                },\r\n                valueFields: [\r\n                    {\r\n                        name: 'price',\r\n                        format: 'money',\r\n                        title: 'Цена автомобилей на рынке'\r\n                    },\r\n                    {\r\n                        name: 'count',\r\n                        format: 'integer',\r\n                        title: 'Количество автомобилей на душу населения'\r\n                    }\r\n                ]\r\n            };\r\n        }\r\n        else if (notationType === 'interval') {\r\n            return {\r\n                dataSource: 'dataSet_gantt',\r\n                keyField: {\r\n                    name: 'task',\r\n                    format: 'string'\r\n                },\r\n                valueField1: {\r\n                    name: 'start',\r\n                    format: 'date'\r\n                },\r\n                valueField2: {\r\n                    name: 'end',\r\n                    format: 'date'\r\n                }\r\n            };\r\n        }\r\n        else if (notationType === 'polar') {\r\n            return {\r\n                dataSource: ListenersHelper.getInputValue('#data-size') === 'normal' ? 'dataSet' : 'dataSet_large',\r\n                keyField: {\r\n                    name: 'brand',\r\n                    format: 'string'\r\n                },\r\n                valueField: {\r\n                    name: 'price',\r\n                    format: 'money'\r\n                }\r\n            };\r\n        }\r\n    };\r\n    Listeners.prototype.getTooltipConfig = function (notationType) {\r\n        if (notationType === '2d' || notationType === 'polar') {\r\n            return {\r\n                data: {\r\n                    fields: [\r\n                        {\r\n                            name: 'price',\r\n                            format: 'money'\r\n                        }\r\n                    ]\r\n                }\r\n            };\r\n        }\r\n        else if (notationType === 'interval') {\r\n            return {\r\n                data: {\r\n                    fields: [\r\n                        {\r\n                            format: 'date',\r\n                            name: 'start'\r\n                        },\r\n                        {\r\n                            format: 'date',\r\n                            name: 'end'\r\n                        }\r\n                    ]\r\n                }\r\n            };\r\n        }\r\n    };\r\n    Listeners.prototype.changeConfigOptions = function (notationType) {\r\n        if (notationType === '2d') {\r\n            var options = {\r\n                legend: this.config.options.legend,\r\n                isSegmented: false,\r\n                orientation: ListenersHelper.getInputValue('#chart-orient'),\r\n                type: notationType,\r\n                charts: [\r\n                    {\r\n                        data: this.getDataConfig(notationType),\r\n                        title: this.config.options.charts[0].title,\r\n                        tooltip: this.getTooltipConfig(notationType),\r\n                        type: ListenersHelper.getInputValue('#chart-2d-type') === 'barLine' ? 'bar' : ListenersHelper.getInputValue('#chart-2d-type'),\r\n                        embeddedLabels: 'none'\r\n                    }\r\n                ],\r\n                axis: {\r\n                    keyAxis: {\r\n                        position: ListenersHelper.getInputValue('#key-axis-orient'),\r\n                        ticks: {\r\n                            flag: false\r\n                        }\r\n                    },\r\n                    valueAxis: {\r\n                        domain: {\r\n                            start: -1,\r\n                            end: -1\r\n                        },\r\n                        position: ListenersHelper.getInputValue('#value-axis-orient'),\r\n                        ticks: {\r\n                            flag: false\r\n                        }\r\n                    }\r\n                },\r\n                additionalElements: {\r\n                    gridLine: {\r\n                        flag: {\r\n                            value: true,\r\n                            key: false\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            this.config.options = options;\r\n        }\r\n        else if (notationType === 'polar') {\r\n            var options = {\r\n                legend: this.config.options.legend,\r\n                type: notationType,\r\n                charts: [\r\n                    {\r\n                        data: this.getDataConfig(notationType),\r\n                        title: this.config.options.charts[0].title,\r\n                        tooltip: this.getTooltipConfig(notationType),\r\n                        type: 'donut'\r\n                    }\r\n                ]\r\n            };\r\n            this.config.options = options;\r\n        }\r\n        else if (notationType === 'interval') {\r\n            var options = {\r\n                legend: this.config.options.legend,\r\n                orientation: ListenersHelper.getInputValue('#chart-orient'),\r\n                type: notationType,\r\n                charts: [\r\n                    {\r\n                        data: this.getDataConfig(notationType),\r\n                        title: this.config.options.charts[0].title,\r\n                        tooltip: this.getTooltipConfig(notationType),\r\n                        type: 'gantt'\r\n                    }\r\n                ],\r\n                axis: {\r\n                    keyAxis: {\r\n                        position: ListenersHelper.getInputValue('#key-axis-orient'),\r\n                        ticks: {\r\n                            flag: false\r\n                        }\r\n                    },\r\n                    valueAxis: {\r\n                        position: ListenersHelper.getInputValue('#value-axis-orient'),\r\n                        ticks: {\r\n                            flag: false\r\n                        }\r\n                    }\r\n                },\r\n                additionalElements: {\r\n                    gridLine: {\r\n                        flag: {\r\n                            value: true,\r\n                            key: false\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            this.config.options = options;\r\n        }\r\n        this.updateFull();\r\n    };\r\n    Listeners.prototype.change2DChartConfig = function (chartType) {\r\n        var config = this.config;\r\n        if (chartType === 'barLine' && config.options.charts.length === 1) {\r\n            config.options.charts.push(ListenersHelper.getCopy(config.options.charts[0]));\r\n            config.options.charts[0].type = 'bar';\r\n            config.options.charts[1].type = 'line';\r\n            config.options.charts[1].data.dataSource = config.options.charts[0].data.dataSource + '2';\r\n        }\r\n        else if (chartType === 'barLine' && config.options.charts.length === 2) {\r\n            config.options.charts[0].type = 'bar';\r\n            config.options.charts[1].type = 'line';\r\n            config.options.charts[1].data.dataSource = config.options.charts[0].data.dataSource + '2';\r\n        }\r\n        else if (chartType !== 'barLine') {\r\n            config.options.charts.splice(1, 1);\r\n            config.options.charts[0].type = chartType;\r\n        }\r\n    };\r\n    Listeners.prototype.setMainListeners = function () {\r\n        var thisClass = this;\r\n        document.querySelector('#notation').addEventListener('change', function () {\r\n            thisClass.showControlsForNotation(this.value);\r\n            thisClass.changeConfigOptions(this.value);\r\n            thisClass.setControlsValues();\r\n        });\r\n        document.querySelector('#block-width').addEventListener('input', function (e) {\r\n            thisClass.config.canvas.size.width = parseFloat(ListenersHelper.getInputValue('#block-width')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#block-height').addEventListener('input', function (e) {\r\n            thisClass.config.canvas.size.height = parseFloat(ListenersHelper.getInputValue('#block-height')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#wrapper-border').addEventListener('change', function () {\r\n            if (this.checked) {\r\n                thisClass.config.canvas.class += ' outline';\r\n            }\r\n            else {\r\n                thisClass.config.canvas.class = thisClass.config.canvas.class.replace('outline', '');\r\n            }\r\n            thisClass.updateFull();\r\n        });\r\n    };\r\n    Listeners.prototype.setDesignerListeners = function () {\r\n        var thisClass = this;\r\n        document.querySelector('#axis-label-width').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.axisLabel.maxSize.main = parseFloat(ListenersHelper.getInputValue('#axis-label-width'));\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#chart-block-margin-top').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartBlockMargin.top = parseFloat(ListenersHelper.getInputValue('#chart-block-margin-top')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#chart-block-margin-bottom').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartBlockMargin.bottom = parseFloat(ListenersHelper.getInputValue('#chart-block-margin-bottom')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#chart-block-margin-left').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartBlockMargin.left = parseFloat(ListenersHelper.getInputValue('#chart-block-margin-left')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#chart-block-margin-right').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartBlockMargin.right = parseFloat(ListenersHelper.getInputValue('#chart-block-margin-right')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#bar-distance').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartOptions.bar.barDistance = parseFloat(ListenersHelper.getInputValue('#bar-distance')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#min-bar-group-distance').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartOptions.bar.groupMinDistance = parseFloat(ListenersHelper.getInputValue('#min-bar-group-distance'));\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#max-bar-group-distance').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartOptions.bar.groupMaxDistance = parseFloat(ListenersHelper.getInputValue('#max-bar-group-distance'));\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#min-bar-size').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartOptions.bar.minBarWidth = parseFloat(ListenersHelper.getInputValue('#min-bar-size')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#max-bar-size').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartOptions.bar.maxBarWidth = parseFloat(ListenersHelper.getInputValue('#max-bar-size')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#min-donut-part-size').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartOptions.donut.minPartSize = parseFloat(ListenersHelper.getInputValue('#min-donut-part-size')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('.btn-base-color').addEventListener('click', function () {\r\n            // thisClass.designerConfig.chart.style.palette[0] = color(ListenersHelper.getInputValue('#base-color'));\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#designer-key-grid').addEventListener('change', function () {\r\n            thisClass.designerConfig.additionalElements.gridLine.flag.key = this.checked;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#designer-value-grid').addEventListener('change', function () {\r\n            thisClass.designerConfig.additionalElements.gridLine.flag.value = this.checked;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#pad-angle').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartOptions.donut.padAngle = parseFloat(ListenersHelper.getInputValue('#pad-angle'));\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#donut-min-thickness').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartOptions.donut.minThickness = parseFloat(ListenersHelper.getInputValue('#donut-min-thickness'));\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#donut-max-thickness').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartOptions.donut.maxThickness = parseFloat(ListenersHelper.getInputValue('#donut-max-thickness'));\r\n            thisClass.updateFull();\r\n        });\r\n    };\r\n    Listeners.prototype.setCommonListeners = function () {\r\n        var thisClass = this;\r\n        var config = this.config;\r\n        document.querySelector('#data-size').addEventListener('change', function () {\r\n            var _this = this;\r\n            if (config.options.type === '2d' || config.options.type === 'polar') {\r\n                config.options.charts.forEach(function (chart, index) {\r\n                    chart.data.dataSource = _this.value === 'normal'\r\n                        ? 'dataSet' + (index === 0 ? '' : index + 1)\r\n                        : 'dataSet_large' + (index === 0 ? '' : index + 1);\r\n                });\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#legend').addEventListener('change', function () {\r\n            config.options.legend.position = this.value;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('.btn-random').addEventListener('click', function () {\r\n            if (config.options.type === '2d' || config.options.type === 'polar') {\r\n                var max = parseInt(ListenersHelper.getInputValue('#max-random-value')) || 120;\r\n                var copy = ListenersHelper.getCopy(thisClass.data);\r\n                var newData = thisClass.getDataWithRandomValues(copy, max);\r\n                if (config.options.type === '2d') {\r\n                    config.options.axis.valueAxis.domain.start = -1;\r\n                    config.options.axis.valueAxis.domain.end = max;\r\n                }\r\n                var model = (0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getUpdatedModel)(thisClass.config, newData, thisClass.designerConfig);\r\n                var preparedData = (0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getPreparedData)(model, newData, config);\r\n                thisClass.engine.updateFullBlock(model, preparedData);\r\n            }\r\n        });\r\n        document.querySelector('#max-random-value').addEventListener('keydown', function (e) {\r\n            if (e.code === 'Enter' && (config.options.type === '2d' || config.options.type === 'polar')) {\r\n                var max = parseInt(ListenersHelper.getInputValue('#max-random-value')) || 120;\r\n                var copy = ListenersHelper.getCopy(thisClass.data);\r\n                var newData = thisClass.getDataWithRandomValues(copy, max);\r\n                if (config.options.type === '2d') {\r\n                    config.options.axis.valueAxis.domain.start = -1;\r\n                    config.options.axis.valueAxis.domain.end = max;\r\n                }\r\n                var model = (0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getUpdatedModel)(thisClass.config, newData, thisClass.designerConfig);\r\n                var preparedData = (0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getPreparedData)(model, newData, config);\r\n                thisClass.engine.updateFullBlock(model, preparedData);\r\n            }\r\n        });\r\n    };\r\n    Listeners.prototype.set2DListeners = function () {\r\n        var thisClass = this;\r\n        var config = this.config;\r\n        document.querySelector('#chart-2d-type').addEventListener('change', function () {\r\n            if (config.options.type === '2d') {\r\n                thisClass.change2DChartConfig(this.value);\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#embedded-labels').addEventListener('change', function () {\r\n            var _this = this;\r\n            if (config.options.type === '2d') {\r\n                config.options.charts.forEach(function (chart) { return chart.embeddedLabels = _this.value; });\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('.btn-domain').addEventListener('click', function () {\r\n            if (config.options.type === '2d') {\r\n                var start = ListenersHelper.getInputValue('#domain-start');\r\n                var end = ListenersHelper.getInputValue('#domain-end');\r\n                config.options.axis.valueAxis.domain.start = parseInt(start) || -1;\r\n                config.options.axis.valueAxis.domain.end = parseInt(end) || -1;\r\n                thisClass.engine.updateValueAxis((0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getUpdatedModel)(thisClass.config, thisClass.data, thisClass.designerConfig), thisClass.data);\r\n            }\r\n        });\r\n        document.querySelector('#domain-start').addEventListener('keydown', function (e) {\r\n            if (e.code === 'Enter') {\r\n                if (config.options.type === '2d') {\r\n                    var start = ListenersHelper.getInputValue('#domain-start');\r\n                    var end = ListenersHelper.getInputValue('#domain-end');\r\n                    config.options.axis.valueAxis.domain.start = parseInt(start) || -1;\r\n                    config.options.axis.valueAxis.domain.end = parseInt(end) || -1;\r\n                    thisClass.engine.updateValueAxis((0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getUpdatedModel)(thisClass.config, thisClass.data, thisClass.designerConfig), thisClass.data);\r\n                }\r\n            }\r\n        });\r\n        document.querySelector('#domain-end').addEventListener('keydown', function (e) {\r\n            if (e.code === 'Enter') {\r\n                if (config.options.type === '2d') {\r\n                    var start = ListenersHelper.getInputValue('#domain-start');\r\n                    var end = ListenersHelper.getInputValue('#domain-end');\r\n                    config.options.axis.valueAxis.domain.start = parseInt(start) || -1;\r\n                    config.options.axis.valueAxis.domain.end = parseInt(end) || -1;\r\n                    thisClass.engine.updateValueAxis((0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getUpdatedModel)(thisClass.config, thisClass.data, thisClass.designerConfig), thisClass.data);\r\n                }\r\n            }\r\n        });\r\n        document.querySelector('#is-segmented').addEventListener('change', function () {\r\n            if (config.options.type === '2d') {\r\n                config.options.isSegmented = this.checked;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n    };\r\n    Listeners.prototype.setAxisListeners = function () {\r\n        var thisClass = this;\r\n        var config = this.config;\r\n        document.querySelector('#chart-orient').addEventListener('change', function () {\r\n            if (config.options.type === '2d' || config.options.type === 'interval') {\r\n                config.options.orientation = this.value;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#key-axis-orient').addEventListener('change', function () {\r\n            if (config.options.type === '2d' || config.options.type === 'interval') {\r\n                config.options.axis.keyAxis.position = this.value;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#value-axis-orient').addEventListener('change', function () {\r\n            if (config.options.type === '2d' || config.options.type === 'interval') {\r\n                config.options.axis.valueAxis.position = this.value;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#config-key-grid').addEventListener('change', function () {\r\n            if (config.options.type === '2d' || config.options.type === 'interval') {\r\n                config.options.additionalElements.gridLine.flag.key = this.checked;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#config-value-grid').addEventListener('change', function () {\r\n            if (config.options.type === '2d' || config.options.type === 'interval') {\r\n                config.options.additionalElements.gridLine.flag.value = this.checked;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#config-tick-key').addEventListener('change', function () {\r\n            if (config.options.type === '2d' || config.options.type === 'interval') {\r\n                config.options.axis.keyAxis.ticks.flag = this.checked;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#config-tick-value').addEventListener('change', function () {\r\n            if (config.options.type === '2d' || config.options.type === 'interval') {\r\n                config.options.axis.valueAxis.ticks.flag = this.checked;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n    };\r\n    Listeners.prototype.setControlsValues = function () {\r\n        var config = this.config;\r\n        var designerConfig = this.designerConfig;\r\n        ListenersHelper.setInputValue('#notation', config.options.type);\r\n        ListenersHelper.setInputValue('#block-width', config.canvas.size.width);\r\n        ListenersHelper.setInputValue('#block-height', config.canvas.size.height);\r\n        ListenersHelper.setCheckboxValue('#wrapper-border', config.canvas.class.includes('outline'));\r\n        ListenersHelper.setInputValue('#legend', config.options.legend.position);\r\n        ListenersHelper.setInputValue('#data-size', config.options.charts[0].data.dataSource.includes('large') ? 'large' : 'normal');\r\n        ListenersHelper.setInputValue('#axis-label-width', designerConfig.canvas.axisLabel.maxSize.main);\r\n        ListenersHelper.setInputValue('#chart-block-margin-top', designerConfig.canvas.chartBlockMargin.top);\r\n        ListenersHelper.setInputValue('#chart-block-margin-bottom', designerConfig.canvas.chartBlockMargin.bottom);\r\n        ListenersHelper.setInputValue('#chart-block-margin-left', designerConfig.canvas.chartBlockMargin.left);\r\n        ListenersHelper.setInputValue('#chart-block-margin-right', designerConfig.canvas.chartBlockMargin.right);\r\n        ListenersHelper.setInputValue('#min-bar-group-distance', designerConfig.canvas.chartOptions.bar.groupMinDistance);\r\n        ListenersHelper.setInputValue('#max-bar-group-distance', designerConfig.canvas.chartOptions.bar.groupMaxDistance);\r\n        ListenersHelper.setInputValue('#bar-distance', designerConfig.canvas.chartOptions.bar.barDistance);\r\n        ListenersHelper.setInputValue('#min-bar-size', designerConfig.canvas.chartOptions.bar.minBarWidth);\r\n        ListenersHelper.setInputValue('#max-bar-size', designerConfig.canvas.chartOptions.bar.maxBarWidth);\r\n        ListenersHelper.setInputValue('#min-donut-part-size', designerConfig.canvas.chartOptions.donut.minPartSize);\r\n        // ListenersHelper.setInputValue('#base-color', designerConfig.chart.style.palette[0]);\r\n        ListenersHelper.setCheckboxValue('#designer-key-grid', designerConfig.additionalElements.gridLine.flag.key);\r\n        ListenersHelper.setCheckboxValue('#designer-value-grid', designerConfig.additionalElements.gridLine.flag.value);\r\n        ListenersHelper.setInputValue('#pad-angle', designerConfig.canvas.chartOptions.donut.padAngle);\r\n        ListenersHelper.setInputValue('#donut-min-thickness', designerConfig.canvas.chartOptions.donut.minThickness);\r\n        ListenersHelper.setInputValue('#donut-max-thickness', designerConfig.canvas.chartOptions.donut.maxThickness);\r\n        if (config.options.type === '2d') {\r\n            ListenersHelper.setInputValue('#chart-2d-type', config.options.charts[0].type);\r\n            ListenersHelper.setInputValue('#chart-orient', config.options.orientation);\r\n            ListenersHelper.setInputValue('#key-axis-orient', config.options.axis.keyAxis.position);\r\n            ListenersHelper.setInputValue('#value-axis-orient', config.options.axis.valueAxis.position);\r\n            ListenersHelper.setCheckboxValue('#config-value-grid', config.options.additionalElements.gridLine.flag.value);\r\n            ListenersHelper.setCheckboxValue('#config-key-grid', config.options.additionalElements.gridLine.flag.key);\r\n            ListenersHelper.setCheckboxValue('#config-tick-key', config.options.axis.keyAxis.ticks.flag);\r\n            ListenersHelper.setCheckboxValue('#config-tick-value', config.options.axis.valueAxis.ticks.flag);\r\n            ListenersHelper.setCheckboxValue('#is-segmented', config.options.isSegmented);\r\n            ListenersHelper.setInputValue('#embedded-labels', config.options.charts[0].embeddedLabels);\r\n        }\r\n        else if (config.options.type === 'polar') {\r\n            ListenersHelper.setInputValue('#chart-polar-type', config.options.charts[0].type);\r\n        }\r\n    };\r\n    return Listeners;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Listeners);\r\n\n\n//# sourceURL=webpack://packd3ts/./src/listeners/listeners.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// the startup function
/******/ 	// It's empty as some runtime module handles the default behavior
/******/ 	__webpack_require__.x = x => {}
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// Promise = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"listeners": 0
/******/ 		};
/******/ 		
/******/ 		var deferredModules = [
/******/ 			["./src/listeners/listeners.ts","vendors-node_modules_css-loader_dist_runtime_api_js-node_modules_d3_index_js-node_modules_sty-ef83b8","src_model_legendModel_legendModel_ts-src_model_modelOptions_ts"]
/******/ 		];
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		var checkDeferredModules = x => {};
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime, executeModules] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0, resolves = [];
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					resolves.push(installedChunks[chunkId][0]);
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			while(resolves.length) {
/******/ 				resolves.shift()();
/******/ 			}
/******/ 		
/******/ 			// add entry modules from loaded chunk to deferred list
/******/ 			if(executeModules) deferredModules.push.apply(deferredModules, executeModules);
/******/ 		
/******/ 			// run deferred modules when all chunks ready
/******/ 			return checkDeferredModules();
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkpackd3ts"] = self["webpackChunkpackd3ts"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 		
/******/ 		function checkDeferredModulesImpl() {
/******/ 			var result;
/******/ 			for(var i = 0; i < deferredModules.length; i++) {
/******/ 				var deferredModule = deferredModules[i];
/******/ 				var fulfilled = true;
/******/ 				for(var j = 1; j < deferredModule.length; j++) {
/******/ 					var depId = deferredModule[j];
/******/ 					if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferredModules.splice(i--, 1);
/******/ 					result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 				}
/******/ 			}
/******/ 			if(deferredModules.length === 0) {
/******/ 				__webpack_require__.x();
/******/ 				__webpack_require__.x = x => {};
/******/ 			}
/******/ 			return result;
/******/ 		}
/******/ 		var startup = __webpack_require__.x;
/******/ 		__webpack_require__.x = () => {
/******/ 			// reset startup function so it can be called again when more startup code is added
/******/ 			__webpack_require__.x = startup || (x => {});
/******/ 			return (checkDeferredModules = checkDeferredModulesImpl)();
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// run startup
/******/ 	return __webpack_require__.x();
/******/ })()
;