/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkpackd3ts"] = self["webpackChunkpackd3ts"] || []).push([["src_listeners_listeners_ts"],{

/***/ "./node_modules/css-loader/dist/cjs.js!./src/style/main.css":
/*!******************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/style/main.css ***!
  \******************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".main-wrapper  {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    align-items: center;\\r\\n}\\r\\n\\r\\n\\r\\n.form {\\r\\n    display: flex;\\r\\n    flex-wrap: wrap;\\r\\n}\\r\\n.controls-block  {\\r\\n    font-family: \\\"Roboto\\\", sans-serif;\\r\\n    border: 1px solid black;\\r\\n    padding: 0 .2rem;\\r\\n    box-sizing: border-box;\\r\\n    margin: 1rem 0;\\r\\n}\\r\\n.form-group {\\r\\n    margin: 10px;\\r\\n    font-family: \\\"Roboto\\\", sans-serif;\\r\\n}\\r\\n.controls-group {\\r\\n    display: flex;\\r\\n}\\r\\n.controls-section {\\r\\n    margin-top: 1rem;\\r\\n}\\r\\nlabel {\\r\\n    font-size: 12px;\\r\\n}\\r\\n\\r\\n.wrapper {\\r\\n    margin: 0 auto;\\r\\n    position: relative;\\r\\n}\\r\\nh3.title {\\r\\n    font-size: 18px;\\r\\n    font-weight: 500;\\r\\n}\\r\\n.bar, .area, .donut {\\r\\n    fill: steelblue;\\r\\n    stroke: none;\\r\\n}\\r\\n.line {\\r\\n    fill: none;\\r\\n    stroke-width: 5;\\r\\n}\\r\\n.outline {\\r\\n    outline: 1px solid black;\\r\\n}\\r\\n.data-label {\\r\\n    font-family: \\\"Roboto\\\" sans-serif;\\r\\n    font-style: normal;\\r\\n    font-weight: 300;\\r\\n    font-size: 12px;\\r\\n    line-height: 140.62%;\\r\\n    color: #444444;\\r\\n}\\r\\n.legend-item:not(:first-of-type) {\\r\\n    margin-left: 20px;\\r\\n}\\r\\n.legend-label {\\r\\n    font-size: 12px;\\r\\n    font-family: \\\"Roboto\\\", sans-serif;\\r\\n    font-weight: 300;\\r\\n    color: #444444;\\r\\n    line-height: 140.62%;\\r\\n}\\r\\n.legend-circle {\\r\\n    display: inline-block;\\r\\n    width: 11px;\\r\\n    height: 11px;\\r\\n    border-radius: 50%;\\r\\n    margin-right: 8px;\\r\\n}\\r\\n.tooltip-circle {\\r\\n    display: inline-block;\\r\\n    width: 11px;\\r\\n    height: 11px;\\r\\n    border-radius: 50%;\\r\\n    margin-right: 13px;\\r\\n}\\r\\n.tooltip-block {\\r\\n    pointer-events: none;\\r\\n    z-index: 100;\\r\\n    filter: drop-shadow(0px 4px 10px rgba(0, 0, 0, 0.1));\\r\\n}\\r\\n.tooltip-content {\\r\\n    position: relative;\\r\\n    pointer-events: none;\\r\\n    font-size: 14px;\\r\\n    font-family: \\\"Roboto\\\", sans-serif;\\r\\n    line-height: 1;\\r\\n    font-weight: bold;\\r\\n    padding: 15px 17px 15px 12px;\\r\\n    background: white;\\r\\n    color: black;\\r\\n    z-index: 102;\\r\\n    min-width: 100px;\\r\\n}\\r\\n.tooltip-arrow {\\r\\n    position: absolute;\\r\\n    z-index: 101;\\r\\n    background-color: white;\\r\\n    width: 20px;\\r\\n    height: 20px;\\r\\n    transform: rotate(45deg);\\r\\n}\\r\\n.tooltip-group {\\r\\n    display: flex;\\r\\n}\\r\\n.tooltip-color {\\r\\n    /* line-height: 19.69px; */\\r\\n}\\r\\n.tooltip-text-item {\\r\\n    font-family: \\\"Roboto\\\" sans-serif;\\r\\n    font-weight: 500;\\r\\n    font-style: normal;\\r\\n    font-size: 14px;\\r\\n    /* line-height: 19.69px; */\\r\\n}\\r\\n.tooltip-group:not(:first-of-type) {\\r\\n    margin-top: 8px;\\r\\n}\\r\\n.tooltip-line {\\r\\n    stroke: #b6b6b6;\\r\\n    stroke-dasharray: 3;\\r\\n    stroke-width: 1px;\\r\\n}\\r\\n\\r\\n.donut-aggregator {\\r\\n    font-family: \\\"Roboto\\\", sans-serif;\\r\\n    font-weight: bold;\\r\\n}\\r\\n\\r\\n.grid-line {\\r\\n    stroke: #D2D2D2;\\r\\n    stroke-dasharray: 3;\\r\\n}\\r\\n\\r\\n.axis .domain {\\r\\n    stroke: #D2D2D2;\\r\\n}\\r\\n.axis .tick line:first-of-type {\\r\\n    stroke: #D2D2D2;\\r\\n}\\r\\n\\r\\n.record-overflow-alert {\\r\\n    background-color: #FFFFFF;;\\r\\n    padding: 5px 10px 5px;\\r\\n    border: 1px solid #0F6698;\\r\\n    box-sizing: border-box;\\r\\n    box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.15);\\r\\n    border-radius: 100px;\\r\\n    font-family: \\\"Roboto\\\", sans-serif;\\r\\n    font-style: normal;\\r\\n    font-weight: 500;\\r\\n    font-size: 10px;\\r\\n    line-height: 140.62%;\\r\\n    color: #0F6698;\\r\\n}\\r\\n.record-overflow-alert .btn-close {\\r\\n    border: none;\\r\\n    background-color: transparent;\\r\\n    cursor: pointer;\\r\\n    font-size: 1.3rem;\\r\\n}\\r\\n\\r\\n.chart-block {\\r\\n    stroke-width: 1px !important;\\r\\n}\", \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://packd3ts/./src/style/main.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./src/style/main.css":
/*!****************************!*\
  !*** ./src/style/main.css ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_main_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./main.css */ \"./node_modules/css-loader/dist/cjs.js!./src/style/main.css\");\n\n            \n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_main_css__WEBPACK_IMPORTED_MODULE_1__.default, options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_main_css__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});\n\n//# sourceURL=webpack://packd3ts/./src/style/main.css?");

/***/ }),

/***/ "./src/designer/designerConfigOptions.ts":
/*!***********************************************!*\
  !*** ./src/designer/designerConfigOptions.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/index.js\");\n\r\nvar designerConfig = {\r\n    canvas: {\r\n        axisLabel: {\r\n            maxSize: {\r\n                orthogonal: 20,\r\n                main: 70\r\n            }\r\n        },\r\n        chartBlockMargin: {\r\n            top: 30,\r\n            bottom: 20,\r\n            left: 20,\r\n            right: 20\r\n        },\r\n        legendBlock: {\r\n            maxWidth: 200\r\n        },\r\n        chartOptions: {\r\n            bar: {\r\n                groupDistance: 10,\r\n                minBarWidth: 3,\r\n                maxBarWidth: 20,\r\n                barDistance: 5\r\n            },\r\n            donut: {\r\n                minPartSize: 50\r\n            }\r\n        }\r\n    },\r\n    chart: {\r\n        style: {\r\n            palette: [(0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#008FFB'),\r\n                (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#00E396'),\r\n                (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#FEB019'),\r\n                (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#FF4560'),\r\n                (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#775DD0'),\r\n                (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#801717'),\r\n                (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#0DAAFF'),\r\n                (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#26FFB0'),\r\n                (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#FF2E2E'),\r\n                (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#032B40'),\r\n                (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#0A402C'),\r\n                (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#0B99E6'),\r\n                (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#E62929')]\r\n        }\r\n    },\r\n    dataFormat: {\r\n        formatters: {\r\n            'integer': function (options, value) { return Intl.NumberFormat().format(value); },\r\n            'decimal': function (options, value) { return Intl.NumberFormat().format(value); },\r\n            'money': function (options, value) { return Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(value); },\r\n            'date': function (options, value) { return value.getFullYear() + '-' + (value.getMonth() + 1) + '-' + value.getDate() + ' ' + value.getHours() + ':' + value.getMinutes(); },\r\n            'string': function (options, value) { return value; }\r\n        }\r\n    },\r\n    additionalElements: {\r\n        gridLine: {\r\n            flag: {\r\n                value: true,\r\n                key: true\r\n            }\r\n        }\r\n    }\r\n};\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (designerConfig);\r\n\n\n//# sourceURL=webpack://packd3ts/./src/designer/designerConfigOptions.ts?");

/***/ }),

/***/ "./src/listeners/listeners.ts":
/*!************************************!*\
  !*** ./src/listeners/listeners.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _model_modelOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/modelOptions */ \"./src/model/modelOptions.ts\");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/index.js\");\n\r\n\r\nvar ListenersHelper = /** @class */ (function () {\r\n    function ListenersHelper() {\r\n    }\r\n    ListenersHelper.randInt = function (min, max) {\r\n        return Math.round(Math.random() * (max - min) + min);\r\n    };\r\n    ListenersHelper.getCopy = function (obj) {\r\n        var newObj = {};\r\n        if (typeof obj === 'object') {\r\n            for (var key in obj) {\r\n                if (Array.isArray(obj[key])) {\r\n                    newObj[key] = this.getCopyOfArr(obj[key]);\r\n                }\r\n                else if (typeof obj[key] === 'object') {\r\n                    newObj[key] = this.getCopy(obj[key]);\r\n                }\r\n                else {\r\n                    newObj[key] = obj[key];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return obj;\r\n        }\r\n        return newObj;\r\n    };\r\n    ListenersHelper.getCopyOfArr = function (initial) {\r\n        var _this = this;\r\n        var newArr = [];\r\n        initial.forEach(function (d) { return newArr.push(_this.getCopy(d)); });\r\n        return newArr;\r\n    };\r\n    ListenersHelper.getInputValue = function (selector) {\r\n        return document.querySelector(selector).value;\r\n    };\r\n    ListenersHelper.setInputValue = function (selector, value) {\r\n        document.querySelector(selector).value = value.toString();\r\n    };\r\n    ListenersHelper.setCheckboxValue = function (selector, value) {\r\n        document.querySelector(selector).checked = value;\r\n    };\r\n    return ListenersHelper;\r\n}());\r\nvar Listeners = /** @class */ (function () {\r\n    function Listeners(engine, config, designerConfig, data) {\r\n        this.engine = engine;\r\n        this.config = config;\r\n        this.designerConfig = designerConfig;\r\n        this.data = data;\r\n        this.setControlsValues();\r\n        this.showControlsForNotation(this.config.options.type);\r\n        this.setMainListeners();\r\n        this.setDesignerListeners();\r\n        this.setCommonListeners();\r\n        this.setAxisListeners();\r\n        this.set2DListeners();\r\n        this.setPolarListeners();\r\n    }\r\n    Listeners.prototype.updateFull = function () {\r\n        this.dropAxisDomain(this.config);\r\n        var model = (0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getUpdatedModel)(this.config, this.data);\r\n        var preparedData = (0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getPreparedData)(model, this.data, this.config);\r\n        this.engine.updateFullBlock(model, preparedData);\r\n    };\r\n    Listeners.prototype.dropAxisDomain = function (config) {\r\n        if (config.options.type === '2d') {\r\n            config.options.axis.valueAxis.domain.end = -1;\r\n            config.options.axis.valueAxis.domain.start = -1;\r\n        }\r\n    };\r\n    Listeners.prototype.showControlsForNotation = function (notationType) {\r\n        if (notationType === '2d') {\r\n            document.querySelector('.block-polar').style.display = 'none';\r\n            document.querySelector('.block-2d').style.display = 'block';\r\n            document.querySelector('.block-axis').style.display = 'block';\r\n        }\r\n        else if (notationType === 'polar') {\r\n            document.querySelector('.block-2d').style.display = 'none';\r\n            document.querySelector('.block-polar').style.display = 'block';\r\n            document.querySelector('.block-axis').style.display = 'none';\r\n        }\r\n        else if (notationType === 'interval') {\r\n            document.querySelector('.block-polar').style.display = 'none';\r\n            document.querySelector('.block-2d').style.display = 'none';\r\n            document.querySelector('.block-axis').style.display = 'block';\r\n        }\r\n    };\r\n    Listeners.prototype.getDataWithRandomValues = function (data, maxRand) {\r\n        if (this.config.options.type === 'polar' || this.config.options.type === '2d')\r\n            this.config.options.charts.forEach(function (chart) {\r\n                data[chart.data.dataSource].forEach(function (row) {\r\n                    row[chart.data.valueField.name] = ListenersHelper.randInt(0, maxRand);\r\n                });\r\n            });\r\n        return data;\r\n    };\r\n    Listeners.prototype.getDataConfig = function (notationType) {\r\n        if (notationType === '2d' || notationType === 'polar') {\r\n            return {\r\n                dataSource: ListenersHelper.getInputValue('#data-size') === 'normal' ? 'dataSet' : 'dataSet_large',\r\n                keyField: {\r\n                    name: 'brand',\r\n                    format: 'string'\r\n                },\r\n                valueField: {\r\n                    name: 'price',\r\n                    format: 'money'\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                dataSource: 'dataSet_gantt',\r\n                keyField: {\r\n                    name: 'task',\r\n                    format: 'string'\r\n                },\r\n                valueField1: {\r\n                    name: 'start',\r\n                    format: 'date'\r\n                },\r\n                valueField2: {\r\n                    name: 'end',\r\n                    format: 'date'\r\n                }\r\n            };\r\n        }\r\n    };\r\n    Listeners.prototype.getTooltipConfig = function (notationType) {\r\n        if (notationType === '2d' || notationType === 'polar') {\r\n            return {\r\n                data: {\r\n                    fields: [\r\n                        {\r\n                            name: 'price',\r\n                            format: 'money'\r\n                        }\r\n                    ]\r\n                }\r\n            };\r\n        }\r\n        else if (notationType === 'interval') {\r\n            return {\r\n                data: {\r\n                    fields: [\r\n                        {\r\n                            format: 'date',\r\n                            name: 'start'\r\n                        },\r\n                        {\r\n                            format: 'date',\r\n                            name: 'end'\r\n                        }\r\n                    ]\r\n                }\r\n            };\r\n        }\r\n    };\r\n    Listeners.prototype.changeConfigOptions = function (notationType) {\r\n        if (notationType === '2d') {\r\n            var options = {\r\n                type: notationType,\r\n                charts: [\r\n                    {\r\n                        data: this.getDataConfig(notationType),\r\n                        legend: this.config.options.charts[0].legend,\r\n                        title: this.config.options.charts[0].title,\r\n                        tooltip: this.getTooltipConfig(notationType),\r\n                        orientation: ListenersHelper.getInputValue('#chart-orient'),\r\n                        type: ListenersHelper.getInputValue('#chart-2d-type') === 'barLine' ? 'bar' : ListenersHelper.getInputValue('#chart-2d-type')\r\n                    }\r\n                ],\r\n                axis: {\r\n                    keyAxis: {\r\n                        position: ListenersHelper.getInputValue('#key-axis-orient'),\r\n                        ticks: {\r\n                            flag: true\r\n                        }\r\n                    },\r\n                    valueAxis: {\r\n                        domain: {\r\n                            start: -1,\r\n                            end: -1\r\n                        },\r\n                        position: ListenersHelper.getInputValue('#value-axis-orient'),\r\n                        ticks: {\r\n                            flag: true\r\n                        }\r\n                    }\r\n                },\r\n                additionalElements: {\r\n                    gridLine: {\r\n                        flag: {\r\n                            value: true,\r\n                            key: false\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            if ((options.charts[0].type === 'line' || options.charts[0].type === 'bar') && options.charts.length === 1) {\r\n                options.charts.push(ListenersHelper.getCopy(options.charts[0]));\r\n                options.charts[1].data.dataSource = options.charts[0].data.dataSource + '2';\r\n            }\r\n            else if ((options.charts[0].type === 'line' || options.charts[0].type === 'bar') && options.charts.length === 2) {\r\n                options.charts[1] = ListenersHelper.getCopy(options.charts[0]);\r\n                options.charts[1].data.dataSource = options.charts[0].data.dataSource + '2';\r\n            }\r\n            this.config.options = options;\r\n        }\r\n        else if (notationType === 'polar') {\r\n            var options = {\r\n                type: notationType,\r\n                charts: [\r\n                    {\r\n                        data: this.getDataConfig(notationType),\r\n                        legend: this.config.options.charts[0].legend,\r\n                        title: this.config.options.charts[0].title,\r\n                        tooltip: this.getTooltipConfig(notationType),\r\n                        type: 'donut',\r\n                        appearanceOptions: {\r\n                            innerRadius: parseFloat(ListenersHelper.getInputValue('#inner-radius')) || 0,\r\n                            padAngle: parseFloat(ListenersHelper.getInputValue('#pad-angle')) || 0\r\n                        }\r\n                    }\r\n                ]\r\n            };\r\n            this.config.options = options;\r\n        }\r\n        else if (notationType === 'interval') {\r\n            var options = {\r\n                type: notationType,\r\n                charts: [\r\n                    {\r\n                        data: this.getDataConfig(notationType),\r\n                        legend: this.config.options.charts[0].legend,\r\n                        title: this.config.options.charts[0].title,\r\n                        tooltip: this.getTooltipConfig(notationType),\r\n                        orientation: ListenersHelper.getInputValue('#chart-orient'),\r\n                        type: 'gantt'\r\n                    }\r\n                ],\r\n                axis: {\r\n                    keyAxis: {\r\n                        position: ListenersHelper.getInputValue('#key-axis-orient'),\r\n                        ticks: {\r\n                            flag: true\r\n                        }\r\n                    },\r\n                    valueAxis: {\r\n                        position: ListenersHelper.getInputValue('#value-axis-orient'),\r\n                        ticks: {\r\n                            flag: true\r\n                        }\r\n                    }\r\n                },\r\n                additionalElements: {\r\n                    gridLine: {\r\n                        flag: {\r\n                            value: true,\r\n                            key: false\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            this.config.options = options;\r\n        }\r\n        this.updateFull();\r\n    };\r\n    Listeners.prototype.change2DChartConfig = function (chartType) {\r\n        var config = this.config;\r\n        if (chartType === 'area') {\r\n            if (config.options.charts.length !== 1)\r\n                config.options.charts.splice(1, config.options.charts.length - 1);\r\n            config.options.charts[0].type = chartType;\r\n        }\r\n        else if ((chartType === 'bar' || chartType === 'line') && config.options.charts.length === 1) {\r\n            config.options.charts.push(ListenersHelper.getCopy(config.options.charts[0]));\r\n            config.options.charts.forEach(function (chart) { return chart.type = chartType; });\r\n            config.options.charts[1].data.dataSource = config.options.charts[0].data.dataSource + '2';\r\n        }\r\n        else if ((chartType === 'bar' || chartType === 'line') && config.options.charts.length === 2) {\r\n            config.options.charts.forEach(function (chart) { return chart.type = chartType; });\r\n            config.options.charts[1].data.dataSource = config.options.charts[0].data.dataSource + '2';\r\n        }\r\n        else if (chartType === 'barLine' && config.options.charts.length === 1) {\r\n            config.options.charts.push(ListenersHelper.getCopy(config.options.charts[0]));\r\n            config.options.charts[0].type = 'bar';\r\n            config.options.charts[1].type = 'line';\r\n            config.options.charts[1].data.dataSource = config.options.charts[0].data.dataSource + '2';\r\n        }\r\n        else if (chartType === 'barLine' && config.options.charts.length === 2) {\r\n            config.options.charts[0].type = 'bar';\r\n            config.options.charts[1].type = 'line';\r\n            config.options.charts[1].data.dataSource = config.options.charts[0].data.dataSource + '2';\r\n        }\r\n    };\r\n    Listeners.prototype.setMainListeners = function () {\r\n        var thisClass = this;\r\n        document.querySelector('#notation').addEventListener('change', function () {\r\n            thisClass.showControlsForNotation(this.value);\r\n            thisClass.changeConfigOptions(this.value);\r\n            thisClass.setControlsValues();\r\n        });\r\n        document.querySelector('#block-width').addEventListener('input', function (e) {\r\n            thisClass.config.canvas.size.width = parseFloat(ListenersHelper.getInputValue('#block-width')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#block-height').addEventListener('input', function (e) {\r\n            thisClass.config.canvas.size.height = parseFloat(ListenersHelper.getInputValue('#block-height')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#wrapper-border').addEventListener('change', function () {\r\n            if (this.checked) {\r\n                thisClass.config.canvas.class += ' outline';\r\n            }\r\n            else {\r\n                thisClass.config.canvas.class = thisClass.config.canvas.class.replace('outline', '');\r\n            }\r\n            thisClass.updateFull();\r\n        });\r\n    };\r\n    Listeners.prototype.setDesignerListeners = function () {\r\n        var thisClass = this;\r\n        document.querySelector('#axis-label-width').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.axisLabel.maxSize.main = parseFloat(ListenersHelper.getInputValue('#axis-label-width'));\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#chart-block-margin-top').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartBlockMargin.top = parseFloat(ListenersHelper.getInputValue('#chart-block-margin-top')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#chart-block-margin-bottom').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartBlockMargin.bottom = parseFloat(ListenersHelper.getInputValue('#chart-block-margin-bottom')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#chart-block-margin-left').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartBlockMargin.left = parseFloat(ListenersHelper.getInputValue('#chart-block-margin-left')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#chart-block-margin-right').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartBlockMargin.right = parseFloat(ListenersHelper.getInputValue('#chart-block-margin-right')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#bar-distance').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartOptions.bar.barDistance = parseFloat(ListenersHelper.getInputValue('#bar-distance')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#bar-group-distance').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartOptions.bar.groupDistance = parseFloat(ListenersHelper.getInputValue('#bar-group-distance'));\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#min-bar-size').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartOptions.bar.minBarWidth = parseFloat(ListenersHelper.getInputValue('#min-bar-size')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#max-bar-size').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartOptions.bar.maxBarWidth = parseFloat(ListenersHelper.getInputValue('#max-bar-size')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#min-donut-part-size').addEventListener('input', function () {\r\n            thisClass.designerConfig.canvas.chartOptions.donut.minPartSize = parseFloat(ListenersHelper.getInputValue('#min-donut-part-size')) || 0;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('.btn-base-color').addEventListener('click', function () {\r\n            thisClass.designerConfig.chart.style.palette[0] = (0,d3__WEBPACK_IMPORTED_MODULE_1__.color)(ListenersHelper.getInputValue('#base-color'));\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#designer-key-grid').addEventListener('change', function () {\r\n            thisClass.designerConfig.additionalElements.gridLine.flag.key = this.checked;\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('#designer-value-grid').addEventListener('change', function () {\r\n            thisClass.designerConfig.additionalElements.gridLine.flag.value = this.checked;\r\n            thisClass.updateFull();\r\n        });\r\n    };\r\n    Listeners.prototype.setCommonListeners = function () {\r\n        var thisClass = this;\r\n        var config = this.config;\r\n        document.querySelector('#data-size').addEventListener('change', function () {\r\n            var _this = this;\r\n            if (config.options.type === '2d' || config.options.type === 'polar') {\r\n                config.options.charts.forEach(function (chart, index) {\r\n                    chart.data.dataSource = _this.value === 'normal'\r\n                        ? 'dataSet' + (index === 0 ? '' : index + 1)\r\n                        : 'dataSet_large' + (index === 0 ? '' : index + 1);\r\n                });\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#legend').addEventListener('change', function () {\r\n            var _this = this;\r\n            config.options.charts.forEach(function (chart) {\r\n                chart.legend.position = _this.value;\r\n            });\r\n            thisClass.updateFull();\r\n        });\r\n        document.querySelector('.btn-random').addEventListener('click', function () {\r\n            if (config.options.type === '2d' || config.options.type === 'polar') {\r\n                var max = parseInt(ListenersHelper.getInputValue('#max-random-value')) || 120;\r\n                var copy = ListenersHelper.getCopy(thisClass.data);\r\n                var newData = thisClass.getDataWithRandomValues(copy, max);\r\n                if (config.options.type === '2d') {\r\n                    config.options.axis.valueAxis.domain.start = -1;\r\n                    config.options.axis.valueAxis.domain.end = max;\r\n                }\r\n                var model = (0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getUpdatedModel)(thisClass.config, newData);\r\n                var preparedData = (0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getPreparedData)(model, newData, config);\r\n                thisClass.engine.updateFullBlock(model, preparedData);\r\n            }\r\n        });\r\n        document.querySelector('#max-random-value').addEventListener('keydown', function (e) {\r\n            if (e.code === 'Enter' && (config.options.type === '2d' || config.options.type === 'polar')) {\r\n                var max = parseInt(ListenersHelper.getInputValue('#max-random-value')) || 120;\r\n                var copy = ListenersHelper.getCopy(thisClass.data);\r\n                var newData = thisClass.getDataWithRandomValues(copy, max);\r\n                if (config.options.type === '2d') {\r\n                    config.options.axis.valueAxis.domain.start = -1;\r\n                    config.options.axis.valueAxis.domain.end = max;\r\n                }\r\n                var model = (0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getUpdatedModel)(thisClass.config, newData);\r\n                var preparedData = (0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getPreparedData)(model, newData, config);\r\n                thisClass.engine.updateFullBlock(model, preparedData);\r\n            }\r\n        });\r\n    };\r\n    Listeners.prototype.set2DListeners = function () {\r\n        var thisClass = this;\r\n        var config = this.config;\r\n        document.querySelector('#chart-2d-type').addEventListener('change', function () {\r\n            if (config.options.type === '2d') {\r\n                thisClass.change2DChartConfig(this.value);\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('.btn-domain').addEventListener('click', function () {\r\n            if (config.options.type === '2d') {\r\n                var start = ListenersHelper.getInputValue('#domain-start');\r\n                var end = ListenersHelper.getInputValue('#domain-end');\r\n                config.options.axis.valueAxis.domain.start = parseInt(start) || -1;\r\n                config.options.axis.valueAxis.domain.end = parseInt(end) || -1;\r\n                thisClass.engine.updateValueAxis((0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getUpdatedModel)(thisClass.config, thisClass.data), thisClass.data);\r\n            }\r\n        });\r\n        document.querySelector('#domain-start').addEventListener('keydown', function (e) {\r\n            if (e.code === 'Enter') {\r\n                if (config.options.type === '2d') {\r\n                    var start = ListenersHelper.getInputValue('#domain-start');\r\n                    var end = ListenersHelper.getInputValue('#domain-end');\r\n                    config.options.axis.valueAxis.domain.start = parseInt(start) || -1;\r\n                    config.options.axis.valueAxis.domain.end = parseInt(end) || -1;\r\n                    thisClass.engine.updateValueAxis((0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getUpdatedModel)(thisClass.config, thisClass.data), thisClass.data);\r\n                }\r\n            }\r\n        });\r\n        document.querySelector('#domain-end').addEventListener('keydown', function (e) {\r\n            if (e.code === 'Enter') {\r\n                if (config.options.type === '2d') {\r\n                    var start = ListenersHelper.getInputValue('#domain-start');\r\n                    var end = ListenersHelper.getInputValue('#domain-end');\r\n                    config.options.axis.valueAxis.domain.start = parseInt(start) || -1;\r\n                    config.options.axis.valueAxis.domain.end = parseInt(end) || -1;\r\n                    thisClass.engine.updateValueAxis((0,_model_modelOptions__WEBPACK_IMPORTED_MODULE_0__.getUpdatedModel)(thisClass.config, thisClass.data), thisClass.data);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    Listeners.prototype.setAxisListeners = function () {\r\n        var thisClass = this;\r\n        var config = this.config;\r\n        document.querySelector('#chart-orient').addEventListener('change', function () {\r\n            var _this = this;\r\n            if (config.options.type === '2d' || config.options.type === 'interval') {\r\n                config.options.charts.forEach(function (chart) {\r\n                    chart.orientation = _this.value;\r\n                });\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#key-axis-orient').addEventListener('change', function () {\r\n            if (config.options.type === '2d' || config.options.type === 'interval') {\r\n                config.options.axis.keyAxis.position = this.value;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#value-axis-orient').addEventListener('change', function () {\r\n            if (config.options.type === '2d' || config.options.type === 'interval') {\r\n                config.options.axis.valueAxis.position = this.value;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#config-key-grid').addEventListener('change', function () {\r\n            if (config.options.type === '2d' || config.options.type === 'interval') {\r\n                config.options.additionalElements.gridLine.flag.key = this.checked;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#config-value-grid').addEventListener('change', function () {\r\n            if (config.options.type === '2d' || config.options.type === 'interval') {\r\n                config.options.additionalElements.gridLine.flag.value = this.checked;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#config-tick-key').addEventListener('change', function () {\r\n            if (config.options.type === '2d' || config.options.type === 'interval') {\r\n                config.options.axis.keyAxis.ticks.flag = this.checked;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#config-tick-value').addEventListener('change', function () {\r\n            if (config.options.type === '2d' || config.options.type === 'interval') {\r\n                config.options.axis.valueAxis.ticks.flag = this.checked;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n    };\r\n    Listeners.prototype.setPolarListeners = function () {\r\n        var thisClass = this;\r\n        var config = this.config;\r\n        document.querySelector('#inner-radius').addEventListener('input', function () {\r\n            if (config.options.type === 'polar') {\r\n                var innerRadius = ListenersHelper.getInputValue('#inner-radius');\r\n                config.options.charts[0].appearanceOptions.innerRadius = parseInt(innerRadius) || 0;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n        document.querySelector('#pad-angle').addEventListener('input', function () {\r\n            if (config.options.type === 'polar') {\r\n                var padAngle = ListenersHelper.getInputValue('#pad-angle');\r\n                config.options.charts[0].appearanceOptions.padAngle = parseFloat(padAngle) || 0;\r\n                thisClass.updateFull();\r\n            }\r\n        });\r\n    };\r\n    Listeners.prototype.setControlsValues = function () {\r\n        var config = this.config;\r\n        var designerConfig = this.designerConfig;\r\n        ListenersHelper.setInputValue('#notation', config.options.type);\r\n        ListenersHelper.setInputValue('#block-width', config.canvas.size.width);\r\n        ListenersHelper.setInputValue('#block-height', config.canvas.size.height);\r\n        ListenersHelper.setCheckboxValue('#wrapper-border', config.canvas.class.includes('outline'));\r\n        ListenersHelper.setInputValue('#legend', config.options.charts[0].legend.position);\r\n        ListenersHelper.setInputValue('#data-size', config.options.charts[0].data.dataSource.includes('large') ? 'large' : 'normal');\r\n        ListenersHelper.setInputValue('#axis-label-width', designerConfig.canvas.axisLabel.maxSize.main);\r\n        ListenersHelper.setInputValue('#chart-block-margin-top', designerConfig.canvas.chartBlockMargin.top);\r\n        ListenersHelper.setInputValue('#chart-block-margin-bottom', designerConfig.canvas.chartBlockMargin.bottom);\r\n        ListenersHelper.setInputValue('#chart-block-margin-left', designerConfig.canvas.chartBlockMargin.left);\r\n        ListenersHelper.setInputValue('#chart-block-margin-right', designerConfig.canvas.chartBlockMargin.right);\r\n        ListenersHelper.setInputValue('#bar-group-distance', designerConfig.canvas.chartOptions.bar.groupDistance);\r\n        ListenersHelper.setInputValue('#bar-distance', designerConfig.canvas.chartOptions.bar.barDistance);\r\n        ListenersHelper.setInputValue('#min-bar-size', designerConfig.canvas.chartOptions.bar.minBarWidth);\r\n        ListenersHelper.setInputValue('#max-bar-size', designerConfig.canvas.chartOptions.bar.maxBarWidth);\r\n        ListenersHelper.setInputValue('#min-donut-part-size', designerConfig.canvas.chartOptions.donut.minPartSize);\r\n        ListenersHelper.setInputValue('#base-color', designerConfig.chart.style.palette[0].hex());\r\n        ListenersHelper.setCheckboxValue('#designer-key-grid', designerConfig.additionalElements.gridLine.flag.key);\r\n        ListenersHelper.setCheckboxValue('#designer-value-grid', designerConfig.additionalElements.gridLine.flag.value);\r\n        if (config.options.type === '2d') {\r\n            ListenersHelper.setInputValue('#chart-2d-type', config.options.charts[0].type);\r\n            ListenersHelper.setInputValue('#chart-orient', config.options.charts[0].orientation);\r\n            ListenersHelper.setInputValue('#key-axis-orient', config.options.axis.keyAxis.position);\r\n            ListenersHelper.setInputValue('#value-axis-orient', config.options.axis.valueAxis.position);\r\n            ListenersHelper.setCheckboxValue('#config-value-grid', config.options.additionalElements.gridLine.flag.value);\r\n            ListenersHelper.setCheckboxValue('#config-key-grid', config.options.additionalElements.gridLine.flag.key);\r\n            ListenersHelper.setCheckboxValue('#config-tick-key', config.options.axis.keyAxis.ticks.flag);\r\n            ListenersHelper.setCheckboxValue('#config-tick-value', config.options.axis.valueAxis.ticks.flag);\r\n        }\r\n        else if (config.options.type === 'polar') {\r\n            ListenersHelper.setInputValue('#chart-polar-type', config.options.charts[0].type);\r\n            ListenersHelper.setInputValue('#inner-radius', config.options.charts[0].appearanceOptions.innerRadius.toString());\r\n            ListenersHelper.setInputValue('#pad-angle', config.options.charts[0].appearanceOptions.padAngle.toString());\r\n        }\r\n    };\r\n    return Listeners;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Listeners);\r\n\n\n//# sourceURL=webpack://packd3ts/./src/listeners/listeners.ts?");

/***/ }),

/***/ "./src/model/axisModel.ts":
/*!********************************!*\
  !*** ./src/model/axisModel.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AxisModel\": () => /* binding */ AxisModel\n/* harmony export */ });\n/* harmony import */ var _modelOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modelOptions */ \"./src/model/modelOptions.ts\");\n\r\nvar AxisModel = /** @class */ (function () {\r\n    function AxisModel() {\r\n    }\r\n    AxisModel.getLabelSize = function (labelMaxWidth, labelTexts) {\r\n        var labelSize = {\r\n            width: 0,\r\n            height: 0\r\n        };\r\n        var textBlock = document.createElement('span');\r\n        textBlock.style.position = 'absolute';\r\n        textBlock.classList.add(_modelOptions__WEBPACK_IMPORTED_MODULE_0__.CLASSES.dataLabel);\r\n        var maxLabel = '';\r\n        var maxWidth = 0;\r\n        labelTexts.forEach(function (text) {\r\n            if (text.length > maxLabel.length)\r\n                maxLabel = text;\r\n        });\r\n        textBlock.textContent = maxLabel;\r\n        document.body.append(textBlock);\r\n        maxWidth = textBlock.getBoundingClientRect().width;\r\n        labelSize.height = textBlock.getBoundingClientRect().height;\r\n        labelSize.width = maxWidth > labelMaxWidth ? labelMaxWidth : maxWidth;\r\n        textBlock.remove();\r\n        return labelSize;\r\n    };\r\n    AxisModel.getAxisLength = function (chartOrientation, margin, blockSize) {\r\n        if (chartOrientation === 'horizontal') {\r\n            return blockSize.height - margin.top - margin.bottom;\r\n        }\r\n        else {\r\n            return blockSize.width - margin.left - margin.right;\r\n        }\r\n    };\r\n    AxisModel.getAxisOrient = function (axisType, chartOrientation, axisPosition) {\r\n        if (chartOrientation === 'vertical') {\r\n            if (axisPosition === 'start')\r\n                return axisType === _modelOptions__WEBPACK_IMPORTED_MODULE_0__.AxisType.Key ? 'top' : 'left';\r\n            return axisType === _modelOptions__WEBPACK_IMPORTED_MODULE_0__.AxisType.Key ? 'bottom' : 'right';\r\n        }\r\n        else {\r\n            if (axisPosition === 'start')\r\n                return axisType === _modelOptions__WEBPACK_IMPORTED_MODULE_0__.AxisType.Key ? 'left' : 'top';\r\n            return axisType === _modelOptions__WEBPACK_IMPORTED_MODULE_0__.AxisType.Key ? 'right' : 'bottom';\r\n        }\r\n    };\r\n    AxisModel.getAxisTranslateX = function (axisType, chartOrientation, axisPosition, margin, blockWidth) {\r\n        var orient = AxisModel.getAxisOrient(axisType, chartOrientation, axisPosition);\r\n        if (orient === 'top' || orient === 'left')\r\n            return margin.left;\r\n        else if (orient === 'bottom')\r\n            return margin.left;\r\n        return blockWidth - margin.right;\r\n    };\r\n    AxisModel.getAxisTranslateY = function (axisType, chartOrientation, axisPosition, margin, blockHeight) {\r\n        var orient = AxisModel.getAxisOrient(axisType, chartOrientation, axisPosition);\r\n        if (orient === 'top' || orient === 'left')\r\n            return margin.top;\r\n        else if (orient === 'bottom')\r\n            return blockHeight - margin.bottom;\r\n        return margin.top;\r\n    };\r\n    return AxisModel;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://packd3ts/./src/model/axisModel.ts?");

/***/ }),

/***/ "./src/model/chartStyleModel.ts":
/*!**************************************!*\
  !*** ./src/model/chartStyleModel.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ChartStyleModel\": () => /* binding */ ChartStyleModel\n/* harmony export */ });\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/index.js\");\n\r\n\r\nvar ChartStyleModel = /** @class */ (function () {\r\n    function ChartStyleModel() {\r\n    }\r\n    ChartStyleModel.getCssClasses = function (chartType, chartIndex) {\r\n        var cssClasses = [\"chart-\" + chartIndex];\r\n        cssClasses.push(chartType);\r\n        return cssClasses;\r\n    };\r\n    ChartStyleModel.getElementColorPallete = function (palette, notation, elementsAmount, chartIndex) {\r\n        if (chartIndex === void 0) { chartIndex = 0; }\r\n        if (notation === '2d' || notation === 'interval') {\r\n            var generatedPalette = this.generatePalette(palette, elementsAmount);\r\n            return [generatedPalette[chartIndex % palette.length]];\r\n        }\r\n        else {\r\n            var generatedPalette = this.generatePalette(palette, elementsAmount);\r\n            return generatedPalette;\r\n        }\r\n    };\r\n    ChartStyleModel.generatePalette = function (baseColors, colorAmount) {\r\n        var hslColor = d3__WEBPACK_IMPORTED_MODULE_0__.hsl(baseColors[0].toString());\r\n        var step = 360 / colorAmount;\r\n        if (step < 31)\r\n            step = 31;\r\n        var colors = [];\r\n        for (var i = 0; i < colorAmount; i++) {\r\n            colors.push((0,d3__WEBPACK_IMPORTED_MODULE_0__.color)(hslColor));\r\n            hslColor.h += step;\r\n        }\r\n        return colors;\r\n    };\r\n    return ChartStyleModel;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://packd3ts/./src/model/chartStyleModel.ts?");

/***/ }),

/***/ "./src/model/dataManagerModel.ts":
/*!***************************************!*\
  !*** ./src/model/dataManagerModel.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DataManagerModel\": () => /* binding */ DataManagerModel\n/* harmony export */ });\n/* harmony import */ var _axisModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./axisModel */ \"./src/model/axisModel.ts\");\n/* harmony import */ var _modelHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modelHelper */ \"./src/model/modelHelper.ts\");\n\r\n\r\nvar DataManagerModel = /** @class */ (function () {\r\n    function DataManagerModel() {\r\n    }\r\n    DataManagerModel.getPreparedData = function (data, allowableKeys, config) {\r\n        var scopedData = this.getScopedData(data, allowableKeys, config);\r\n        this.setDataType(scopedData, config);\r\n        return scopedData;\r\n    };\r\n    DataManagerModel.getDataScope = function (config, margin, data, designerConfig) {\r\n        if (config.options.type === '2d' || config.options.type === 'interval') {\r\n            var charts_1 = config.options.charts.filter(function (chart) { return chart.type === 'bar' || chart.type === 'gantt'; });\r\n            if (charts_1.length !== 0) {\r\n                var axisLength = _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisLength(charts_1[0].orientation, margin, config.canvas.size);\r\n                var uniqueKeys = _modelHelper__WEBPACK_IMPORTED_MODULE_1__.ModelHelper.getUniqueValues(data[charts_1[0].data.dataSource].map(function (d) { return d[charts_1[0].data.keyField.name]; }));\r\n                var dataLength = uniqueKeys.length;\r\n                var limit = this.getDataLimitByBarSize(charts_1.length, dataLength, axisLength, designerConfig.canvas.chartOptions.bar);\r\n                var allowableKeys = uniqueKeys.slice(0, limit);\r\n                return {\r\n                    allowableKeys: allowableKeys,\r\n                    hidedRecordsAmount: dataLength - allowableKeys.length\r\n                };\r\n            }\r\n        }\r\n        else if (config.options.type === 'polar') {\r\n            var dataset = data[config.options.charts[0].data.dataSource];\r\n            var valueField_1 = config.options.charts[0].data.valueField.name;\r\n            var keyField_1 = config.options.charts[0].data.keyField.name;\r\n            var values = dataset.map(function (dataRow) { return dataRow[valueField_1]; });\r\n            var radius = _modelHelper__WEBPACK_IMPORTED_MODULE_1__.ModelHelper.getDonutRadius(margin, config.canvas.size);\r\n            var sum_1 = _modelHelper__WEBPACK_IMPORTED_MODULE_1__.ModelHelper.getValuesSum(values);\r\n            if (radius <= 0) {\r\n                return {\r\n                    allowableKeys: [],\r\n                    hidedRecordsAmount: dataset.length\r\n                };\r\n            }\r\n            var allowableKeys_1 = [];\r\n            var minAngle_1 = _modelHelper__WEBPACK_IMPORTED_MODULE_1__.ModelHelper.getMinAngleByLength(designerConfig.canvas.chartOptions.donut.minPartSize, radius);\r\n            dataset.forEach(function (dataRow) {\r\n                var angle = _modelHelper__WEBPACK_IMPORTED_MODULE_1__.ModelHelper.getAngleByValue(dataRow[valueField_1], sum_1);\r\n                if (angle > minAngle_1)\r\n                    allowableKeys_1.push(dataRow[keyField_1]);\r\n            });\r\n            return {\r\n                allowableKeys: allowableKeys_1,\r\n                hidedRecordsAmount: dataset.length - allowableKeys_1.length\r\n            };\r\n        }\r\n        return {\r\n            allowableKeys: this.getDataValuesByKeyField(data, config.options.charts[0]),\r\n            hidedRecordsAmount: 0\r\n        };\r\n    };\r\n    DataManagerModel.getDataValuesByKeyField = function (data, chart) {\r\n        return data[chart.data.dataSource].map(function (dataRow) { return dataRow[chart.data.keyField.name]; });\r\n    };\r\n    DataManagerModel.getScopedData = function (data, allowableKeys, config) {\r\n        var _this = this;\r\n        var newData = {};\r\n        config.options.charts.forEach(function (chart) {\r\n            newData[chart.data.dataSource] = _this.getScopedChartData(data[chart.data.dataSource], allowableKeys, chart.data.keyField.name);\r\n        });\r\n        return newData;\r\n    };\r\n    DataManagerModel.getScopedChartData = function (data, allowableKeys, keyFieldName) {\r\n        return data.filter(function (d) { return allowableKeys.includes(d[keyFieldName]); });\r\n    };\r\n    DataManagerModel.setDataType = function (data, config) {\r\n        var _this = this;\r\n        if (config.options.type === 'polar' || config.options.type === '2d') {\r\n            config.options.charts.forEach(function (chart) {\r\n                if (chart.data.keyField.format === 'date') {\r\n                    data[chart.data.dataSource] = _this.getTypedData(data[chart.data.dataSource], chart.data.keyField.name, chart.data.keyField.format);\r\n                }\r\n            });\r\n        }\r\n        else if (config.options.type === 'interval') {\r\n            config.options.charts.forEach(function (chart) {\r\n                if (chart.data.valueField1.format === 'date') {\r\n                    data[chart.data.dataSource] = _this.getTypedData(data[chart.data.dataSource], chart.data.valueField1.name, chart.data.valueField1.format);\r\n                }\r\n                if (chart.data.valueField2.format === 'date') {\r\n                    data[chart.data.dataSource] = _this.getTypedData(data[chart.data.dataSource], chart.data.valueField2.name, chart.data.valueField2.format);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    DataManagerModel.getTypedData = function (data, fieldName, type) {\r\n        if (type === 'date')\r\n            data.forEach(function (d) {\r\n                d[fieldName] = new Date(d[fieldName]);\r\n            });\r\n        return data;\r\n    };\r\n    DataManagerModel.getDataLimitByBarSize = function (chartsAmount, dataLength, axisLength, barOptions) {\r\n        var sumSize = dataLength * (chartsAmount * barOptions.minBarWidth + (chartsAmount - 1) * barOptions.barDistance + barOptions.groupDistance);\r\n        while (dataLength !== 0 && axisLength < sumSize) {\r\n            dataLength--;\r\n            sumSize = dataLength * (chartsAmount * barOptions.minBarWidth + (chartsAmount - 1) * barOptions.barDistance + barOptions.groupDistance);\r\n        }\r\n        return dataLength;\r\n    };\r\n    return DataManagerModel;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://packd3ts/./src/model/dataManagerModel.ts?");

/***/ }),

/***/ "./src/model/gridLineModel.ts":
/*!************************************!*\
  !*** ./src/model/gridLineModel.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GridLineModel\": () => /* binding */ GridLineModel\n/* harmony export */ });\nvar GridLineModel = /** @class */ (function () {\r\n    function GridLineModel() {\r\n    }\r\n    GridLineModel.getGridLineOptions = function (options, designerConfig) {\r\n        var gridKey = false;\r\n        var gridValue = false;\r\n        if (designerConfig.additionalElements.gridLine.flag.value)\r\n            gridValue = options.additionalElements.gridLine.flag.value;\r\n        if (designerConfig.additionalElements.gridLine.flag.key)\r\n            gridKey = options.additionalElements.gridLine.flag.key;\r\n        return {\r\n            flag: {\r\n                value: gridValue,\r\n                key: gridKey\r\n            }\r\n        };\r\n    };\r\n    return GridLineModel;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://packd3ts/./src/model/gridLineModel.ts?");

/***/ }),

/***/ "./src/model/intervalModel.ts":
/*!************************************!*\
  !*** ./src/model/intervalModel.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IntervalModel\": () => /* binding */ IntervalModel\n/* harmony export */ });\n/* harmony import */ var _axisModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./axisModel */ \"./src/model/axisModel.ts\");\n/* harmony import */ var _chartStyleModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chartStyleModel */ \"./src/model/chartStyleModel.ts\");\n/* harmony import */ var _gridLineModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gridLineModel */ \"./src/model/gridLineModel.ts\");\n/* harmony import */ var _modelOptions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modelOptions */ \"./src/model/modelOptions.ts\");\n/* harmony import */ var _scaleModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scaleModel */ \"./src/model/scaleModel.ts\");\nvar __assign = (undefined && undefined.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\n\r\n\r\n\r\n\r\nvar IntervalModel = /** @class */ (function () {\r\n    function IntervalModel() {\r\n    }\r\n    IntervalModel.getOptions = function (config, designerConfig, margin, dataScope, data) {\r\n        var configOptions = config.options;\r\n        return {\r\n            scale: {\r\n                scaleKey: {\r\n                    domain: _scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleModel.getScaleKeyDomain(dataScope.allowableKeys),\r\n                    range: {\r\n                        start: 0,\r\n                        end: _scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleModel.getScaleRangePeek(_scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleType.Key, configOptions.charts[0].orientation, margin, config.canvas.size)\r\n                    },\r\n                    type: _scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleModel.getScaleKeyType(configOptions.charts)\r\n                },\r\n                scaleValue: {\r\n                    domain: _scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleModel.getScaleDateValueDomain(data, configOptions.charts, configOptions.axis.keyAxis.position, dataScope.allowableKeys),\r\n                    range: {\r\n                        start: 0,\r\n                        end: _scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleModel.getScaleRangePeek(_scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleType.Value, configOptions.charts[0].orientation, margin, config.canvas.size)\r\n                    },\r\n                    type: _scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleModel.getScaleValueType(configOptions.charts)\r\n                }\r\n            },\r\n            axis: {\r\n                keyAxis: {\r\n                    orient: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisOrient(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Key, configOptions.charts[0].orientation, configOptions.axis.keyAxis.position),\r\n                    translate: {\r\n                        translateX: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateX(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Key, configOptions.charts[0].orientation, configOptions.axis.keyAxis.position, margin, config.canvas.size.width),\r\n                        translateY: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateY(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Key, configOptions.charts[0].orientation, configOptions.axis.keyAxis.position, margin, config.canvas.size.height)\r\n                    },\r\n                    cssClass: 'key-axis',\r\n                    maxLabelSize: designerConfig.canvas.axisLabel.maxSize.main,\r\n                    ticks: configOptions.axis.keyAxis.ticks\r\n                },\r\n                valueAxis: {\r\n                    orient: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisOrient(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Value, configOptions.charts[0].orientation, configOptions.axis.valueAxis.position),\r\n                    translate: {\r\n                        translateX: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateX(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Value, configOptions.charts[0].orientation, configOptions.axis.valueAxis.position, margin, config.canvas.size.width),\r\n                        translateY: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateY(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Value, configOptions.charts[0].orientation, configOptions.axis.valueAxis.position, margin, config.canvas.size.height)\r\n                    },\r\n                    cssClass: 'value-axis',\r\n                    maxLabelSize: designerConfig.canvas.axisLabel.maxSize.main,\r\n                    ticks: configOptions.axis.valueAxis.ticks\r\n                }\r\n            },\r\n            type: configOptions.type,\r\n            charts: this.getChartsModel(configOptions.charts, designerConfig.chart.style.palette),\r\n            additionalElements: this.getAdditionalElements(configOptions, designerConfig)\r\n        };\r\n    };\r\n    IntervalModel.getAdditionalElements = function (options, designerConfig) {\r\n        return {\r\n            gridLine: _gridLineModel__WEBPACK_IMPORTED_MODULE_2__.GridLineModel.getGridLineOptions(options, designerConfig)\r\n        };\r\n    };\r\n    IntervalModel.getChartsModel = function (charts, chartPalette) {\r\n        var chartsModel = [];\r\n        charts.forEach(function (chart, index) {\r\n            chartsModel.push({\r\n                type: chart.type,\r\n                title: chart.title,\r\n                data: __assign({}, chart.data),\r\n                orient: chart.orientation,\r\n                legend: chart.legend,\r\n                tooltip: chart.tooltip,\r\n                cssClasses: _chartStyleModel__WEBPACK_IMPORTED_MODULE_1__.ChartStyleModel.getCssClasses(chart.type, index),\r\n                elementColors: _chartStyleModel__WEBPACK_IMPORTED_MODULE_1__.ChartStyleModel.getElementColorPallete(chartPalette, 'interval', charts.length, index)\r\n            });\r\n        });\r\n        return chartsModel;\r\n    };\r\n    return IntervalModel;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://packd3ts/./src/model/intervalModel.ts?");

/***/ }),

/***/ "./src/model/legendModel/legendCanvasModel.ts":
/*!****************************************************!*\
  !*** ./src/model/legendModel/legendCanvasModel.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LegendCanvasModel\": () => /* binding */ LegendCanvasModel\n/* harmony export */ });\n/* harmony import */ var _modelOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modelOptions */ \"./src/model/modelOptions.ts\");\n\r\nvar LegendCanvasModel = /** @class */ (function () {\r\n    function LegendCanvasModel() {\r\n    }\r\n    LegendCanvasModel.getLegendHeight = function (texts, blockWidth, marginLeft, marginRight) {\r\n        var legendWrapper = document.createElement('div');\r\n        legendWrapper.style.display = 'flex';\r\n        legendWrapper.style.position = 'absolute';\r\n        legendWrapper.style.width = blockWidth - marginLeft - marginRight + 'px';\r\n        texts.forEach(function (text) {\r\n            var itemWrapper = document.createElement('div');\r\n            var colorBlock = document.createElement('span');\r\n            var textBlock = document.createElement('span');\r\n            itemWrapper.classList.add(_modelOptions__WEBPACK_IMPORTED_MODULE_0__.CLASSES.legendItem);\r\n            colorBlock.classList.add(_modelOptions__WEBPACK_IMPORTED_MODULE_0__.CLASSES.legendColor);\r\n            textBlock.classList.add(_modelOptions__WEBPACK_IMPORTED_MODULE_0__.CLASSES.legendLabel);\r\n            textBlock.textContent = text;\r\n            itemWrapper.append(colorBlock, textBlock);\r\n            legendWrapper.append(itemWrapper);\r\n        });\r\n        document.body.append(legendWrapper);\r\n        var height = legendWrapper.offsetHeight;\r\n        legendWrapper.remove();\r\n        return height;\r\n    };\r\n    LegendCanvasModel.getLegendItemWidth = function (text) {\r\n        var itemWrapper = document.createElement('div');\r\n        var colorBlock = document.createElement('span');\r\n        var textBlock = document.createElement('span');\r\n        itemWrapper.style.display = 'inline-block';\r\n        itemWrapper.classList.add(_modelOptions__WEBPACK_IMPORTED_MODULE_0__.CLASSES.legendItem);\r\n        colorBlock.classList.add(_modelOptions__WEBPACK_IMPORTED_MODULE_0__.CLASSES.legendColor);\r\n        textBlock.classList.add(_modelOptions__WEBPACK_IMPORTED_MODULE_0__.CLASSES.legendLabel);\r\n        textBlock.textContent = text;\r\n        itemWrapper.append(colorBlock, textBlock);\r\n        document.body.append(itemWrapper);\r\n        var sumWidth = itemWrapper.getBoundingClientRect().width\r\n            + parseFloat(window.getComputedStyle(itemWrapper, null).getPropertyValue('margin-left'))\r\n            + parseFloat(window.getComputedStyle(itemWrapper, null).getPropertyValue('margin-right'));\r\n        itemWrapper.remove();\r\n        return sumWidth;\r\n    };\r\n    return LegendCanvasModel;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://packd3ts/./src/model/legendModel/legendCanvasModel.ts?");

/***/ }),

/***/ "./src/model/legendModel/legendModel.ts":
/*!**********************************************!*\
  !*** ./src/model/legendModel/legendModel.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LegendModel\": () => /* binding */ LegendModel\n/* harmony export */ });\n/* harmony import */ var _legendCanvasModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./legendCanvasModel */ \"./src/model/legendModel/legendCanvasModel.ts\");\n\r\nvar LegendModel = /** @class */ (function () {\r\n    function LegendModel() {\r\n    }\r\n    LegendModel.getLegendSize = function (position, texts, legendMaxWidth, blockSize, legendBlockModel) {\r\n        if (position === 'left' || position === 'right') {\r\n            return this.getLegendWidth(texts, legendMaxWidth);\r\n        }\r\n        else {\r\n            var legends = _legendCanvasModel__WEBPACK_IMPORTED_MODULE_0__.LegendCanvasModel.getLegendHeight(texts, blockSize.width, legendBlockModel[position].margin.left, legendBlockModel[position].margin.right);\r\n            return legends;\r\n        }\r\n    };\r\n    LegendModel.getBaseLegendBlockModel = function () {\r\n        var mt = 20, mb = 20, ml = 20, mr = 20;\r\n        return {\r\n            left: {\r\n                size: 0,\r\n                margin: { top: mt, bottom: mb, left: ml, right: mr }\r\n            },\r\n            right: {\r\n                size: 0,\r\n                margin: { top: mt, bottom: mb, left: ml, right: mr }\r\n            },\r\n            bottom: {\r\n                size: 0,\r\n                margin: { top: 0, bottom: 20, left: 20, right: 20 }\r\n            },\r\n            top: {\r\n                size: 0,\r\n                margin: { top: 20, bottom: 0, left: 20, right: 20 }\r\n            }\r\n        };\r\n    };\r\n    LegendModel.getLegendWidth = function (texts, legendMaxWidth) {\r\n        var longestText = '';\r\n        texts.forEach(function (text) {\r\n            if (text.length > longestText.length)\r\n                longestText = text;\r\n        });\r\n        var maxWidth = _legendCanvasModel__WEBPACK_IMPORTED_MODULE_0__.LegendCanvasModel.getLegendItemWidth(longestText + ' '); //Запас на один символ\r\n        return maxWidth > legendMaxWidth ? legendMaxWidth : maxWidth;\r\n    };\r\n    return LegendModel;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://packd3ts/./src/model/legendModel/legendModel.ts?");

/***/ }),

/***/ "./src/model/marginModel.ts":
/*!**********************************!*\
  !*** ./src/model/marginModel.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MarginModel\": () => /* binding */ MarginModel\n/* harmony export */ });\n/* harmony import */ var _axisModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./axisModel */ \"./src/model/axisModel.ts\");\n/* harmony import */ var _dataManagerModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataManagerModel */ \"./src/model/dataManagerModel.ts\");\n/* harmony import */ var _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./legendModel/legendModel */ \"./src/model/legendModel/legendModel.ts\");\n/* harmony import */ var _modelOptions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modelOptions */ \"./src/model/modelOptions.ts\");\nvar __assign = (undefined && undefined.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\n\r\n\r\n\r\nvar AXIS_HORIZONTAL_LABEL_PADDING = 15;\r\nvar AXIS_VERTICAL_LABEL_PADDING = 10;\r\nvar MarginModel = /** @class */ (function () {\r\n    function MarginModel() {\r\n    }\r\n    MarginModel.getMargin = function (designerConfig, config, legendBlockModel, data) {\r\n        var margin = __assign({}, designerConfig.canvas.chartBlockMargin);\r\n        this.recalcMarginWithLegend(margin, config, designerConfig.canvas.legendBlock.maxWidth, legendBlockModel, data);\r\n        if (config.options.type === '2d' || config.options.type === 'interval') {\r\n            this.recalcMarginWithAxisLabelWidth(margin, config.options.charts, designerConfig.canvas.axisLabel.maxSize.main, config.options.axis, data);\r\n        }\r\n        return margin;\r\n    };\r\n    MarginModel.recalcPolarMarginWithScopedData = function (margin, designerConfig, config, legendBlockModel, dataScope) {\r\n        margin.top -= legendBlockModel.top.size;\r\n        margin.bottom -= legendBlockModel.bottom.size;\r\n        margin.left -= legendBlockModel.left.size;\r\n        margin.right -= legendBlockModel.right.size;\r\n        if (config.options.charts[0].legend.position !== 'off' && config.options.type === 'polar') {\r\n            var position = config.options.charts[0].legend.position;\r\n            var legendSize = _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_2__.LegendModel.getLegendSize(position, dataScope.allowableKeys, designerConfig.canvas.legendBlock.maxWidth, config.canvas.size, legendBlockModel);\r\n            margin[position] += legendSize;\r\n            legendBlockModel[config.options.charts[0].legend.position].size = legendSize;\r\n        }\r\n    };\r\n    MarginModel.recalcMargnWitVerticalAxisLabel = function (margin, data, config, designerConfig) {\r\n        if (config.options.type === '2d' || config.options.type === 'interval') {\r\n            if (config.options.charts[0].orientation === 'vertical') {\r\n                var marginOrient = 'top';\r\n                if (config.options.axis.keyAxis.position === 'end')\r\n                    marginOrient = 'bottom';\r\n                var labelTexts = _dataManagerModel__WEBPACK_IMPORTED_MODULE_1__.DataManagerModel.getDataValuesByKeyField(data, config.options.charts[0]);\r\n                var axisLabelSize = _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getLabelSize(designerConfig.canvas.axisLabel.maxSize.main, labelTexts).width;\r\n                margin[marginOrient] += axisLabelSize;\r\n            }\r\n        }\r\n    };\r\n    MarginModel.recalcMarginWithAxisLabelWidth = function (margin, charts, labelsMaxWidth, axis, data) {\r\n        var keyAxisOrient = _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisOrient(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Key, charts[0].orientation, axis.keyAxis.position);\r\n        var valueAxisOrient = _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisOrient(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Value, charts[0].orientation, axis.valueAxis.position);\r\n        if (keyAxisOrient === 'left' || keyAxisOrient === 'right') {\r\n            var labelTexts = _dataManagerModel__WEBPACK_IMPORTED_MODULE_1__.DataManagerModel.getDataValuesByKeyField(data, charts[0]);\r\n            var axisLabelSize = _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getLabelSize(labelsMaxWidth, labelTexts);\r\n            margin[keyAxisOrient] += axisLabelSize.width + AXIS_VERTICAL_LABEL_PADDING;\r\n            margin[valueAxisOrient] += axisLabelSize.height + AXIS_HORIZONTAL_LABEL_PADDING;\r\n        }\r\n        else {\r\n            var labelTexts = ['0000'];\r\n            var axisLabelSize = _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getLabelSize(labelsMaxWidth, labelTexts);\r\n            margin[valueAxisOrient] += axisLabelSize.width + AXIS_VERTICAL_LABEL_PADDING;\r\n            margin[keyAxisOrient] += axisLabelSize.height + AXIS_HORIZONTAL_LABEL_PADDING;\r\n        }\r\n    };\r\n    MarginModel.recalcMarginWithLegend = function (margin, config, legendMaxWidth, legendBlockModel, data) {\r\n        var _this = this;\r\n        var positions = ['left', 'right', 'top', 'bottom'];\r\n        positions.forEach(function (position) {\r\n            var legendSize = 0;\r\n            var charts = _this.getChartsWithLegend(config.options, position);\r\n            if (charts.length !== 0) {\r\n                var legendItemsContent = _this.getLegendItemsContent(charts, config.options, data);\r\n                legendSize = _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_2__.LegendModel.getLegendSize(position, legendItemsContent, legendMaxWidth, config.canvas.size, legendBlockModel);\r\n            }\r\n            margin[position] += legendSize;\r\n            if (legendSize !== 0)\r\n                _this.appendGlobalMarginByLegendMargin(margin, position, legendBlockModel);\r\n            legendBlockModel[position].size = legendSize;\r\n        });\r\n    };\r\n    MarginModel.getChartsWithLegend = function (options, legendPosition) {\r\n        return options.charts.filter(function (chart) { return chart.legend.position === legendPosition; });\r\n    };\r\n    MarginModel.getLegendItemsContent = function (charts, options, data) {\r\n        if (options.type === '2d' || options.type === 'interval') {\r\n            return charts.map(function (chart) { return chart.title; });\r\n        }\r\n        else {\r\n            return charts.map(function (chart) { return _dataManagerModel__WEBPACK_IMPORTED_MODULE_1__.DataManagerModel.getDataValuesByKeyField(data, chart); })[0];\r\n        }\r\n    };\r\n    MarginModel.appendGlobalMarginByLegendMargin = function (margin, position, legendBlockModel) {\r\n        if (position === 'left' || position === 'right')\r\n            margin[position] += legendBlockModel[position].margin.left + legendBlockModel[position].margin.right;\r\n        else\r\n            margin[position] += legendBlockModel[position].margin.top + legendBlockModel[position].margin.bottom;\r\n    };\r\n    return MarginModel;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://packd3ts/./src/model/marginModel.ts?");

/***/ }),

/***/ "./src/model/modelHelper.ts":
/*!**********************************!*\
  !*** ./src/model/modelHelper.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ModelHelper\": () => /* binding */ ModelHelper\n/* harmony export */ });\nvar ModelHelper = /** @class */ (function () {\r\n    function ModelHelper() {\r\n    }\r\n    ModelHelper.getValuesSum = function (values) {\r\n        var sum = 0;\r\n        for (var i = 0; i < values.length; i++) {\r\n            sum += values[i];\r\n        }\r\n        return sum;\r\n    };\r\n    ModelHelper.getMaxNumberValue = function (values) {\r\n        var max = values[0];\r\n        for (var i = 0; i < values.length; i++) {\r\n            if (max < values[i])\r\n                max = values[i];\r\n        }\r\n        return max;\r\n    };\r\n    ModelHelper.getMinAndMaxOfIntervalData = function (data, charts) {\r\n        var min = data[charts[0].data.dataSource][0][charts[0].data.valueField1.name];\r\n        var max = data[charts[0].data.dataSource][0][charts[0].data.valueField1.name];\r\n        charts.forEach(function (chart) {\r\n            var chartData = data[chart.data.dataSource];\r\n            var value1 = chart.data.valueField1.name;\r\n            var value2 = chart.data.valueField2.name;\r\n            chartData.forEach(function (dataRow) {\r\n                if (dataRow[value1] > max)\r\n                    max = dataRow[value1];\r\n                if (dataRow[value1] < min)\r\n                    min = dataRow[value1];\r\n                if (dataRow[value2] > max)\r\n                    max = dataRow[value2];\r\n                if (dataRow[value2] < min)\r\n                    min = dataRow[value2];\r\n            });\r\n        });\r\n        return [min, max];\r\n    };\r\n    ModelHelper.getDonutRadius = function (margin, blockSize) {\r\n        return Math.min(blockSize.height - margin.top - margin.bottom, blockSize.width - margin.left - margin.right) / 2;\r\n    };\r\n    ModelHelper.getAngleByValue = function (value, valuesSum) {\r\n        return value / valuesSum * 360;\r\n    };\r\n    ModelHelper.getMinAngleByLength = function (minLength, radius) {\r\n        return minLength * 360 / (2 * Math.PI * radius);\r\n    };\r\n    ModelHelper.getUniqueValues = function (values) {\r\n        var uniqueValues = values.filter(function (keyValue, index, self) { return self.indexOf(keyValue) === index; });\r\n        return uniqueValues;\r\n    };\r\n    return ModelHelper;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://packd3ts/./src/model/modelHelper.ts?");

/***/ }),

/***/ "./src/model/modelOptions.ts":
/*!***********************************!*\
  !*** ./src/model/modelOptions.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AxisType\": () => /* binding */ AxisType,\n/* harmony export */   \"CLASSES\": () => /* binding */ CLASSES,\n/* harmony export */   \"assembleModel\": () => /* binding */ assembleModel,\n/* harmony export */   \"getPreparedData\": () => /* binding */ getPreparedData,\n/* harmony export */   \"getUpdatedModel\": () => /* binding */ getUpdatedModel\n/* harmony export */ });\n/* harmony import */ var _marginModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./marginModel */ \"./src/model/marginModel.ts\");\n/* harmony import */ var _twoDimensionalModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./twoDimensionalModel */ \"./src/model/twoDimensionalModel.ts\");\n/* harmony import */ var _polarModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./polarModel */ \"./src/model/polarModel.ts\");\n/* harmony import */ var _style_main_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../style/main.css */ \"./src/style/main.css\");\n/* harmony import */ var _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../designer/designerConfigOptions */ \"./src/designer/designerConfigOptions.ts\");\n/* harmony import */ var _dataManagerModel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dataManagerModel */ \"./src/model/dataManagerModel.ts\");\n/* harmony import */ var _intervalModel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./intervalModel */ \"./src/model/intervalModel.ts\");\n/* harmony import */ var _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./legendModel/legendModel */ \"./src/model/legendModel/legendModel.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar AxisType;\r\n(function (AxisType) {\r\n    AxisType[AxisType[\"Key\"] = 0] = \"Key\";\r\n    AxisType[AxisType[\"Value\"] = 1] = \"Value\";\r\n})(AxisType || (AxisType = {}));\r\nvar CLASSES = {\r\n    dataLabel: 'data-label',\r\n    legendLabel: 'legend-label',\r\n    legendColor: 'legend-circle',\r\n    legendItem: 'legend-item',\r\n};\r\nfunction getBlockCanvas(config) {\r\n    return {\r\n        size: {\r\n            width: config.canvas.size.width,\r\n            height: config.canvas.size.height\r\n        },\r\n        cssClass: config.canvas.class\r\n    };\r\n}\r\nfunction getChartBlock(margin) {\r\n    return {\r\n        margin: margin\r\n    };\r\n}\r\nfunction getOptions(config, designerConfig, margin, dataScope, data) {\r\n    if (config.options.type === '2d') {\r\n        return _twoDimensionalModel__WEBPACK_IMPORTED_MODULE_1__.TwoDimensionalModel.getOptions(config, designerConfig, margin, dataScope, data);\r\n    }\r\n    else if (config.options.type === 'polar') {\r\n        return _polarModel__WEBPACK_IMPORTED_MODULE_2__.PolarModel.getOptions(config.options, designerConfig.chart.style.palette, data, dataScope);\r\n    }\r\n    else if (config.options.type === 'interval') {\r\n        return _intervalModel__WEBPACK_IMPORTED_MODULE_6__.IntervalModel.getOptions(config, designerConfig, margin, dataScope, data);\r\n    }\r\n}\r\nfunction getDataSettings(dataScope) {\r\n    return {\r\n        scope: dataScope\r\n    };\r\n}\r\nfunction getChartSettings(designerConfig) {\r\n    return {\r\n        bar: {\r\n            groupDistance: designerConfig.canvas.chartOptions.bar.groupDistance,\r\n            barDistance: designerConfig.canvas.chartOptions.bar.barDistance,\r\n            barMaxSize: designerConfig.canvas.chartOptions.bar.maxBarWidth\r\n        }\r\n    };\r\n}\r\nfunction getDataFormat(designerConfig) {\r\n    return {\r\n        formatters: designerConfig.dataFormat.formatters\r\n    };\r\n}\r\nfunction assembleModel(config, data) {\r\n    var legendBlock = _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_7__.LegendModel.getBaseLegendBlockModel();\r\n    var margin = _marginModel__WEBPACK_IMPORTED_MODULE_0__.MarginModel.getMargin(_designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_4__.default, config, legendBlock, data);\r\n    var dataScope = _dataManagerModel__WEBPACK_IMPORTED_MODULE_5__.DataManagerModel.getDataScope(config, margin, data, _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_4__.default);\r\n    var preparedData = _dataManagerModel__WEBPACK_IMPORTED_MODULE_5__.DataManagerModel.getPreparedData(data, dataScope.allowableKeys, config);\r\n    if (config.options.type === 'polar')\r\n        _marginModel__WEBPACK_IMPORTED_MODULE_0__.MarginModel.recalcPolarMarginWithScopedData(margin, _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_4__.default, config, legendBlock, dataScope);\r\n    // MarginModel.recalcMargnWitVerticalAxisLabel(margin, data, config, designerConfig);\r\n    var blockCanvas = getBlockCanvas(config);\r\n    var chartBlock = getChartBlock(margin);\r\n    var options = getOptions(config, _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_4__.default, margin, dataScope, preparedData);\r\n    var dataSettings = getDataSettings(dataScope);\r\n    var chartSettings = getChartSettings(_designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_4__.default);\r\n    var dataFormat = getDataFormat(_designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_4__.default);\r\n    return {\r\n        blockCanvas: blockCanvas,\r\n        chartBlock: chartBlock,\r\n        legendBlock: legendBlock,\r\n        options: options,\r\n        dataSettings: dataSettings,\r\n        chartSettings: chartSettings,\r\n        dataFormat: dataFormat\r\n    };\r\n}\r\nfunction getPreparedData(model, data, config) {\r\n    var preparedData = _dataManagerModel__WEBPACK_IMPORTED_MODULE_5__.DataManagerModel.getPreparedData(data, model.dataSettings.scope.allowableKeys, config);\r\n    return preparedData;\r\n}\r\nfunction getUpdatedModel(config, data) {\r\n    return assembleModel(config, data);\r\n}\r\n\n\n//# sourceURL=webpack://packd3ts/./src/model/modelOptions.ts?");

/***/ }),

/***/ "./src/model/polarModel.ts":
/*!*********************************!*\
  !*** ./src/model/polarModel.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PolarModel\": () => /* binding */ PolarModel\n/* harmony export */ });\n/* harmony import */ var _chartStyleModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chartStyleModel */ \"./src/model/chartStyleModel.ts\");\nvar __assign = (undefined && undefined.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nvar PolarModel = /** @class */ (function () {\r\n    function PolarModel() {\r\n    }\r\n    PolarModel.getChartsModel = function (charts, chartPalette, data, dataScope) {\r\n        var chartsModel = [];\r\n        charts.forEach(function (chart, index) {\r\n            chartsModel.push({\r\n                type: chart.type,\r\n                title: chart.title,\r\n                data: __assign({}, chart.data),\r\n                appearanceOptions: __assign({}, chart.appearanceOptions),\r\n                legend: chart.legend,\r\n                tooltip: chart.tooltip,\r\n                cssClasses: _chartStyleModel__WEBPACK_IMPORTED_MODULE_0__.ChartStyleModel.getCssClasses(chart.type, index),\r\n                elementColors: _chartStyleModel__WEBPACK_IMPORTED_MODULE_0__.ChartStyleModel.getElementColorPallete(chartPalette, 'polar', data[chart.data.dataSource].length)\r\n            });\r\n        });\r\n        return chartsModel;\r\n    };\r\n    PolarModel.getOptions = function (configOptions, chartPalette, data, dataScope) {\r\n        return {\r\n            type: configOptions.type,\r\n            charts: this.getChartsModel(configOptions.charts, chartPalette, data, dataScope),\r\n        };\r\n    };\r\n    return PolarModel;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://packd3ts/./src/model/polarModel.ts?");

/***/ }),

/***/ "./src/model/scaleModel.ts":
/*!*********************************!*\
  !*** ./src/model/scaleModel.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ScaleType\": () => /* binding */ ScaleType,\n/* harmony export */   \"ScaleModel\": () => /* binding */ ScaleModel\n/* harmony export */ });\n/* harmony import */ var _modelHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modelHelper */ \"./src/model/modelHelper.ts\");\n\r\nvar ScaleType;\r\n(function (ScaleType) {\r\n    ScaleType[ScaleType[\"Key\"] = 0] = \"Key\";\r\n    ScaleType[ScaleType[\"Value\"] = 1] = \"Value\";\r\n})(ScaleType || (ScaleType = {}));\r\nvar ScaleModel = /** @class */ (function () {\r\n    function ScaleModel() {\r\n    }\r\n    ScaleModel.getScaleRangePeek = function (scaleType, chartOrientation, margin, blockSize) {\r\n        if (chartOrientation === 'vertical')\r\n            return scaleType === ScaleType.Key\r\n                ? blockSize.width - margin.left - margin.right\r\n                : blockSize.height - margin.top - margin.bottom;\r\n        return scaleType === ScaleType.Key\r\n            ? blockSize.height - margin.top - margin.bottom\r\n            : blockSize.width - margin.left - margin.right;\r\n    };\r\n    ScaleModel.getScaleKeyDomain = function (allowableKeys) {\r\n        return allowableKeys;\r\n    };\r\n    ScaleModel.getScaleDateValueDomain = function (data, charts, keyAxisPosition, allowableKeys) {\r\n        var minMax = _modelHelper__WEBPACK_IMPORTED_MODULE_0__.ModelHelper.getMinAndMaxOfIntervalData(data, charts);\r\n        var domainPeekMin = minMax[0];\r\n        var domainPeekMax = minMax[1];\r\n        if (keyAxisPosition === 'start')\r\n            return [domainPeekMin, domainPeekMax];\r\n        return [domainPeekMax, domainPeekMin];\r\n    };\r\n    ScaleModel.getScaleLinearValueDomain = function (configDomain, data, charts, keyAxisPosition) {\r\n        var domainPeekMin;\r\n        var domainPeekMax;\r\n        if (configDomain.start === -1)\r\n            domainPeekMin = 0;\r\n        else\r\n            domainPeekMin = configDomain.start;\r\n        if (configDomain.end === -1)\r\n            domainPeekMax = this.getScopedScalesMaxValue(charts, data);\r\n        else\r\n            domainPeekMax = configDomain.end;\r\n        if (keyAxisPosition === 'start')\r\n            return [domainPeekMin, domainPeekMax];\r\n        return [domainPeekMax, domainPeekMin];\r\n    };\r\n    ScaleModel.getScaleKeyType = function (charts) {\r\n        if (charts.findIndex(function (chart) { return chart.type === 'bar' || chart.type === 'gantt'; }) === -1)\r\n            return 'point';\r\n        return 'band';\r\n    };\r\n    ScaleModel.getScaleValueType = function (charts) {\r\n        if (charts.findIndex(function (chart) { return chart.type === 'gantt'; }) !== -1)\r\n            return 'datetime';\r\n        return 'linear';\r\n    };\r\n    ScaleModel.getScopedScalesMaxValue = function (charts, data) {\r\n        var _this = this;\r\n        var max = 0;\r\n        charts.forEach(function (chart) {\r\n            var chartMaxValue = _this.getChartMaxValue(chart, data[chart.data.dataSource]);\r\n            if (max < chartMaxValue)\r\n                max = chartMaxValue;\r\n        });\r\n        return max;\r\n    };\r\n    ScaleModel.getChartMaxValue = function (chart, data) {\r\n        return _modelHelper__WEBPACK_IMPORTED_MODULE_0__.ModelHelper.getMaxNumberValue(data.map(function (d) { return d[chart.data.valueField.name]; }));\r\n    };\r\n    return ScaleModel;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://packd3ts/./src/model/scaleModel.ts?");

/***/ }),

/***/ "./src/model/twoDimensionalModel.ts":
/*!******************************************!*\
  !*** ./src/model/twoDimensionalModel.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TwoDimensionalModel\": () => /* binding */ TwoDimensionalModel\n/* harmony export */ });\n/* harmony import */ var _axisModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./axisModel */ \"./src/model/axisModel.ts\");\n/* harmony import */ var _chartStyleModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chartStyleModel */ \"./src/model/chartStyleModel.ts\");\n/* harmony import */ var _gridLineModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gridLineModel */ \"./src/model/gridLineModel.ts\");\n/* harmony import */ var _modelOptions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modelOptions */ \"./src/model/modelOptions.ts\");\n/* harmony import */ var _scaleModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scaleModel */ \"./src/model/scaleModel.ts\");\nvar __assign = (undefined && undefined.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\n\r\n\r\n\r\n\r\nvar TwoDimensionalModel = /** @class */ (function () {\r\n    function TwoDimensionalModel() {\r\n    }\r\n    TwoDimensionalModel.getOptions = function (config, designerConfig, margin, dataScope, data) {\r\n        var configOptions = config.options;\r\n        return {\r\n            scale: {\r\n                scaleKey: {\r\n                    domain: _scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleModel.getScaleKeyDomain(dataScope.allowableKeys),\r\n                    range: {\r\n                        start: 0,\r\n                        end: _scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleModel.getScaleRangePeek(_scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleType.Key, configOptions.charts[0].orientation, margin, config.canvas.size)\r\n                    },\r\n                    type: _scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleModel.getScaleKeyType(configOptions.charts)\r\n                },\r\n                scaleValue: {\r\n                    domain: _scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleModel.getScaleLinearValueDomain(configOptions.axis.valueAxis.domain, data, configOptions.charts, configOptions.axis.keyAxis.position),\r\n                    range: {\r\n                        start: 0,\r\n                        end: _scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleModel.getScaleRangePeek(_scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleType.Value, configOptions.charts[0].orientation, margin, config.canvas.size)\r\n                    },\r\n                    type: _scaleModel__WEBPACK_IMPORTED_MODULE_4__.ScaleModel.getScaleValueType(configOptions.charts)\r\n                }\r\n            },\r\n            axis: {\r\n                keyAxis: {\r\n                    orient: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisOrient(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Key, configOptions.charts[0].orientation, configOptions.axis.keyAxis.position),\r\n                    translate: {\r\n                        translateX: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateX(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Key, configOptions.charts[0].orientation, configOptions.axis.keyAxis.position, margin, config.canvas.size.width),\r\n                        translateY: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateY(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Key, configOptions.charts[0].orientation, configOptions.axis.keyAxis.position, margin, config.canvas.size.height)\r\n                    },\r\n                    cssClass: 'key-axis',\r\n                    maxLabelSize: designerConfig.canvas.axisLabel.maxSize.main,\r\n                    ticks: configOptions.axis.keyAxis.ticks\r\n                },\r\n                valueAxis: {\r\n                    orient: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisOrient(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Value, configOptions.charts[0].orientation, configOptions.axis.valueAxis.position),\r\n                    translate: {\r\n                        translateX: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateX(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Value, configOptions.charts[0].orientation, configOptions.axis.valueAxis.position, margin, config.canvas.size.width),\r\n                        translateY: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateY(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Value, configOptions.charts[0].orientation, configOptions.axis.valueAxis.position, margin, config.canvas.size.height)\r\n                    },\r\n                    cssClass: 'value-axis',\r\n                    maxLabelSize: designerConfig.canvas.axisLabel.maxSize.main,\r\n                    ticks: configOptions.axis.valueAxis.ticks\r\n                }\r\n            },\r\n            type: configOptions.type,\r\n            charts: this.getChartsModel(configOptions.charts, designerConfig.chart.style.palette),\r\n            additionalElements: this.getAdditionalElements(configOptions, designerConfig)\r\n        };\r\n    };\r\n    TwoDimensionalModel.getChartsModel = function (charts, chartPalette) {\r\n        var chartsModel = [];\r\n        charts.forEach(function (chart, index) {\r\n            chartsModel.push({\r\n                type: chart.type,\r\n                title: chart.title,\r\n                data: __assign({}, chart.data),\r\n                orient: chart.orientation,\r\n                legend: chart.legend,\r\n                tooltip: chart.tooltip,\r\n                cssClasses: _chartStyleModel__WEBPACK_IMPORTED_MODULE_1__.ChartStyleModel.getCssClasses(chart.type, index),\r\n                elementColors: _chartStyleModel__WEBPACK_IMPORTED_MODULE_1__.ChartStyleModel.getElementColorPallete(chartPalette, '2d', charts.length, index)\r\n            });\r\n        });\r\n        return chartsModel;\r\n    };\r\n    TwoDimensionalModel.getAdditionalElements = function (options, designerConfig) {\r\n        return {\r\n            gridLine: _gridLineModel__WEBPACK_IMPORTED_MODULE_2__.GridLineModel.getGridLineOptions(options, designerConfig)\r\n        };\r\n    };\r\n    return TwoDimensionalModel;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://packd3ts/./src/model/twoDimensionalModel.ts?");

/***/ })

}]);