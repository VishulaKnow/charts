/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!**************************!*\
  !*** ./src/listeners.ts ***!
  \**************************/
eval("// console.log('asd');\r\n// import engine from './engine';\r\n// import config from './config/configOptions';\r\n// import { getUpdatedModel } from './model/modelOptions';\r\n// const data = require('./assets/dataSet.json');\r\n// function getInputValue(selector: string): string {\r\n//     return (document.querySelector(selector) as HTMLInputElement).value;\r\n// }\r\n// function setInputValue(selector: string, value: string): void {\r\n//     (document.querySelector(selector) as HTMLInputElement).value = value;\r\n// }\r\n// function showControlsForNotation(notationType: '2d' | 'polar'): void {\r\n//     if(notationType === '2d') {\r\n//         (document.querySelector('.controls-polar') as HTMLElement).style.display = 'none';\r\n//         (document.querySelector('.controls-2d') as HTMLElement).style.display = 'flex';\r\n//     }\r\n//     else {\r\n//         (document.querySelector('.controls-2d') as HTMLElement).style.display = 'none';\r\n//         (document.querySelector('.controls-polar') as HTMLElement).style.display = 'flex';\r\n//     }\r\n// }\r\n// function changeConfigOptions(notationType: '2d' | 'polar'): void {\r\n//     const options: any = {\r\n//         type: notationType,\r\n//         charts: [\r\n//             {\r\n//                 title: config.options.charts[0].title,\r\n//                 legend: config.options.charts[0].legend,\r\n//                 style: config.options.charts[0].style,\r\n//                 data: config.options.charts[0].data\r\n//             }\r\n//         ]\r\n//     }\r\n//     if(notationType === '2d') {\r\n//         options.axis = {\r\n//             keyAxis: {\r\n//                 domain: {\r\n//                     start: -1,\r\n//                     end: -1\r\n//                 },\r\n//                 position: 'end'\r\n//             },\r\n//             valueAxis: {\r\n//                 domain: {\r\n//                     start: 0,\r\n//                     end: 150\r\n//                 },\r\n//                 position: 'start'\r\n//             }\r\n//         }\r\n//         options.charts[0].type = getInputValue('#chart-2d-type');\r\n//         options.charts[0].orientation = getInputValue('#chart-orient');\r\n//     } else {\r\n//         options.charts[0].type = getInputValue('#chart-polar-type');\r\n//         options.charts[0].appearanceOptions = {\r\n//             innerRadius: getInputValue('#inner-radius') || 30,\r\n//             padAngle: getInputValue('#pad-angle') || 0.005\r\n//         }\r\n//     }\r\n//     config.options = options;\r\n//     engine.updateFullBlock(getUpdatedModel(), data);\r\n//     setControlsValues();\r\n// }\r\n// function set2DListeners(): void {\r\n//     document.querySelector('#chart-orient').addEventListener('change', function() {\r\n//         if(config.options.type === '2d') {\r\n//             config.options.charts[0].orientation = this.value;\r\n//             engine.updateFullBlock(getUpdatedModel(), data);\r\n//         }\r\n//     });\r\n//     document.querySelector('#chart-2d-type').addEventListener('change', function() {\r\n//         if(config.options.type === '2d') {\r\n//             const chartFill = getInputValue('#chart-fill');\r\n//             const chartStroke = getInputValue('#chart-stroke');\r\n//             config.options.charts[0].type = this.value as 'bar' | 'line' | 'area';\r\n//             if(chartFill)\r\n//                 config.options.charts[0].style['fill'] = chartFill;\r\n//             if(chartStroke)\r\n//                 config.options.charts[0].style['stroke'] = chartStroke;\r\n//             if(config.options.charts[0].type === 'line' && config.options.charts[0].style['fill'] !== 'none') {\r\n//                 config.options.charts[0].style['fill'] = 'none';\r\n//                 if(config.options.charts[0].style['stroke'] === 'none')\r\n//                     config.options.charts[0].style['stroke'] = 'steelblue';\r\n//             }\r\n//             engine.updateFullBlock(getUpdatedModel(), data);\r\n//         }\r\n//     });\r\n//     document.querySelector('#key-axis-orient').addEventListener('change', function() {\r\n//         if(config.options.type === '2d') {\r\n//             config.options.axis.keyAxis.position = this.value;\r\n//             engine.updateFullBlock(getUpdatedModel(), data);\r\n//         }\r\n//     });\r\n//     document.querySelector('#value-axis-orient').addEventListener('change', function() {\r\n//         if(config.options.type === '2d') {\r\n//             config.options.axis.valueAxis.position = this.value;\r\n//             engine.updateFullBlock(getUpdatedModel(), data);\r\n//         }\r\n//     });\r\n//     document.querySelector('.btn-domain').addEventListener('click', function() {\r\n//         if(config.options.type === '2d') {\r\n//             const start = getInputValue('#domain-start');\r\n//             const end = getInputValue('#domain-end');\r\n//             config.options.axis.valueAxis.domain.start = parseInt(start) || -1;\r\n//             config.options.axis.valueAxis.domain.end = parseInt(end) || -1;\r\n//             engine.updateValueAxis(getUpdatedModel(), data);\r\n//         }\r\n//     });\r\n// }\r\n// function setPolarListeners(): void {\r\n//     document.querySelector('.btn-inner-radius').addEventListener('click', function() {\r\n//         if(config.options.type === 'polar') {\r\n//             const innerRadius = getInputValue('#inner-radius');\r\n//             config.options.charts[0].appearanceOptions.innerRadius = parseInt(innerRadius) || 0;\r\n//             engine.updateFullBlock(getUpdatedModel(), data);\r\n//         }\r\n//     });\r\n//     document.querySelector('.btn-pad-angle').addEventListener('click', function() {\r\n//         if(config.options.type === 'polar') {\r\n//             const padAngle = getInputValue('#pad-angle');\r\n//             config.options.charts[0].appearanceOptions.padAngle = parseFloat(padAngle) || 0;\r\n//             engine.updateFullBlock(getUpdatedModel(), data);\r\n//         }\r\n//     });\r\n// }\r\n// function setStyleListeners(): void {\r\n//     document.querySelector('.btn-chart-style').addEventListener('click', function() {\r\n//         const chartFill = getInputValue('#chart-fill') || 'none';\r\n//         const chartStroke = getInputValue('#chart-stroke') || 'none';\r\n//         config.options.charts[0].style['fill'] = chartFill;\r\n//         config.options.charts[0].style['stroke'] = chartStroke;\r\n//         engine.updateFullBlock(getUpdatedModel(), data);\r\n//     });\r\n// }\r\n// function setControlsValues(): void {\r\n//     setInputValue('#notation', config.options.type);\r\n//     if(config.options.type === '2d') {\r\n//         setInputValue('#chart-2d-type', config.options.charts[0].type);\r\n//         setInputValue('#chart-orient', config.options.charts[0].orientation);\r\n//         setInputValue('#key-axis-orient', config.options.axis.keyAxis.position);\r\n//         setInputValue('#value-axis-orient', config.options.axis.valueAxis.position);\r\n//     } else {\r\n//         setInputValue('#chart-polar-type', config.options.charts[0].type);\r\n//         setInputValue('#inner-radius', config.options.charts[0].appearanceOptions.innerRadius.toString());\r\n//         setInputValue('#pad-angle', config.options.charts[0].appearanceOptions.padAngle.toString());\r\n//     }\r\n// }\r\n// document.querySelector('#notation').addEventListener('change', function() {\r\n//     showControlsForNotation(this.value);\r\n//     changeConfigOptions(this.value);\r\n//     setControlsValues();\r\n// });\r\n// setControlsValues();\r\n// showControlsForNotation(config.options.type);\r\n// set2DListeners();\r\n// setPolarListeners();\r\n// setStyleListeners();\r\n\n\n//# sourceURL=webpack://packd3ts/./src/listeners.ts?");
/******/ })()
;