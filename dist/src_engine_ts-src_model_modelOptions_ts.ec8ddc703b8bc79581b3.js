/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkpackd3ts"] = self["webpackChunkpackd3ts"] || []).push([["src_engine_ts-src_model_modelOptions_ts"],{

/***/ "./src/config/configOptions.ts":
/*!*************************************!*\
  !*** ./src/config/configOptions.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\nvar config = {\r\n    canvas: {\r\n        class: 'svg-chart border',\r\n        size: {\r\n            width: 1000,\r\n            height: 500\r\n        }\r\n    },\r\n    options: {\r\n        type: '2d',\r\n        axis: {\r\n            keyAxis: {\r\n                domain: {\r\n                    start: -1,\r\n                    end: -1\r\n                },\r\n                position: 'end'\r\n            },\r\n            valueAxis: {\r\n                domain: {\r\n                    start: -1,\r\n                    end: -1\r\n                },\r\n                position: 'start'\r\n            }\r\n        },\r\n        charts: [\r\n            {\r\n                title: 'Car prices',\r\n                type: 'line',\r\n                legend: {\r\n                    position: 'off'\r\n                },\r\n                data: {\r\n                    dataSource: 'dataSet_large',\r\n                    keyField: 'brand',\r\n                    valueField: 'price'\r\n                },\r\n                tooltip: {\r\n                    data: {\r\n                        fields: ['count', 'price', 'brand']\r\n                    }\r\n                },\r\n                orientation: 'vertical'\r\n            },\r\n            {\r\n                title: 'Car prices',\r\n                type: 'line',\r\n                legend: {\r\n                    position: 'off'\r\n                },\r\n                data: {\r\n                    dataSource: 'dataSet_large2',\r\n                    keyField: 'brand',\r\n                    valueField: 'price'\r\n                },\r\n                tooltip: {\r\n                    data: {\r\n                        fields: ['count', 'price', 'brand']\r\n                    }\r\n                },\r\n                orientation: 'vertical'\r\n            }\r\n        ]\r\n    }\r\n    // options: {\r\n    //     type: 'polar',\r\n    //     charts: [\r\n    //         {\r\n    //             type: 'donut',\r\n    //             title: 'Car prices',\r\n    //             legend: {\r\n    //                 position: 'bottom'\r\n    //             },\r\n    //             data: {\r\n    //                 dataSource: 'dataSet',\r\n    //                 keyField: 'brand',\r\n    //                 valueField: 'price'\r\n    //             },\r\n    //             tooltip: {\r\n    //                 data: {\r\n    //                     fields: ['count', 'price', 'brand']\r\n    //                 }\r\n    //             },\r\n    //             appearanceOptions: {\r\n    //                 innerRadius: 10,\r\n    //                 padAngle: 0.005\r\n    //             }\r\n    //         }\r\n    //     ]\r\n    // }\r\n};\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (config);\r\n\n\n//# sourceURL=webpack://packd3ts/./src/config/configOptions.ts?");

/***/ }),

/***/ "./src/designer/designerConfigOptions.ts":
/*!***********************************************!*\
  !*** ./src/designer/designerConfigOptions.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/index.js\");\n\r\nvar designerConfig = {\r\n    canvas: {\r\n        axisLabel: {\r\n            maxSize: {\r\n                orthogonal: 20,\r\n                main: 50\r\n            }\r\n        },\r\n        chartBlockMargin: {\r\n            top: 20,\r\n            bottom: 50,\r\n            left: 20,\r\n            right: 10\r\n        },\r\n        legendBlock: {\r\n            maxWidth: 200\r\n        },\r\n        chartOptions: {\r\n            bar: {\r\n                barDistance: 10,\r\n                minBarWidth: 50\r\n            }\r\n        }\r\n    },\r\n    chart: {\r\n        style: {\r\n            palette: [(0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('steelblue'), (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('lightgreen'), (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#92a8d1'), (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#034f84'), (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#deeaee'), (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#b1cbbb'), (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#d5f4e6'), (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#80ced6'), (0,d3__WEBPACK_IMPORTED_MODULE_0__.color)('#9fa9a3')]\r\n        }\r\n    },\r\n    dataFormat: {\r\n        formatters: {\r\n            'time': function () { return ''; }\r\n        }\r\n    }\r\n};\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (designerConfig);\r\n\n\n//# sourceURL=webpack://packd3ts/./src/designer/designerConfigOptions.ts?");

/***/ }),

/***/ "./src/engine.ts":
/*!***********************!*\
  !*** ./src/engine.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/index.js\");\n\r\nfunction getCssClassesLine(cssClasses) {\r\n    return '.' + cssClasses.join('.');\r\n}\r\nfunction getScaleBand(domain, rangeStart, rangeEnd, scalePadding) {\r\n    var scale = d3__WEBPACK_IMPORTED_MODULE_0__.scaleBand()\r\n        .domain(domain)\r\n        .range([rangeStart, rangeEnd]);\r\n    var bandSize = scale.bandwidth();\r\n    if (scalePadding < bandSize) {\r\n        scale.paddingInner(scalePadding / bandSize);\r\n        scale.paddingOuter(scalePadding / 2 / bandSize);\r\n    }\r\n    return scale;\r\n}\r\nfunction getScaleLinear(domain, rangeStart, rangeEnd) {\r\n    return d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()\r\n        .domain(domain)\r\n        .range([rangeStart, rangeEnd]);\r\n}\r\nfunction renderSvgBlock(cssClass, width, height) {\r\n    d3__WEBPACK_IMPORTED_MODULE_0__.select('.wrapper')\r\n        .append('svg')\r\n        .attr('width', width)\r\n        .attr('height', height)\r\n        .attr('class', cssClass);\r\n}\r\nfunction getAxisByOrient(orient, scale) {\r\n    if (orient === 'top')\r\n        return d3__WEBPACK_IMPORTED_MODULE_0__.axisTop(scale);\r\n    if (orient === 'bottom')\r\n        return d3__WEBPACK_IMPORTED_MODULE_0__.axisBottom(scale);\r\n    if (orient === 'left')\r\n        return d3__WEBPACK_IMPORTED_MODULE_0__.axisLeft(scale);\r\n    if (orient === 'right')\r\n        return d3__WEBPACK_IMPORTED_MODULE_0__.axisRight(scale);\r\n}\r\nfunction cropLabels(labelBlocks, maxWidth) {\r\n    for (var i = 0; i < labelBlocks.nodes().length; i++) {\r\n        if (labelBlocks.nodes()[i].getBBox().width > maxWidth) {\r\n            var text = labelBlocks.nodes()[i].textContent;\r\n            var textLength = text.length;\r\n            while (labelBlocks.nodes()[i].getBBox().width > maxWidth && textLength > 0) {\r\n                labelBlocks.nodes()[i].textContent = text.substring(0, --textLength) + '...';\r\n            }\r\n            if (textLength === 0)\r\n                labelBlocks.nodes()[i].textContent = '';\r\n        }\r\n    }\r\n}\r\nfunction renderAxis(scale, axisOrient, translateX, translateY, cssClass, maxLabelSize) {\r\n    var axis = getAxisByOrient(axisOrient, scale);\r\n    d3__WEBPACK_IMPORTED_MODULE_0__.select('svg')\r\n        .append('g')\r\n        .attr('transform', \"translate(\" + translateX + \", \" + translateY + \")\")\r\n        .attr('class', cssClass + \" data-label\")\r\n        .call(axis);\r\n    if (axisOrient === 'left' || axisOrient === 'right')\r\n        cropLabels(d3__WEBPACK_IMPORTED_MODULE_0__.select(\".\" + cssClass).selectAll('text'), maxLabelSize);\r\n    else if (axisOrient === 'bottom' || axisOrient === 'top') {\r\n        if (scale.step)\r\n            cropLabels(d3__WEBPACK_IMPORTED_MODULE_0__.select(\".\" + cssClass).selectAll('text'), scale.step());\r\n    }\r\n}\r\nfunction fillBarAttrsByKeyOrient(bars, axisOrient, scaleKey, scaleValue, margin, keyField, valueField, blockWidth, blockHeight) {\r\n    if (axisOrient === 'top')\r\n        bars.attr('x', function (d) { return scaleKey(d[keyField]) + margin.left; })\r\n            .attr('y', function (d) { return margin.top; })\r\n            .attr('height', function (d) { return scaleValue(d[valueField]); })\r\n            .attr('width', function (d) { return scaleKey.bandwidth(); });\r\n    else if (axisOrient === 'bottom')\r\n        bars.attr('x', function (d) { return scaleKey(d[keyField]) + margin.left; })\r\n            .attr('y', function (d) { return scaleValue(d[valueField]) + margin.top; })\r\n            .attr('height', function (d) { return blockHeight - margin.top - margin.bottom - scaleValue(d[valueField]); })\r\n            .attr('width', function (d) { return scaleKey.bandwidth(); });\r\n    else if (axisOrient === 'left')\r\n        bars.attr('x', function (d) { return margin.left; })\r\n            .attr('y', function (d) { return scaleKey(d[keyField]) + margin.top; })\r\n            .attr('height', function (d) { return scaleKey.bandwidth(); })\r\n            .attr('width', function (d) { return scaleValue(d[valueField]); });\r\n    else if (axisOrient === 'right')\r\n        bars.attr('x', function (d) { return scaleValue(d[valueField]) + margin.left; })\r\n            .attr('y', function (d) { return scaleKey(d[keyField]) + margin.top; })\r\n            .attr('height', function (d) { return scaleKey.bandwidth(); })\r\n            .attr('width', function (d) { return blockWidth - margin.left - margin.right - scaleValue(d[valueField]); });\r\n}\r\nfunction renderBar(scaleKey, scaleValue, data, margin, keyField, valueField, keyAxisOrient, tooltipFields, cssClasses, chartPalette, blockWidth, blockHeight) {\r\n    var bars = d3__WEBPACK_IMPORTED_MODULE_0__.select('svg')\r\n        .selectAll(\"rect.bar-item\" + getCssClassesLine(cssClasses))\r\n        .data(data)\r\n        .enter()\r\n        .append('rect')\r\n        .attr('class', 'bar-item');\r\n    fillBarAttrsByKeyOrient(bars, keyAxisOrient, scaleKey, scaleValue, margin, keyField, valueField, blockWidth, blockHeight);\r\n    setCssClasses(bars, cssClasses);\r\n    setChartColor(bars, chartPalette, 'bar');\r\n}\r\nfunction getLine() {\r\n    return d3__WEBPACK_IMPORTED_MODULE_0__.line()\r\n        .x(function (d) { return d.x; })\r\n        .y(function (d) { return d.y; });\r\n}\r\nfunction getLineCoordinateByKeyOrient(axisOrient, data, scaleKey, scaleValue, margin, keyField, valueField) {\r\n    var lineCoordinate = [];\r\n    if (axisOrient === 'bottom' || axisOrient === 'top')\r\n        data.forEach(function (d) {\r\n            lineCoordinate.push({\r\n                x: scaleKey(d[keyField]) + scaleKey.bandwidth() / 2 + margin.left,\r\n                y: scaleValue(d[valueField]) + margin.top\r\n            });\r\n        });\r\n    else if (axisOrient === 'left' || axisOrient === 'right')\r\n        data.forEach(function (d) {\r\n            lineCoordinate.push({\r\n                x: scaleValue(d[valueField]) + margin.left,\r\n                y: scaleKey(d[keyField]) + scaleKey.bandwidth() / 2 + margin.top\r\n            });\r\n        });\r\n    return lineCoordinate;\r\n}\r\nfunction getArea(keyAxisOrient) {\r\n    if (keyAxisOrient === 'bottom' || keyAxisOrient === 'top')\r\n        return d3__WEBPACK_IMPORTED_MODULE_0__.area()\r\n            .x(function (d) { return d.x0; })\r\n            .y0(function (d) { return d.y0; })\r\n            .y1(function (d) { return d.y1; });\r\n    if (keyAxisOrient === 'left' || keyAxisOrient === 'right')\r\n        return d3__WEBPACK_IMPORTED_MODULE_0__.area()\r\n            .x0(function (d) { return d.x0; })\r\n            .x1(function (d) { return d.x1; })\r\n            .y(function (d) { return d.y0; });\r\n}\r\nfunction getAreaCoordinateByKeyOrient(axisOrient, data, scaleKey, scaleValue, margin, keyField, valueField, blockWidth, blockHeight) {\r\n    var areaCoordinate = [];\r\n    if (axisOrient === 'bottom' || axisOrient === 'top') {\r\n        var y0_1 = margin.top;\r\n        if (axisOrient === 'bottom')\r\n            y0_1 = blockHeight - margin.bottom;\r\n        data.forEach(function (d) {\r\n            areaCoordinate.push({\r\n                x0: scaleKey(d[keyField]) + scaleKey.bandwidth() / 2 + margin.left,\r\n                x1: 0,\r\n                y0: y0_1,\r\n                y1: scaleValue(d[valueField]) + margin.top\r\n            });\r\n        });\r\n    }\r\n    else if (axisOrient === 'left' || axisOrient === 'right') {\r\n        var x0_1 = margin.left;\r\n        if (axisOrient === 'right')\r\n            x0_1 = blockWidth - margin.right;\r\n        data.forEach(function (d) {\r\n            areaCoordinate.push({\r\n                x0: x0_1,\r\n                x1: scaleValue(d[valueField]) + margin.left,\r\n                y0: scaleKey(d[keyField]) + scaleKey.bandwidth() / 2 + margin.top,\r\n                y1: 0\r\n            });\r\n        });\r\n    }\r\n    return areaCoordinate;\r\n}\r\nfunction renderLine(scaleKey, scaleValue, data, margin, keyField, valueField, keyAxisOrient, cssClasses, chartPalette, blockWidth, blockHeight) {\r\n    var line = getLine();\r\n    var lineCoordinate = getLineCoordinateByKeyOrient(keyAxisOrient, data, scaleKey, scaleValue, margin, keyField, valueField);\r\n    var path = d3__WEBPACK_IMPORTED_MODULE_0__.select('svg')\r\n        .append('path')\r\n        .attr('d', line(lineCoordinate))\r\n        .attr('class', 'line');\r\n    setCssClasses(path, cssClasses);\r\n    setChartColor(path, chartPalette, 'line');\r\n}\r\nfunction renderArea(scaleKey, scaleValue, data, margin, keyField, valueField, keyAxisOrient, cssClasses, chartPalette, blockWidth, blockHeight) {\r\n    var area = getArea(keyAxisOrient);\r\n    var areaCoordinate = getAreaCoordinateByKeyOrient(keyAxisOrient, data, scaleKey, scaleValue, margin, keyField, valueField, blockWidth, blockHeight);\r\n    var path = d3__WEBPACK_IMPORTED_MODULE_0__.select('svg')\r\n        .append('path')\r\n        .attr('d', area(areaCoordinate))\r\n        .attr('class', 'area');\r\n    setCssClasses(path, cssClasses);\r\n    setChartColor(path, chartPalette, 'area');\r\n}\r\nfunction getPieRadius(margin, blockWidth, blockHeight) {\r\n    return Math.min(blockWidth - margin.left - margin.right, blockHeight - margin.top - margin.bottom) / 2;\r\n}\r\nfunction getArc(outerRadius, innerRadius) {\r\n    if (innerRadius === void 0) { innerRadius = 0; }\r\n    return d3__WEBPACK_IMPORTED_MODULE_0__.arc()\r\n        .innerRadius(innerRadius)\r\n        .outerRadius(outerRadius);\r\n}\r\nfunction getPie(valueField, padAngle) {\r\n    if (padAngle === void 0) { padAngle = 0; }\r\n    return d3__WEBPACK_IMPORTED_MODULE_0__.pie()\r\n        .padAngle(padAngle)\r\n        .sort(null)\r\n        .value(function (d) { return d[valueField]; });\r\n}\r\nfunction renderDonutText(arcItems, arc, field) {\r\n    arcItems\r\n        .append('text')\r\n        .attr('transform', function (d) { return \"translate(\" + arc.centroid(d) + \") rotate(-90) rotate(\" + (d.endAngle < Math.PI ?\r\n        (d.startAngle / 2 + d.endAngle / 2) * 180 / Math.PI :\r\n        (d.startAngle / 2 + d.endAngle / 2 + Math.PI) * 180 / Math.PI) + \")\"; })\r\n        .attr('font-size', 10)\r\n        .attr('class', 'data-label')\r\n        .text(function (d) { return d.data[field]; })\r\n        .style('text-anchor', 'middle');\r\n}\r\nfunction renderDonut(data, margin, keyField, valueField, innerRadius, padAngle, tooltipFields, cssClasses, chartPalette, blockWidth, blockHeight) {\r\n    var radius = getPieRadius(margin, blockWidth, blockHeight);\r\n    var arc = getArc(radius, radius * 0.01 * innerRadius);\r\n    var pie = getPie(valueField, padAngle);\r\n    var translateX = (blockWidth - margin.left - margin.right) / 2 + margin.left;\r\n    var translateY = (blockHeight - margin.top - margin.bottom) / 2 + margin.top;\r\n    var donutBlock = d3__WEBPACK_IMPORTED_MODULE_0__.select('svg')\r\n        .append('g')\r\n        .attr('class', 'donut-block')\r\n        .attr('transform', \"translate(\" + translateX + \", \" + translateY + \")\");\r\n    var items = donutBlock\r\n        .selectAll('.arc')\r\n        .data(pie(data))\r\n        .enter()\r\n        .append('g')\r\n        .attr('class', 'arc');\r\n    var arcs = items\r\n        .append('path')\r\n        .attr('d', arc);\r\n    setCssClasses(arcs, cssClasses);\r\n    setElementsColor(items, chartPalette, 'donut');\r\n}\r\nfunction setChartColor(elements, colorPalette, chartType) {\r\n    if (chartType === 'line') {\r\n        elements.style('stroke', colorPalette[0]);\r\n    }\r\n    else {\r\n        elements.style('fill', colorPalette[0]);\r\n    }\r\n}\r\nfunction setElementsColor(arcItems, colorPalette, chartType) {\r\n    if (chartType === 'donut') {\r\n        arcItems\r\n            .select('path')\r\n            .style('fill', function (d, i) { return colorPalette[i % colorPalette.length].toString(); });\r\n    }\r\n}\r\nfunction setCssClasses(elem, cssClasses) {\r\n    cssClasses.forEach(function (cssClass) {\r\n        elem.classed(cssClass, true);\r\n    });\r\n}\r\nfunction render2DCharts(charts, scaleKey, scaleValue, data, margin, keyAxisOrient, blockWidth, blockHeight) {\r\n    charts.forEach(function (chart) {\r\n        if (chart.type === 'bar')\r\n            renderBar(scaleKey, scaleValue, data[chart.data.dataSource], margin, chart.data.keyField, chart.data.valueField, keyAxisOrient, chart.tooltip.data.fields, chart.cssClasses, chart.elementColors, blockWidth, blockHeight);\r\n        else if (chart.type === 'line')\r\n            renderLine(scaleKey, scaleValue, data[chart.data.dataSource], margin, chart.data.keyField, chart.data.valueField, keyAxisOrient, chart.cssClasses, chart.elementColors, blockWidth, blockHeight);\r\n        else if (chart.type === 'area')\r\n            renderArea(scaleKey, scaleValue, data[chart.data.dataSource], margin, chart.data.keyField, chart.data.valueField, keyAxisOrient, chart.cssClasses, chart.elementColors, blockWidth, blockHeight);\r\n    });\r\n}\r\nfunction renderPolarCharts(charts, data, margin, blockWidth, blockHeight) {\r\n    charts.forEach(function (chart) {\r\n        if (chart.type === 'donut')\r\n            renderDonut(data[chart.data.dataSource], margin, chart.data.keyField, chart.data.valueField, chart.appearanceOptions.innerRadius, chart.appearanceOptions.padAngle, chart.tooltip.data.fields, chart.cssClasses, chart.elementColors, blockWidth, blockHeight);\r\n    });\r\n}\r\nfunction fillScales(scales, keyDomain, keyRangeStart, keyRangeEnd, scaleKeyPadding, valueDomain, valueRangeStart, valueRangeEnd) {\r\n    scales.scaleKey = getScaleBand(keyDomain, keyRangeStart, keyRangeEnd, scaleKeyPadding);\r\n    scales.scaleValue = getScaleLinear(valueDomain, valueRangeStart, valueRangeEnd);\r\n}\r\nfunction clearBlock() {\r\n    d3__WEBPACK_IMPORTED_MODULE_0__.select('svg')\r\n        .remove();\r\n}\r\nfunction updateValueAxisDomain(scaleValue, axisClass, axisOrient) {\r\n    var axis = getAxisByOrient(axisOrient, scaleValue);\r\n    d3__WEBPACK_IMPORTED_MODULE_0__.select('svg')\r\n        .select(\".\" + axisClass)\r\n        .transition()\r\n        .duration(1000)\r\n        .call(axis.bind(this));\r\n}\r\nfunction updateChartsByValueAxis(charts, scaleKey, scaleValue, data, margin, keyAxisOrient, blockWidth, blockHeight) {\r\n    charts.forEach(function (chart) {\r\n        if (chart.type === 'bar')\r\n            updateBarChartByValueAxis(scaleKey, scaleValue, data[chart.data.dataSource], margin, chart.data.keyField, chart.data.valueField, keyAxisOrient, blockWidth, blockHeight, chart.cssClasses);\r\n        else if (chart.type === 'line') {\r\n            updateLineChartByValueAxis(scaleKey, scaleValue, data[chart.data.dataSource], margin, chart.data.keyField, chart.data.valueField, keyAxisOrient, chart.cssClasses);\r\n        }\r\n        else if (chart.type === 'area')\r\n            updateAreaChartByValueAxis(scaleKey, scaleValue, data[chart.data.dataSource], margin, chart.data.keyField, chart.data.valueField, keyAxisOrient, blockWidth, blockHeight, chart.cssClasses);\r\n    });\r\n}\r\nfunction updateLineChartByValueAxis(scaleKey, scaleValue, data, margin, keyField, valueField, keyAxisOrient, cssClasses) {\r\n    var line = getLine();\r\n    var lineCoordinate = getLineCoordinateByKeyOrient(keyAxisOrient, data, scaleKey, scaleValue, margin, keyField, valueField);\r\n    d3__WEBPACK_IMPORTED_MODULE_0__.select('svg')\r\n        .select(\".line\" + getCssClassesLine(cssClasses))\r\n        .transition()\r\n        .duration(1000)\r\n        .attr('d', line(lineCoordinate));\r\n}\r\nfunction updateAreaChartByValueAxis(scaleKey, scaleValue, data, margin, keyField, valueField, keyAxisOrient, blockWidth, blockHeight, cssClasses) {\r\n    var area = getArea(keyAxisOrient);\r\n    var areaCoordinate = getAreaCoordinateByKeyOrient(keyAxisOrient, data, scaleKey, scaleValue, margin, keyField, valueField, blockWidth, blockHeight);\r\n    d3__WEBPACK_IMPORTED_MODULE_0__.select('svg')\r\n        .select(\".area\" + getCssClassesLine(cssClasses))\r\n        .transition()\r\n        .duration(1000)\r\n        .attr('d', area(areaCoordinate));\r\n}\r\nfunction updateBarChartByValueAxis(scaleKey, scaleValue, data, margin, keyField, valueField, keyAxisOrient, blockWidth, blockHeight, cssClasses) {\r\n    var bars = d3__WEBPACK_IMPORTED_MODULE_0__.select('svg')\r\n        .selectAll(\".bar-item\" + getCssClassesLine(cssClasses));\r\n    fillBarAttrsByKeyOrientWithTransition(bars, keyAxisOrient, scaleKey, scaleValue, margin, keyField, valueField, blockWidth, blockHeight, 1000);\r\n}\r\nfunction fillBarAttrsByKeyOrientWithTransition(bars, axisOrient, scaleKey, scaleValue, margin, keyField, valueField, blockWidth, blockHeight, transitionDuration) {\r\n    var barsTran = bars.transition().duration(transitionDuration);\r\n    if (axisOrient === 'top')\r\n        barsTran.attr('x', function (d) { return scaleKey(d[keyField]) + margin.left; })\r\n            .attr('y', function (d) { return margin.top; })\r\n            .attr('height', function (d) { return scaleValue(d[valueField]); })\r\n            .attr('width', function (d) { return scaleKey.bandwidth(); });\r\n    else if (axisOrient === 'bottom')\r\n        barsTran.attr('x', function (d) { return scaleKey(d[keyField]) + margin.left; })\r\n            .attr('y', function (d) { return scaleValue(d[valueField]) + margin.top; })\r\n            .attr('height', function (d) { return blockHeight - margin.top - margin.bottom - scaleValue(d[valueField]); })\r\n            .attr('width', function (d) { return scaleKey.bandwidth(); });\r\n    else if (axisOrient === 'left')\r\n        barsTran.attr('x', function (d) { return margin.left; })\r\n            .attr('y', function (d) { return scaleKey(d[keyField]) + margin.top; })\r\n            .attr('height', function (d) { return scaleKey.bandwidth(); })\r\n            .attr('width', function (d) { return scaleValue(d[valueField]); });\r\n    else if (axisOrient === 'right')\r\n        barsTran.attr('x', function (d) { return scaleValue(d[valueField]) + margin.left; })\r\n            .attr('y', function (d) { return scaleKey(d[keyField]) + margin.top; })\r\n            .attr('height', function (d) { return scaleKey.bandwidth(); })\r\n            .attr('width', function (d) { return blockWidth - margin.left - margin.right - scaleValue(d[valueField]); });\r\n}\r\nfunction renderLegend(data, options, legendsSize, margin, blockWidth, blockHeight) {\r\n    //FIXME Make it better\r\n    if (options.type === '2d') {\r\n        var chartsWithLegendLeft = options.charts.filter(function (chart) { return chart.legend.position === 'left'; });\r\n        if (chartsWithLegendLeft.length !== 0) {\r\n            renderLegendBlock(chartsWithLegendLeft.map(function (chart) { return chart.data.dataSource; }), 'left', legendsSize.left.size, margin, chartsWithLegendLeft.map(function (chart) { return chart.elementColors[0]; }), blockWidth, blockHeight);\r\n        }\r\n        var chartsWithLegendRight = options.charts.filter(function (chart) { return chart.legend.position === 'right'; });\r\n        if (chartsWithLegendRight.length !== 0) {\r\n            renderLegendBlock(chartsWithLegendRight.map(function (chart) { return chart.data.dataSource; }), 'right', legendsSize.right.size, margin, chartsWithLegendRight.map(function (chart) { return chart.elementColors[0]; }), blockWidth, blockHeight);\r\n        }\r\n        var chartsWithLegendTop = options.charts.filter(function (chart) { return chart.legend.position === 'top'; });\r\n        if (chartsWithLegendTop.length !== 0) {\r\n            renderLegendBlock(chartsWithLegendTop.map(function (chart) { return chart.data.dataSource; }), 'top', legendsSize.top.size, margin, chartsWithLegendTop.map(function (chart) { return chart.elementColors[0]; }), blockWidth, blockHeight);\r\n        }\r\n        var chartsWithLegendBottom = options.charts.filter(function (chart) { return chart.legend.position === 'bottom'; });\r\n        if (chartsWithLegendBottom.length !== 0) {\r\n            renderLegendBlock(chartsWithLegendBottom.map(function (chart) { return chart.data.dataSource; }), 'bottom', legendsSize.bottom.size, margin, chartsWithLegendBottom.map(function (chart) { return chart.elementColors[0]; }), blockWidth, blockHeight);\r\n        }\r\n    }\r\n    else {\r\n        var chartsWithLegendLeft = options.charts.filter(function (chart) { return chart.legend.position === 'left'; });\r\n        if (chartsWithLegendLeft.length !== 0) {\r\n            renderLegendBlock(chartsWithLegendLeft.map(function (chart) { return data[chart.data.dataSource].map(function (record) { return record[chart.data.keyField]; }); })[0], 'left', legendsSize.left.size, margin, chartsWithLegendLeft.map(function (chart) { return chart.elementColors; })[0], blockWidth, blockHeight);\r\n        }\r\n        var chartsWithLegendRight = options.charts.filter(function (chart) { return chart.legend.position === 'right'; });\r\n        if (chartsWithLegendRight.length !== 0) {\r\n            renderLegendBlock(chartsWithLegendRight.map(function (chart) { return data[chart.data.dataSource].map(function (record) { return record[chart.data.keyField]; }); })[0], 'right', legendsSize.right.size, margin, chartsWithLegendRight.map(function (chart) { return chart.elementColors; })[0], blockWidth, blockHeight);\r\n        }\r\n        var chartsWithLegendTop = options.charts.filter(function (chart) { return chart.legend.position === 'top'; });\r\n        if (chartsWithLegendTop.length !== 0) {\r\n            renderLegendBlock(chartsWithLegendTop.map(function (chart) { return data[chart.data.dataSource].map(function (record) { return record[chart.data.keyField]; }); })[0], 'top', legendsSize.top.size, margin, chartsWithLegendTop.map(function (chart) { return chart.elementColors; })[0], blockWidth, blockHeight);\r\n        }\r\n        var chartsWithLegendBottom = options.charts.filter(function (chart) { return chart.legend.position === 'bottom'; });\r\n        if (chartsWithLegendBottom.length !== 0) {\r\n            renderLegendBlock(chartsWithLegendBottom.map(function (chart) { return data[chart.data.dataSource].map(function (record) { return record[chart.data.keyField]; }); })[0], 'bottom', legendsSize.bottom.size, margin, chartsWithLegendBottom.map(function (chart) { return chart.elementColors; })[0], blockWidth, blockHeight);\r\n        }\r\n    }\r\n}\r\nfunction renderLegendBlock(items, legendPosition, legendSize, margin, colorPalette, blockWidth, blockHeight) {\r\n    var legendBlock = d3__WEBPACK_IMPORTED_MODULE_0__.select('svg')\r\n        .append('foreignObject')\r\n        .attr('class', 'legend');\r\n    // .style('outline', '1px solid red');\r\n    fillLegendCoordinateByPosition(legendBlock, legendPosition, legendSize, margin, blockWidth, blockHeight);\r\n    fillLegend(legendBlock, items, legendPosition, colorPalette);\r\n}\r\nfunction fillLegendCoordinateByPosition(legendBlock, legendPosition, legendSize, margin, blockWidth, blockHeight) {\r\n    if (legendPosition === 'left') {\r\n        legendBlock\r\n            .attr('y', 0)\r\n            .attr('x', 0)\r\n            .attr('width', legendSize)\r\n            .attr('height', blockHeight);\r\n    }\r\n    else if (legendPosition === 'right') {\r\n        legendBlock\r\n            .attr('y', 0)\r\n            .attr('x', Math.ceil(blockWidth - legendSize))\r\n            .attr('width', Math.ceil(legendSize))\r\n            .attr('height', blockHeight);\r\n    }\r\n    else if (legendPosition === 'top') {\r\n        legendBlock\r\n            .attr('y', 0)\r\n            .attr('x', 0)\r\n            .attr('width', blockWidth)\r\n            .attr('height', legendSize);\r\n    }\r\n    else if (legendPosition === 'bottom') {\r\n        legendBlock\r\n            .attr('y', blockHeight - legendSize)\r\n            .attr('x', 0)\r\n            .attr('width', blockWidth)\r\n            .attr('height', legendSize);\r\n    }\r\n}\r\nfunction fillLegend(legendBlock, items, legendPosition, colorPalette) {\r\n    var wrapper = legendBlock.append('xhtml:div');\r\n    wrapper\r\n        .style('width', '100%')\r\n        .style('height', '100%')\r\n        .style('display', 'flex')\r\n        .style('flex-wrap', 'wrap')\r\n        .style('justify-content', 'center');\r\n    if (legendPosition === 'left' || legendPosition === 'right')\r\n        wrapper.style('flex-direction', 'column');\r\n    var itemWrappers = wrapper\r\n        .selectAll('.legend-item')\r\n        .data(items)\r\n        .enter()\r\n        .append('div')\r\n        .attr('class', 'legend-item');\r\n    itemWrappers\r\n        .append('span')\r\n        .attr('class', 'legend-circle')\r\n        .style('background-color', function (d, i) { return colorPalette[i % colorPalette.length].toString(); });\r\n    itemWrappers\r\n        .data(items)\r\n        .append('span')\r\n        .attr('class', 'legend-label')\r\n        .text(function (d) { return d.toString(); });\r\n}\r\nfunction render2D(model, data) {\r\n    var options = model.options;\r\n    fillScales(scales, options.scale.scaleKey.domain, options.scale.scaleKey.range.start, options.scale.scaleKey.range.end, model.chartSettings.bar.distance, options.scale.scaleValue.domain, options.scale.scaleValue.range.start, options.scale.scaleValue.range.end);\r\n    renderSvgBlock(model.blockCanvas.class, model.blockCanvas.size.width, model.blockCanvas.size.height);\r\n    renderAxis(scales.scaleKey, options.axis.keyAxis.orient, options.axis.keyAxis.translate.translateX, options.axis.keyAxis.translate.translateY, options.axis.keyAxis.class, options.axis.keyAxis.maxLabelSize);\r\n    renderAxis(scales.scaleValue, options.axis.valueAxis.orient, options.axis.valueAxis.translate.translateX, options.axis.valueAxis.translate.translateY, options.axis.valueAxis.class, options.axis.valueAxis.maxLabelSize);\r\n    render2DCharts(options.charts, scales.scaleKey, scales.scaleValue, data, model.chartBlock.margin, options.axis.keyAxis.orient, model.blockCanvas.size.width, model.blockCanvas.size.height);\r\n    renderLegend(data, options, model.legendBlock, model.chartBlock.margin, model.blockCanvas.size.width, model.blockCanvas.size.height);\r\n    renderTooltips(model, data);\r\n}\r\nfunction renderPolar(model, data) {\r\n    var options = model.options;\r\n    renderSvgBlock(model.blockCanvas.class, model.blockCanvas.size.width, model.blockCanvas.size.height);\r\n    renderPolarCharts(options.charts, data, model.chartBlock.margin, model.blockCanvas.size.width, model.blockCanvas.size.height);\r\n    renderLegend(data, options, model.legendBlock, model.chartBlock.margin, model.blockCanvas.size.width, model.blockCanvas.size.height);\r\n    renderTooltips(model, data);\r\n}\r\nfunction getTooltipText(fields, data) {\r\n    var text = '';\r\n    fields.forEach(function (field) {\r\n        text += \"<strong>\" + field + \": \" + data[field] + \"</strong><br>\";\r\n    });\r\n    return text;\r\n}\r\nfunction getMultplyTooltipText(charts, data, key) {\r\n    var text = '';\r\n    charts.forEach(function (chart) {\r\n        text += \"<div class=\\\"tooltip-chart-item\\\"><span class=\\\"legend-circle\\\" style=\\\"background-color: \" + chart.elementColors[0] + \"\\\"></span><br>\";\r\n        if (chart.tooltip.data.fields.length !== 0)\r\n            text += getTooltipText(chart.tooltip.data.fields, data[chart.data.dataSource].find(function (d) { return d[chart.data.keyField] === key; }));\r\n        text += '</div>';\r\n    });\r\n    return text;\r\n}\r\nfunction renderTooltipForBar(bars, fields, data) {\r\n    var wrapper = d3__WEBPACK_IMPORTED_MODULE_0__.select('.tooltip-wrapper');\r\n    var tooltip = wrapper.select('.tooltip');\r\n    if (tooltip.size() === 0)\r\n        tooltip = wrapper\r\n            .append('div')\r\n            .attr('class', 'tooltip')\r\n            .style('position', 'absolute')\r\n            .style('display', 'none');\r\n    bars\r\n        .data(data)\r\n        .on('mouseover', function (e, d) {\r\n        tooltip.html(getTooltipText(fields, d));\r\n        tooltip.style('display', 'block');\r\n    });\r\n    bars\r\n        .data(data)\r\n        .on('mousemove', function (event, d) {\r\n        tooltip\r\n            .style('left', d3__WEBPACK_IMPORTED_MODULE_0__.pointer(event, this)[0] + 10 + 'px')\r\n            .style('top', d3__WEBPACK_IMPORTED_MODULE_0__.pointer(event, this)[1] + 10 + 'px');\r\n    });\r\n    bars.on('mouseleave', function (event) { return tooltip.style('display', 'none'); });\r\n}\r\nfunction renderTooltipsForBar(charts, data) {\r\n    charts.forEach(function (chart) {\r\n        var bars = d3__WEBPACK_IMPORTED_MODULE_0__.select('svg')\r\n            .selectAll(\"rect\" + getCssClassesLine(chart.cssClasses));\r\n        renderTooltipForBar(bars, chart.tooltip.data.fields, data[chart.data.dataSource]);\r\n    });\r\n}\r\nfunction renderLineTooltip(scaleKey, margin, blockWidth, blockHeight, charts, data) {\r\n    var wrapper = d3__WEBPACK_IMPORTED_MODULE_0__.select('.tooltip-wrapper');\r\n    var tooltip = wrapper.select('.tooltip');\r\n    if (tooltip.size() === 0)\r\n        tooltip = wrapper\r\n            .append('div')\r\n            .attr('class', 'tooltip')\r\n            .style('position', 'absolute')\r\n            .style('display', 'none');\r\n    var tooltipLine = d3__WEBPACK_IMPORTED_MODULE_0__.select('svg')\r\n        .append('line')\r\n        .style('stroke', 'black');\r\n    var bandSize = scaleKey.step();\r\n    d3__WEBPACK_IMPORTED_MODULE_0__.select('svg')\r\n        .append('rect')\r\n        .attr('class', 'tipbox')\r\n        .attr('x', margin.left)\r\n        .attr('y', margin.top)\r\n        .attr('width', blockWidth - margin.left - margin.right)\r\n        .attr('height', blockHeight - margin.top - margin.bottom)\r\n        .style('opacity', 0)\r\n        // .style('outline', '1px solid red')\r\n        .on('mouseover', function (event) {\r\n        tooltip.style('display', 'block');\r\n    })\r\n        .on('mousemove', function (event) {\r\n        var index = getKeyIndex(event, this, charts[0].orient, margin, bandSize);\r\n        var key = scaleKey.domain()[index];\r\n        tooltip.html(\"\" + getMultplyTooltipText(charts, data, key));\r\n        tooltip\r\n            .style('left', d3__WEBPACK_IMPORTED_MODULE_0__.pointer(event, this)[0] + 10 + 'px')\r\n            .style('top', d3__WEBPACK_IMPORTED_MODULE_0__.pointer(event, this)[1] + 10 + 'px');\r\n        tooltipLine\r\n            .style('display', 'block');\r\n        setTooltipLineAttributes(tooltipLine, scaleKey, margin, key, charts[0].orient, blockWidth, blockHeight);\r\n    })\r\n        .on('mouseleave', function (event) {\r\n        tooltip.style('display', 'none');\r\n        tooltipLine.style('display', 'none');\r\n    });\r\n}\r\nfunction getKeyIndex(event, context, orient, margin, bandSize) {\r\n    var pointerAxis = orient === 'vertical' ? 0 : 1;\r\n    var marginByOrient = orient === 'vertical' ? margin.left : margin.top;\r\n    var point = d3__WEBPACK_IMPORTED_MODULE_0__.pointer(event, context)[pointerAxis] - marginByOrient - 1;\r\n    if (point < 0)\r\n        return 0;\r\n    return Math.floor(point / bandSize);\r\n}\r\nfunction setTooltipLineAttributes(tooltipLine, scaleKey, margin, key, orient, blockWidth, blockHeight) {\r\n    if (orient === 'vertical')\r\n        tooltipLine\r\n            .attr('x1', scaleKey(key) + margin.left + scaleKey.bandwidth() / 2)\r\n            .attr('x2', scaleKey(key) + margin.left + scaleKey.bandwidth() / 2)\r\n            .attr('y1', margin.top)\r\n            .attr('y2', blockHeight - margin.bottom);\r\n    else\r\n        tooltipLine\r\n            .attr('x1', margin.left)\r\n            .attr('x2', blockWidth - margin.right)\r\n            .attr('y1', scaleKey(key) + margin.top + scaleKey.bandwidth() / 2)\r\n            .attr('y2', scaleKey(key) + margin.top + scaleKey.bandwidth() / 2);\r\n}\r\nfunction renderTooltipsForDonut(charts, data) {\r\n    charts.forEach(function (chart) {\r\n        var attrTransform = d3__WEBPACK_IMPORTED_MODULE_0__.select('.donut-block').attr('transform');\r\n        var translateNumbers = attrTransform.substring(10, attrTransform.length - 1).split(', ');\r\n        var translateX = parseFloat(translateNumbers[0]);\r\n        var translateY = parseFloat(translateNumbers[1]);\r\n        var items = d3__WEBPACK_IMPORTED_MODULE_0__.select('svg')\r\n            .selectAll(\"path\" + getCssClassesLine(chart.cssClasses));\r\n        renderTooltipForDonut(items, chart.tooltip.data.fields, data[chart.data.dataSource], translateX, translateY);\r\n    });\r\n}\r\nfunction renderTooltipForDonut(arcs, fields, data, translateX, translateY) {\r\n    var wrapper = d3__WEBPACK_IMPORTED_MODULE_0__.select('.tooltip-wrapper');\r\n    var tooltip = wrapper\r\n        .append('div')\r\n        .attr('class', 'tooltip')\r\n        .style('position', 'absolute')\r\n        .style('display', 'none')\r\n        .style('transform', \"translate(\" + translateX + \"px, \" + translateY + \"px)\");\r\n    arcs\r\n        .data(data)\r\n        .on('mouseover', function (e, d) {\r\n        tooltip.html(getTooltipText(fields, d));\r\n        tooltip.style('display', 'block');\r\n    });\r\n    arcs\r\n        .data(data)\r\n        .on('mousemove', function (event, d) {\r\n        tooltip\r\n            .style('left', d3__WEBPACK_IMPORTED_MODULE_0__.pointer(event, this)[0] + 10 + 'px')\r\n            .style('top', d3__WEBPACK_IMPORTED_MODULE_0__.pointer(event, this)[1] + 10 + 'px');\r\n    });\r\n    arcs.on('mouseleave', function (d) { return tooltip.style('display', 'none'); });\r\n}\r\nfunction renderTooltips(model, data) {\r\n    d3__WEBPACK_IMPORTED_MODULE_0__.select('.wrapper')\r\n        .append('div')\r\n        .attr('class', 'tooltip-wrapper');\r\n    if (model.options.type === '2d') {\r\n        if (model.options.charts.findIndex(function (chart) { return chart.type === 'area' || chart.type === 'line'; }) === -1) {\r\n            renderTooltipsForBar(model.options.charts, data);\r\n        }\r\n        else {\r\n            renderLineTooltip(scales.scaleKey, model.chartBlock.margin, model.blockCanvas.size.width, model.blockCanvas.size.height, model.options.charts, data);\r\n        }\r\n    }\r\n    else {\r\n        renderTooltipsForDonut(model.options.charts, data);\r\n    }\r\n}\r\nfunction updateByValueAxis(model, data) {\r\n    var options = model.options;\r\n    fillScales(scales, options.scale.scaleKey.domain, options.scale.scaleKey.range.start, options.scale.scaleKey.range.end, model.chartSettings.bar.distance, options.scale.scaleValue.domain, options.scale.scaleValue.range.start, options.scale.scaleValue.range.end);\r\n    updateValueAxisDomain(scales.scaleValue, options.axis.valueAxis.class, options.axis.valueAxis.orient);\r\n    updateChartsByValueAxis(options.charts, scales.scaleKey, scales.scaleValue, data, model.chartBlock.margin, options.axis.keyAxis.orient, model.blockCanvas.size.width, model.blockCanvas.size.height);\r\n}\r\nfunction prepareData(data, model) {\r\n    if (model.dataSettings.limit !== -1) {\r\n        model.options.charts.map(function (chart) { return chart.data.dataSource; }).forEach(function (dataset) {\r\n            data[dataset].splice(model.dataSettings.limit, data[dataset].length - model.dataSettings.limit);\r\n        });\r\n    }\r\n}\r\nvar scales = {\r\n    scaleKey: null,\r\n    scaleValue: null\r\n};\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n    render: function (model, data) {\r\n        prepareData(data, model);\r\n        if (model.options.type === '2d')\r\n            render2D(model, data);\r\n        else\r\n            renderPolar(model, data);\r\n    },\r\n    updateFullBlock: function (model, data) {\r\n        clearBlock();\r\n        this.render(model, data);\r\n    },\r\n    updateValueAxis: function (model, data) {\r\n        updateByValueAxis(model, data);\r\n    }\r\n});\r\n\n\n//# sourceURL=webpack://packd3ts/./src/engine.ts?");

/***/ }),

/***/ "./src/model/modelOptions.ts":
/*!***********************************!*\
  !*** ./src/model/modelOptions.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"assembleModel\": () => /* binding */ assembleModel,\n/* harmony export */   \"model\": () => /* binding */ model,\n/* harmony export */   \"getUpdatedModel\": () => /* binding */ getUpdatedModel\n/* harmony export */ });\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/index.js\");\n/* harmony import */ var _config_configOptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/configOptions */ \"./src/config/configOptions.ts\");\n/* harmony import */ var _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../designer/designerConfigOptions */ \"./src/designer/designerConfigOptions.ts\");\n\r\nvar data = __webpack_require__(/*! ../assets/dataSet.json */ \"./src/assets/dataSet.json\");\r\n\r\n\r\nvar AxisType;\r\n(function (AxisType) {\r\n    AxisType[AxisType[\"Key\"] = 0] = \"Key\";\r\n    AxisType[AxisType[\"Value\"] = 1] = \"Value\";\r\n})(AxisType || (AxisType = {}));\r\nvar ScaleType;\r\n(function (ScaleType) {\r\n    ScaleType[ScaleType[\"Key\"] = 0] = \"Key\";\r\n    ScaleType[ScaleType[\"Value\"] = 1] = \"Value\";\r\n})(ScaleType || (ScaleType = {}));\r\nvar CLASSES = {\r\n    wrapper: 'wrapper',\r\n    dataLabel: 'data-label',\r\n    legendLabel: 'legend-label',\r\n    legendColor: 'legend-circle',\r\n    legendItem: 'legend-item',\r\n    line: 'line',\r\n    bar: 'bar',\r\n    area: 'area',\r\n    donut: 'donut'\r\n};\r\nvar AXIS_LABEL_PADDING = 9;\r\nfunction getMargin(legendBlockModel) {\r\n    var margin = {\r\n        top: _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_2__.default.canvas.chartBlockMargin.top,\r\n        bottom: _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_2__.default.canvas.chartBlockMargin.bottom,\r\n        left: _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_2__.default.canvas.chartBlockMargin.left,\r\n        right: _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_2__.default.canvas.chartBlockMargin.right\r\n    };\r\n    recalcMarginWithLegend(margin, _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.options, _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_2__.default.canvas.legendBlock.maxWidth, legendBlockModel);\r\n    if (_config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.options.type === '2d') {\r\n        recalcMarginWithAxisLabelWidth(margin, _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.options.charts, _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_2__.default.canvas.axisLabel.maxSize.main, _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.options.axis);\r\n    }\r\n    return margin;\r\n}\r\nfunction getDataLimit(dataLength, axisLength, minBarWidth, barDistance) {\r\n    var sumSize = dataLength * (minBarWidth + barDistance);\r\n    while (dataLength !== 0 && axisLength < sumSize) {\r\n        dataLength--;\r\n        sumSize = dataLength * (minBarWidth + barDistance);\r\n    }\r\n    return dataLength;\r\n}\r\nfunction calcDataLimit(margin) {\r\n    var limit = -1;\r\n    if (_config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.options.type === '2d') {\r\n        var barCharts = _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.options.charts.filter(function (chart) { return chart.type === 'bar'; });\r\n        if (barCharts.length !== 0) {\r\n            var axisLength = void 0;\r\n            if (barCharts.map(function (chart) { return chart.orientation; }).findIndex(function (s) { return s === 'vertical'; }) !== -1) {\r\n                axisLength = _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.width - margin.left - margin.right;\r\n            }\r\n            else {\r\n                axisLength = _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.height - margin.top - margin.bottom;\r\n            }\r\n            var dataLength = data[barCharts[0].data.dataSource].length;\r\n            limit = getDataLimit(dataLength, axisLength, _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_2__.default.canvas.chartOptions.bar.minBarWidth, _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_2__.default.canvas.chartOptions.bar.barDistance);\r\n        }\r\n    }\r\n    return limit;\r\n}\r\nfunction recalcMarginWithLegend(margin, options, legendMaxWidth, legendBlockModel) {\r\n    //FIXME Make it better\r\n    if (options.type === '2d') {\r\n        var chartsWithLegendLeft = options.charts.filter(function (chart) { return chart.legend.position === 'left'; });\r\n        if (chartsWithLegendLeft.length !== 0) {\r\n            var legendSize = getLegendWidth(chartsWithLegendLeft.map(function (chart) { return chart.data.dataSource; }), legendMaxWidth);\r\n            margin.left += legendSize;\r\n            legendBlockModel.left.size = legendSize;\r\n        }\r\n        var chartsWithLegendRight = options.charts.filter(function (chart) { return chart.legend.position === 'right'; });\r\n        if (chartsWithLegendRight.length !== 0) {\r\n            var legendSize = getLegendWidth(chartsWithLegendRight.map(function (chart) { return chart.data.dataSource; }), legendMaxWidth);\r\n            margin.right += legendSize;\r\n            legendBlockModel.right.size = legendSize;\r\n        }\r\n        var chartsWithLegendBottom = options.charts.filter(function (chart) { return chart.legend.position === 'bottom'; });\r\n        if (chartsWithLegendBottom.length !== 0) {\r\n            var legendSize = getLegendHeight(chartsWithLegendBottom.map(function (chart) { return chart.data.dataSource; }));\r\n            margin.bottom += legendSize;\r\n            legendBlockModel.bottom.size = legendSize;\r\n        }\r\n        var chartsWithLegendTop = options.charts.filter(function (chart) { return chart.legend.position === 'top'; });\r\n        if (chartsWithLegendTop.length !== 0) {\r\n            var legendSize = getLegendHeight(chartsWithLegendTop.map(function (chart) { return chart.data.dataSource; }));\r\n            margin.top += legendSize;\r\n            legendBlockModel.top.size = legendSize;\r\n        }\r\n    }\r\n    else {\r\n        var chartsWithLegendLeft = options.charts.filter(function (chart) { return chart.legend.position === 'left'; });\r\n        if (chartsWithLegendLeft.length !== 0) {\r\n            var legendSize = getLegendWidth(chartsWithLegendLeft.map(function (chart) {\r\n                return data[chart.data.dataSource].map(function (record) { return record[chart.data.keyField]; });\r\n            })[0], legendMaxWidth);\r\n            margin.left += legendSize;\r\n            legendBlockModel.left.size = legendSize;\r\n        }\r\n        var chartsWithLegendRight = options.charts.filter(function (chart) { return chart.legend.position === 'right'; });\r\n        if (chartsWithLegendRight.length !== 0) {\r\n            var legendSize = getLegendWidth(chartsWithLegendRight.map(function (chart) {\r\n                return data[chart.data.dataSource].map(function (record) { return record[chart.data.keyField]; });\r\n            })[0], legendMaxWidth);\r\n            margin.right += legendSize;\r\n            legendBlockModel.right.size = legendSize;\r\n        }\r\n        var chartsWithLegendBottom = options.charts.filter(function (chart) { return chart.legend.position === 'bottom'; });\r\n        if (chartsWithLegendBottom.length !== 0) {\r\n            var legendSize = getLegendHeight(chartsWithLegendBottom.map(function (chart) {\r\n                return data[chart.data.dataSource].map(function (record) { return record[chart.data.keyField]; });\r\n            })[0]);\r\n            margin.bottom += legendSize;\r\n            legendBlockModel.bottom.size = legendSize;\r\n        }\r\n        var chartsWithLegendTop = options.charts.filter(function (chart) { return chart.legend.position === 'top'; });\r\n        if (chartsWithLegendTop.length !== 0) {\r\n            var legendSize = getLegendHeight(chartsWithLegendTop.map(function (chart) {\r\n                return data[chart.data.dataSource].map(function (record) { return record[chart.data.keyField]; });\r\n            })[0]);\r\n            margin.top += legendSize;\r\n            legendBlockModel.top.size = legendSize;\r\n        }\r\n    }\r\n}\r\nfunction getLegendWidth(texts, legendMaxWidth) {\r\n    var maxWidth = 0;\r\n    texts.forEach(function (text) {\r\n        var width = getLegendItemWidth(text);\r\n        if (maxWidth < width)\r\n            maxWidth = width;\r\n    });\r\n    return maxWidth > legendMaxWidth ? legendMaxWidth : maxWidth;\r\n}\r\nfunction getLegendHeight(texts) {\r\n    var legendWrapper = document.createElement('div');\r\n    legendWrapper.style.display = 'flex';\r\n    legendWrapper.style.flexWrap = 'wrap';\r\n    legendWrapper.style.width = 900 + 'px';\r\n    texts.forEach(function (text) {\r\n        var itemWrapper = document.createElement('div');\r\n        var colorBlock = document.createElement('span');\r\n        var textBlock = document.createElement('span');\r\n        itemWrapper.classList.add(CLASSES.legendItem);\r\n        colorBlock.classList.add(CLASSES.legendColor);\r\n        textBlock.classList.add(CLASSES.legendLabel);\r\n        textBlock.textContent = text;\r\n        itemWrapper.append(colorBlock, textBlock);\r\n        legendWrapper.append(itemWrapper);\r\n    });\r\n    document.querySelector(\".\" + CLASSES.wrapper).append(legendWrapper);\r\n    var height = legendWrapper.offsetHeight;\r\n    legendWrapper.remove();\r\n    return height;\r\n}\r\nfunction getLegendItemWidth(text) {\r\n    var itemWrapper = document.createElement('div');\r\n    var colorBlock = document.createElement('span');\r\n    var textBlock = document.createElement('span');\r\n    itemWrapper.style.display = 'inline-block';\r\n    itemWrapper.classList.add(CLASSES.legendItem);\r\n    colorBlock.classList.add(CLASSES.legendColor);\r\n    textBlock.classList.add(CLASSES.legendLabel);\r\n    textBlock.textContent = text;\r\n    itemWrapper.append(colorBlock, textBlock);\r\n    document.querySelector(\".\" + CLASSES.wrapper).append(itemWrapper);\r\n    var sumWidth = itemWrapper.getBoundingClientRect().width\r\n        + parseFloat(window.getComputedStyle(itemWrapper, null).getPropertyValue('margin-left'))\r\n        + parseFloat(window.getComputedStyle(itemWrapper, null).getPropertyValue('margin-right'));\r\n    itemWrapper.remove();\r\n    return sumWidth;\r\n}\r\nfunction recalcMarginWithAxisLabelWidth(margin, charts, labelsMaxWidth, axis) {\r\n    var keyAxisOrient = getAxisOrient(AxisType.Key, charts[0].orientation, axis.keyAxis.position);\r\n    if (keyAxisOrient === 'left' || keyAxisOrient === 'right') {\r\n        var labelTexts = data[charts[0].data.dataSource].map(function (dataSet) { return dataSet[charts[0].data.keyField]; });\r\n        margin[keyAxisOrient] += getLabelTextMaxWidth(labelsMaxWidth, labelTexts) + AXIS_LABEL_PADDING;\r\n    }\r\n    else {\r\n        var valueAxisOrient = getAxisOrient(AxisType.Value, charts[0].orientation, axis.valueAxis.position);\r\n        var labelTexts = data[charts[0].data.dataSource].map(function (dataSet) { return dataSet[charts[0].data.valueField]; });\r\n        margin[valueAxisOrient] += getLabelTextMaxWidth(labelsMaxWidth, labelTexts) + AXIS_LABEL_PADDING;\r\n    }\r\n}\r\nfunction getLabelTextMaxWidth(legendMaxWidth, labelTexts) {\r\n    var textBlock = document.createElement('span');\r\n    textBlock.classList.add(CLASSES.dataLabel);\r\n    var maxWidth = 0;\r\n    labelTexts.forEach(function (text) {\r\n        textBlock.textContent = text;\r\n        document.querySelector(\".\" + CLASSES.wrapper).append(textBlock);\r\n        if (textBlock.getBoundingClientRect().width > maxWidth) {\r\n            maxWidth = textBlock.getBoundingClientRect().width;\r\n        }\r\n    });\r\n    textBlock.remove();\r\n    return maxWidth > legendMaxWidth ? legendMaxWidth : maxWidth;\r\n}\r\nfunction getScaleRangePeek(scaleType, chartOrientation, margin, blockWidth, blockHeight) {\r\n    if (chartOrientation === 'vertical')\r\n        return scaleType === ScaleType.Key\r\n            ? blockWidth - margin.left - margin.right\r\n            : blockHeight - margin.top - margin.bottom;\r\n    return scaleType === ScaleType.Key\r\n        ? blockHeight - margin.top - margin.bottom\r\n        : blockWidth - margin.left - margin.right;\r\n}\r\nfunction getScaleDomain(scaleType, configDomain, data, chart, keyAxisPosition, dataLimit) {\r\n    if (keyAxisPosition === void 0) { keyAxisPosition = null; }\r\n    if (dataLimit === void 0) { dataLimit = -1; }\r\n    if (scaleType === ScaleType.Key) {\r\n        var domain = data.map(function (d) { return d[chart.data.keyField]; });\r\n        if (dataLimit !== domain.length && dataLimit !== -1)\r\n            domain.splice(dataLimit, domain.length - dataLimit);\r\n        return domain;\r\n    }\r\n    else {\r\n        var domainPeekMin = void 0;\r\n        var domainPeekMax = void 0;\r\n        if (configDomain.start === -1)\r\n            domainPeekMin = 0;\r\n        else\r\n            domainPeekMin = configDomain.start;\r\n        if (configDomain.end === -1)\r\n            domainPeekMax = d3__WEBPACK_IMPORTED_MODULE_0__.max(data, function (d) { return d[chart.data.valueField]; });\r\n        else\r\n            domainPeekMax = configDomain.end;\r\n        if (chart.orientation === 'horizontal')\r\n            if (keyAxisPosition === 'start')\r\n                return [domainPeekMin, domainPeekMax];\r\n            else\r\n                return [domainPeekMax, domainPeekMin];\r\n        else if (keyAxisPosition === 'start')\r\n            return [domainPeekMin, domainPeekMax];\r\n        else\r\n            return [domainPeekMax, domainPeekMin];\r\n    }\r\n}\r\nfunction getAxisOrient(axisType, chartOrientation, axisPosition) {\r\n    if (chartOrientation === 'vertical') {\r\n        if (axisPosition === 'start')\r\n            return axisType === AxisType.Key ? 'top' : 'left';\r\n        else\r\n            return axisType === AxisType.Key ? 'bottom' : 'right';\r\n    }\r\n    else {\r\n        if (axisPosition === 'start')\r\n            return axisType === AxisType.Key ? 'left' : 'top';\r\n        else\r\n            return axisType === AxisType.Key ? 'right' : 'bottom';\r\n    }\r\n}\r\nfunction getTranslateX(axisType, chartOrientation, axisPosition, margin, blockWidth, blockHeight) {\r\n    var orient = getAxisOrient(axisType, chartOrientation, axisPosition);\r\n    if (orient === 'top' || orient === 'left')\r\n        return margin.left;\r\n    else if (orient === 'bottom')\r\n        return margin.left;\r\n    else\r\n        return blockWidth - margin.right;\r\n}\r\nfunction getTranslateY(axisType, chartOrientation, axisPosition, margin, blockWidth, blockHeight) {\r\n    var orient = getAxisOrient(axisType, chartOrientation, axisPosition);\r\n    if (orient === 'top' || orient === 'left')\r\n        return margin.top;\r\n    else if (orient === 'bottom')\r\n        return blockHeight - margin.bottom;\r\n    else\r\n        return margin.top;\r\n}\r\nfunction getCssClasses(chartType, chartIndex) {\r\n    var cssClasses = [\"chart-\" + chartIndex];\r\n    if (chartType === 'line')\r\n        cssClasses.concat([CLASSES.line]);\r\n    if (chartType === 'bar')\r\n        cssClasses.concat([CLASSES.bar]);\r\n    if (chartType === 'area')\r\n        cssClasses.concat([CLASSES.area]);\r\n    if (chartType === 'donut')\r\n        cssClasses.concat([CLASSES.donut]);\r\n    return cssClasses;\r\n}\r\nfunction getElementColorPallete(palette, notation, index) {\r\n    if (index === void 0) { index = 0; }\r\n    if (notation === '2d')\r\n        return [palette[index % palette.length]];\r\n    else\r\n        return palette;\r\n}\r\nfunction get2DChartsModel(charts, chartPalette) {\r\n    var chartsModel = [];\r\n    charts.forEach(function (chart, index) {\r\n        chartsModel.push({\r\n            type: chart.type,\r\n            data: {\r\n                dataSource: chart.data.dataSource,\r\n                keyField: chart.data.keyField,\r\n                valueField: chart.data.valueField\r\n            },\r\n            orient: chart.orientation,\r\n            legend: chart.legend,\r\n            tooltip: chart.tooltip,\r\n            cssClasses: getCssClasses(chart.type, index),\r\n            elementColors: getElementColorPallete(chartPalette, '2d', index)\r\n        });\r\n    });\r\n    return chartsModel;\r\n}\r\nfunction getPolarChartsModel(charts, chartPalette) {\r\n    var chartsModel = [];\r\n    charts.forEach(function (chart, index) {\r\n        chartsModel.push({\r\n            type: chart.type,\r\n            data: {\r\n                dataSource: chart.data.dataSource,\r\n                keyField: chart.data.keyField,\r\n                valueField: chart.data.valueField\r\n            },\r\n            appearanceOptions: {\r\n                innerRadius: chart.appearanceOptions.innerRadius,\r\n                padAngle: chart.appearanceOptions.padAngle\r\n            },\r\n            legend: chart.legend,\r\n            tooltip: chart.tooltip,\r\n            cssClasses: getCssClasses(chart.type, index),\r\n            elementColors: getElementColorPallete(chartPalette, 'polar')\r\n        });\r\n    });\r\n    return chartsModel;\r\n}\r\nfunction getBlockCanvas() {\r\n    return {\r\n        size: {\r\n            width: _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.width,\r\n            height: _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.height\r\n        },\r\n        class: _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.class\r\n    };\r\n}\r\nfunction getChartBlock(margin) {\r\n    return {\r\n        margin: margin\r\n    };\r\n}\r\nfunction get2DOptions(configOptions, axisLabelDesignerOptions, chartPalette, margin, dataLimit) {\r\n    return {\r\n        scale: {\r\n            scaleKey: {\r\n                domain: getScaleDomain(ScaleType.Key, configOptions.axis.keyAxis.domain, data[configOptions.charts[0].data.dataSource], configOptions.charts[0], null, dataLimit),\r\n                range: {\r\n                    start: 0,\r\n                    end: getScaleRangePeek(ScaleType.Key, configOptions.charts[0].orientation, margin, _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.width, _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.height)\r\n                }\r\n            },\r\n            scaleValue: {\r\n                domain: getScaleDomain(ScaleType.Value, configOptions.axis.valueAxis.domain, data[configOptions.charts[0].data.dataSource], configOptions.charts[0], configOptions.axis.keyAxis.position),\r\n                range: {\r\n                    start: 0,\r\n                    end: getScaleRangePeek(ScaleType.Value, configOptions.charts[0].orientation, margin, _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.width, _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.height)\r\n                }\r\n            }\r\n        },\r\n        axis: {\r\n            keyAxis: {\r\n                orient: getAxisOrient(AxisType.Key, configOptions.charts[0].orientation, configOptions.axis.keyAxis.position),\r\n                translate: {\r\n                    translateX: getTranslateX(AxisType.Key, configOptions.charts[0].orientation, configOptions.axis.keyAxis.position, margin, _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.width, _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.height),\r\n                    translateY: getTranslateY(AxisType.Key, configOptions.charts[0].orientation, configOptions.axis.keyAxis.position, margin, _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.width, _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.height)\r\n                },\r\n                class: 'key-axis',\r\n                maxLabelSize: axisLabelDesignerOptions.maxSize.main\r\n            },\r\n            valueAxis: {\r\n                orient: getAxisOrient(AxisType.Value, configOptions.charts[0].orientation, configOptions.axis.valueAxis.position),\r\n                translate: {\r\n                    translateX: getTranslateX(AxisType.Value, configOptions.charts[0].orientation, configOptions.axis.valueAxis.position, margin, _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.width, _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.height),\r\n                    translateY: getTranslateY(AxisType.Value, configOptions.charts[0].orientation, configOptions.axis.valueAxis.position, margin, _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.width, _config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.canvas.size.height)\r\n                },\r\n                class: 'value-axis',\r\n                maxLabelSize: axisLabelDesignerOptions.maxSize.main\r\n            }\r\n        },\r\n        type: configOptions.type,\r\n        charts: get2DChartsModel(configOptions.charts, chartPalette)\r\n    };\r\n}\r\nfunction getPolarOptions(configOptions, chartPalette) {\r\n    return {\r\n        type: configOptions.type,\r\n        charts: getPolarChartsModel(configOptions.charts, chartPalette),\r\n    };\r\n}\r\nfunction getOptions(margin, dataLimit) {\r\n    if (_config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.options.type === '2d') {\r\n        return get2DOptions(_config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.options, _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_2__.default.canvas.axisLabel, _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_2__.default.chart.style.palette, margin, dataLimit);\r\n    }\r\n    else {\r\n        return getPolarOptions(_config_configOptions__WEBPACK_IMPORTED_MODULE_1__.default.options, _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_2__.default.chart.style.palette);\r\n    }\r\n}\r\nfunction getDataSettings(dataLimit) {\r\n    return {\r\n        limit: dataLimit\r\n    };\r\n}\r\nfunction getChartSettings() {\r\n    return {\r\n        bar: {\r\n            distance: _designer_designerConfigOptions__WEBPACK_IMPORTED_MODULE_2__.default.canvas.chartOptions.bar.barDistance\r\n        }\r\n    };\r\n}\r\nfunction assembleModel() {\r\n    var legendBlock = {\r\n        bottom: { size: 0 },\r\n        left: { size: 0 },\r\n        right: { size: 0 },\r\n        top: { size: 0 }\r\n    };\r\n    var margin = getMargin(legendBlock);\r\n    var dataLimit = calcDataLimit(margin);\r\n    var blockCanvas = getBlockCanvas();\r\n    var chartBlock = getChartBlock(margin);\r\n    var options = getOptions(margin, dataLimit);\r\n    var dataSettings = getDataSettings(dataLimit);\r\n    var chartSettings = getChartSettings();\r\n    return {\r\n        blockCanvas: blockCanvas,\r\n        chartBlock: chartBlock,\r\n        legendBlock: legendBlock,\r\n        options: options,\r\n        dataSettings: dataSettings,\r\n        chartSettings: chartSettings\r\n    };\r\n}\r\nvar model = assembleModel();\r\nfunction getUpdatedModel() {\r\n    return assembleModel();\r\n}\r\n\n\n//# sourceURL=webpack://packd3ts/./src/model/modelOptions.ts?");

/***/ }),

/***/ "./src/assets/dataSet.json":
/*!*********************************!*\
  !*** ./src/assets/dataSet.json ***!
  \*********************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse(\"{\\\"dataSet\\\":[{\\\"brand\\\":\\\"BMW\\\",\\\"price\\\":120,\\\"count\\\":12},{\\\"brand\\\":\\\"LADA\\\",\\\"price\\\":50,\\\"count\\\":10},{\\\"brand\\\":\\\"MERCEDES\\\",\\\"price\\\":15,\\\"count\\\":12},{\\\"brand\\\":\\\"AUDI\\\",\\\"price\\\":20,\\\"count\\\":5},{\\\"brand\\\":\\\"VOLKSWAGEN\\\",\\\"price\\\":40,\\\"count\\\":10},{\\\"brand\\\":\\\"DODGE\\\",\\\"price\\\":70,\\\"count\\\":4},{\\\"brand\\\":\\\"SAAB\\\",\\\"price\\\":50,\\\"count\\\":11},{\\\"brand\\\":\\\"HONDA\\\",\\\"price\\\":20,\\\"count\\\":2},{\\\"brand\\\":\\\"TOYOTA\\\",\\\"price\\\":115,\\\"count\\\":1}],\\\"dataSet2\\\":[{\\\"brand\\\":\\\"BMW\\\",\\\"price\\\":100,\\\"count\\\":5},{\\\"brand\\\":\\\"LADA\\\",\\\"price\\\":25,\\\"count\\\":2},{\\\"brand\\\":\\\"MERCEDES\\\",\\\"price\\\":28,\\\"count\\\":0},{\\\"brand\\\":\\\"AUDI\\\",\\\"price\\\":16,\\\"count\\\":4},{\\\"brand\\\":\\\"VOLKSWAGEN\\\",\\\"price\\\":85,\\\"count\\\":3},{\\\"brand\\\":\\\"DODGE\\\",\\\"price\\\":100,\\\"count\\\":4},{\\\"brand\\\":\\\"SAAB\\\",\\\"price\\\":101,\\\"count\\\":11},{\\\"brand\\\":\\\"HONDA\\\",\\\"price\\\":15,\\\"count\\\":11},{\\\"brand\\\":\\\"TOYOTA\\\",\\\"price\\\":60,\\\"count\\\":0}],\\\"dataSet_large\\\":[{\\\"brand\\\":\\\"BMW\\\",\\\"price\\\":120,\\\"count\\\":12},{\\\"brand\\\":\\\"LADA\\\",\\\"price\\\":50,\\\"count\\\":10},{\\\"brand\\\":\\\"MERCEDES\\\",\\\"price\\\":15,\\\"count\\\":12},{\\\"brand\\\":\\\"AUDI\\\",\\\"price\\\":20,\\\"count\\\":5},{\\\"brand\\\":\\\"VOLKSWAGEN\\\",\\\"price\\\":40,\\\"count\\\":10},{\\\"brand\\\":\\\"DODGE\\\",\\\"price\\\":70,\\\"count\\\":4},{\\\"brand\\\":\\\"SAAB\\\",\\\"price\\\":50,\\\"count\\\":11},{\\\"brand\\\":\\\"HONDA\\\",\\\"price\\\":20,\\\"count\\\":2},{\\\"brand\\\":\\\"TOYOTA\\\",\\\"price\\\":115,\\\"count\\\":1},{\\\"brand\\\":\\\"BMW2\\\",\\\"price\\\":120,\\\"count\\\":12},{\\\"brand\\\":\\\"LADA2\\\",\\\"price\\\":50,\\\"count\\\":10},{\\\"brand\\\":\\\"MERCEDES2\\\",\\\"price\\\":15,\\\"count\\\":12},{\\\"brand\\\":\\\"AUDI2\\\",\\\"price\\\":20,\\\"count\\\":5},{\\\"brand\\\":\\\"VOLKSWAGEN2\\\",\\\"price\\\":40,\\\"count\\\":10},{\\\"brand\\\":\\\"DODGE2\\\",\\\"price\\\":70,\\\"count\\\":4},{\\\"brand\\\":\\\"SAAB2\\\",\\\"price\\\":50,\\\"count\\\":11},{\\\"brand\\\":\\\"HONDA2\\\",\\\"price\\\":20,\\\"count\\\":2},{\\\"brand\\\":\\\"TOYOTA2\\\",\\\"price\\\":115,\\\"count\\\":1}],\\\"dataSet_large2\\\":[{\\\"brand\\\":\\\"BMW\\\",\\\"price\\\":100,\\\"count\\\":5},{\\\"brand\\\":\\\"LADA\\\",\\\"price\\\":25,\\\"count\\\":2},{\\\"brand\\\":\\\"MERCEDES\\\",\\\"price\\\":28,\\\"count\\\":0},{\\\"brand\\\":\\\"AUDI\\\",\\\"price\\\":16,\\\"count\\\":4},{\\\"brand\\\":\\\"VOLKSWAGEN\\\",\\\"price\\\":85,\\\"count\\\":3},{\\\"brand\\\":\\\"DODGE\\\",\\\"price\\\":100,\\\"count\\\":4},{\\\"brand\\\":\\\"SAAB\\\",\\\"price\\\":101,\\\"count\\\":11},{\\\"brand\\\":\\\"HONDA\\\",\\\"price\\\":15,\\\"count\\\":11},{\\\"brand\\\":\\\"TOYOTA\\\",\\\"price\\\":60,\\\"count\\\":0},{\\\"brand\\\":\\\"BMW2\\\",\\\"price\\\":100,\\\"count\\\":5},{\\\"brand\\\":\\\"LADA2\\\",\\\"price\\\":25,\\\"count\\\":2},{\\\"brand\\\":\\\"MERCEDES2\\\",\\\"price\\\":28,\\\"count\\\":0},{\\\"brand\\\":\\\"AUDI2\\\",\\\"price\\\":16,\\\"count\\\":4},{\\\"brand\\\":\\\"VOLKSWAGEN2\\\",\\\"price\\\":85,\\\"count\\\":3},{\\\"brand\\\":\\\"DODGE2\\\",\\\"price\\\":100,\\\"count\\\":4},{\\\"brand\\\":\\\"SAAB2\\\",\\\"price\\\":101,\\\"count\\\":11},{\\\"brand\\\":\\\"HONDA2\\\",\\\"price\\\":15,\\\"count\\\":11},{\\\"brand\\\":\\\"TOYOTA2\\\",\\\"price\\\":60,\\\"count\\\":0}]}\");\n\n//# sourceURL=webpack://packd3ts/./src/assets/dataSet.json?");

/***/ })

}]);