/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmdt_charts"] = self["webpackChunkmdt_charts"] || []).push([["src_engine_engine_ts"],{

/***/ "./src/designer/designerConfigExample.ts":
/*!***********************************************!*\
  !*** ./src/designer/designerConfigExample.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\nconst designerConfig = {\r\n    canvas: {\r\n        axisLabel: {\r\n            maxSize: {\r\n                orthogonal: 20,\r\n                main: 60\r\n            }\r\n        },\r\n        chartBlockMargin: {\r\n            top: 30,\r\n            bottom: 20,\r\n            left: 20,\r\n            right: 20\r\n        },\r\n        legendBlock: {\r\n            maxWidth: 200\r\n        },\r\n        chartOptions: {\r\n            bar: {\r\n                groupMinDistance: 10,\r\n                minBarWidth: 3,\r\n                maxBarWidth: 30,\r\n                barDistance: 5,\r\n                groupMaxDistance: 35\r\n            },\r\n            donut: {\r\n                minPartSize: 10,\r\n                padAngle: 0,\r\n                minThickness: 40,\r\n                maxThickness: 60\r\n            }\r\n        }\r\n    },\r\n    dataFormat: {\r\n        formatters: {\r\n            'integer': (value, options) => Intl.NumberFormat().format(value),\r\n            'decimal': (value, options) => Intl.NumberFormat().format(value),\r\n            'money': (value, options) => Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(value),\r\n            'date': (value, options) => value.getFullYear() + '-' + (value.getMonth() + 1) + '-' + value.getDate() + ' ' + value.getHours() + ':' + value.getMinutes(),\r\n            'string': (value, options) => value\r\n        }\r\n    },\r\n    chartStyle: {\r\n        baseColor: 'pink',\r\n        step: 2\r\n    },\r\n    additionalElements: {\r\n        gridLine: {\r\n            flag: {\r\n                value: true,\r\n                key: true\r\n            }\r\n        }\r\n    }\r\n};\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (designerConfig);\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/designer/designerConfigExample.ts?");

/***/ }),

/***/ "./src/engine/block/block.ts":
/*!***********************************!*\
  !*** ./src/engine/block/block.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Block\": () => /* binding */ Block\n/* harmony export */ });\n/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-selection */ \"./node_modules/d3-selection/src/select.js\");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helper */ \"./src/engine/helper.ts\");\n/* harmony import */ var _blockHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blockHelper */ \"./src/engine/block/blockHelper.ts\");\n\r\n\r\n\r\nclass Block {\r\n    constructor(cssClass, parentElement) {\r\n        this.chartBlockClass = 'chart-block';\r\n        this.wrapperCssClasses = _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getCssClassesArray(cssClass);\r\n        this.svgCssClasses = _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getCssClassesArray(cssClass);\r\n        this.wrapperCssClasses = _blockHelper__WEBPACK_IMPORTED_MODULE_1__.BlockHelper.getFormattedCssClassesForWrapper(this.wrapperCssClasses);\r\n        this.parentElement = parentElement;\r\n        this.parentElementSelection = (0,d3_selection__WEBPACK_IMPORTED_MODULE_2__.default)(parentElement);\r\n    }\r\n    renderSvg(blockSize) {\r\n        this.getWrapper()\r\n            .append('svg')\r\n            .attr('width', blockSize.width)\r\n            .attr('height', blockSize.height)\r\n            .attr('class', this.svgCssClasses.join(' '));\r\n    }\r\n    renderWrapper(blockSize) {\r\n        this.wrapper = this.parentElementSelection\r\n            .append('div')\r\n            .attr('class', this.wrapperCssClasses.join(' '))\r\n            .style('width', blockSize.width + 'px')\r\n            .style('height', blockSize.height + 'px')\r\n            .style('position', 'relative');\r\n    }\r\n    renderChartBlock() {\r\n        this.getSvg()\r\n            .append('g')\r\n            .attr('class', this.chartBlockClass);\r\n    }\r\n    getSvg() {\r\n        return this.getWrapper().select('svg');\r\n    }\r\n    getWrapper() {\r\n        return this.wrapper;\r\n    }\r\n    getChartBlock() {\r\n        return this.getSvg()\r\n            .select(`.${this.chartBlockClass}`);\r\n    }\r\n    renderClipPath(margin, blockSize) {\r\n        const attributes = _blockHelper__WEBPACK_IMPORTED_MODULE_1__.BlockHelper.getChartBlockAttributes(blockSize, margin);\r\n        this.renderDefs()\r\n            .append('clipPath')\r\n            .attr('id', `chart-block-clippath-${this.svgCssClasses.join('-')}`)\r\n            .append('rect')\r\n            .attr('x', attributes.x)\r\n            .attr('y', attributes.y)\r\n            .attr('width', attributes.width)\r\n            .attr('height', attributes.height);\r\n    }\r\n    renderDefs() {\r\n        let defs = this.getSvg()\r\n            .select('defs');\r\n        if (defs.empty())\r\n            defs = this.getSvg()\r\n                .append('defs');\r\n        return defs;\r\n    }\r\n    getClipPathId() {\r\n        return `#chart-block-clippath-${this.svgCssClasses.join('-')}`;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/block/block.ts?");

/***/ }),

/***/ "./src/engine/block/blockHelper.ts":
/*!*****************************************!*\
  !*** ./src/engine/block/blockHelper.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BlockHelper\": () => /* binding */ BlockHelper\n/* harmony export */ });\n/* harmony import */ var _valueFormatter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../valueFormatter */ \"./src/engine/valueFormatter.ts\");\n\r\nclass BlockHelper {\r\n    static getChartBlockAttributes(blockSize, margin) {\r\n        const outSize = 5.5;\r\n        return {\r\n            x: margin.left - outSize,\r\n            y: margin.top - outSize,\r\n            width: _valueFormatter__WEBPACK_IMPORTED_MODULE_0__.ValueFormatter.getValueOrZero(blockSize.width - margin.left - margin.right) + outSize * 2,\r\n            height: _valueFormatter__WEBPACK_IMPORTED_MODULE_0__.ValueFormatter.getValueOrZero(blockSize.height - margin.top - margin.bottom) + outSize * 2\r\n        };\r\n    }\r\n    static getFormattedCssClassesForWrapper(cssClasses) {\r\n        const wrapperClasses = [];\r\n        cssClasses.forEach(cssClass => {\r\n            wrapperClasses.push(cssClass + '-wrapper');\r\n        });\r\n        return wrapperClasses;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/block/blockHelper.ts?");

/***/ }),

/***/ "./src/engine/chartRenderer.ts":
/*!*************************************!*\
  !*** ./src/engine/chartRenderer.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ChartRenderer\": () => /* binding */ ChartRenderer\n/* harmony export */ });\n/* harmony import */ var _twoDimensionalNotation_area_area__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./twoDimensionalNotation/area/area */ \"./src/engine/twoDimensionalNotation/area/area.ts\");\n/* harmony import */ var _features_axis_axis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./features/axis/axis */ \"./src/engine/features/axis/axis.ts\");\n/* harmony import */ var _twoDimensionalNotation_bar_bar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./twoDimensionalNotation/bar/bar */ \"./src/engine/twoDimensionalNotation/bar/bar.ts\");\n/* harmony import */ var _polarNotation_donut__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./polarNotation/donut */ \"./src/engine/polarNotation/donut.ts\");\n/* harmony import */ var _features_gridLine_gridLine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./features/gridLine/gridLine */ \"./src/engine/features/gridLine/gridLine.ts\");\n/* harmony import */ var _features_legend_legend__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./features/legend/legend */ \"./src/engine/features/legend/legend.ts\");\n/* harmony import */ var _twoDimensionalNotation_line_line__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./twoDimensionalNotation/line/line */ \"./src/engine/twoDimensionalNotation/line/line.ts\");\n/* harmony import */ var _features_scale_scale__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./features/scale/scale */ \"./src/engine/features/scale/scale.ts\");\n/* harmony import */ var _features_tolltip_tooltip__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./features/tolltip/tooltip */ \"./src/engine/features/tolltip/tooltip.ts\");\n/* harmony import */ var _features_recordOverflowAlert_recordOverflowAlert__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./features/recordOverflowAlert/recordOverflowAlert */ \"./src/engine/features/recordOverflowAlert/recordOverflowAlert.ts\");\n/* harmony import */ var _intervalNotation_gantt__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./intervalNotation/gantt */ \"./src/engine/intervalNotation/gantt.ts\");\n/* harmony import */ var _twoDimensionalNotation_bar_barHelper__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./twoDimensionalNotation/bar/barHelper */ \"./src/engine/twoDimensionalNotation/bar/barHelper.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ChartRenderer {\r\n    static render2D(block, model, data) {\r\n        const options = model.options;\r\n        const scales = _features_scale_scale__WEBPACK_IMPORTED_MODULE_7__.Scale.getScales(options.scale.scaleKey, options.scale.scaleValue, model.chartSettings.bar);\r\n        block.renderSvg(model.blockCanvas.size);\r\n        _features_axis_axis__WEBPACK_IMPORTED_MODULE_1__.Axis.render(block, scales, options.scale, options.axis, model.chartBlock.margin, model.blockCanvas.size);\r\n        _features_gridLine_gridLine__WEBPACK_IMPORTED_MODULE_4__.GridLine.render(block, options.additionalElements.gridLine.flag, options.axis.keyAxis, options.axis.valueAxis, model.blockCanvas.size, model.chartBlock.margin, options.scale.scaleKey);\r\n        this.render2DCharts(block, options.charts, scales, data, options.data, model.chartBlock.margin, options.axis.keyAxis.orient, model.chartSettings.bar, model.blockCanvas.size);\r\n        _features_legend_legend__WEBPACK_IMPORTED_MODULE_5__.Legend.render(block, data, options, model.legendBlock, model.blockCanvas.size);\r\n        _features_tolltip_tooltip__WEBPACK_IMPORTED_MODULE_8__.Tooltip.renderTooltips(block, model, data, scales);\r\n        if (model.dataSettings.scope.hidedRecordsAmount !== 0)\r\n            _features_recordOverflowAlert_recordOverflowAlert__WEBPACK_IMPORTED_MODULE_9__.RecordOverflowAlert.render(block, model.dataSettings.scope.hidedRecordsAmount, 'top', options.orient);\r\n    }\r\n    static renderPolar(block, model, data) {\r\n        const options = model.options;\r\n        block.renderSvg(model.blockCanvas.size);\r\n        this.renderPolarCharts(block, options.charts, data, options.data.dataSource, model.chartBlock.margin, model.blockCanvas.size, model.chartSettings.donut);\r\n        _features_legend_legend__WEBPACK_IMPORTED_MODULE_5__.Legend.render(block, data, options, model.legendBlock, model.blockCanvas.size);\r\n        _features_tolltip_tooltip__WEBPACK_IMPORTED_MODULE_8__.Tooltip.renderTooltips(block, model, data);\r\n        if (model.dataSettings.scope.hidedRecordsAmount !== 0 && model.options.legend.position !== 'off')\r\n            _features_recordOverflowAlert_recordOverflowAlert__WEBPACK_IMPORTED_MODULE_9__.RecordOverflowAlert.render(block, model.dataSettings.scope.hidedRecordsAmount, model.options.legend.position);\r\n    }\r\n    static renderInterval(block, model, data) {\r\n        const options = model.options;\r\n        block.renderSvg(model.blockCanvas.size);\r\n        const scales = _features_scale_scale__WEBPACK_IMPORTED_MODULE_7__.Scale.getScales(options.scale.scaleKey, options.scale.scaleValue, model.chartSettings.bar);\r\n        _features_axis_axis__WEBPACK_IMPORTED_MODULE_1__.Axis.render(block, scales, options.scale, options.axis, model.chartBlock.margin, model.blockCanvas.size);\r\n        _features_gridLine_gridLine__WEBPACK_IMPORTED_MODULE_4__.GridLine.render(block, options.additionalElements.gridLine.flag, options.axis.keyAxis, options.axis.valueAxis, model.blockCanvas.size, model.chartBlock.margin, options.scale.scaleKey);\r\n        this.renderIntervalCharts(block, options.charts, scales, data, options.data, model.chartBlock.margin, options.axis.keyAxis.orient, model.chartSettings);\r\n        _features_legend_legend__WEBPACK_IMPORTED_MODULE_5__.Legend.render(block, data, options, model.legendBlock, model.blockCanvas.size);\r\n        _features_tolltip_tooltip__WEBPACK_IMPORTED_MODULE_8__.Tooltip.renderTooltips(block, model, data);\r\n        if (model.dataSettings.scope.hidedRecordsAmount !== 0)\r\n            _features_recordOverflowAlert_recordOverflowAlert__WEBPACK_IMPORTED_MODULE_9__.RecordOverflowAlert.render(block, model.dataSettings.scope.hidedRecordsAmount, 'top', options.orient);\r\n    }\r\n    static render2DCharts(block, charts, scales, data, dataOptions, margin, keyAxisOrient, barSettings, blockSize) {\r\n        block.renderClipPath(margin, blockSize);\r\n        block.renderChartBlock();\r\n        charts.forEach((chart) => {\r\n            if (chart.type === 'bar')\r\n                _twoDimensionalNotation_bar_bar__WEBPACK_IMPORTED_MODULE_2__.Bar.render(block, scales, data[dataOptions.dataSource], dataOptions.keyField, margin, keyAxisOrient, chart, blockSize, barSettings, _twoDimensionalNotation_bar_barHelper__WEBPACK_IMPORTED_MODULE_11__.BarHelper.getBarsInGroupAmount(charts), chart.isSegmented, charts.findIndex(ch => ch.type === 'bar'));\r\n            else if (chart.type === 'line')\r\n                _twoDimensionalNotation_line_line__WEBPACK_IMPORTED_MODULE_6__.Line.render(block, scales, data[dataOptions.dataSource], dataOptions.keyField, margin, keyAxisOrient, chart, blockSize, chart.isSegmented);\r\n            else if (chart.type === 'area')\r\n                _twoDimensionalNotation_area_area__WEBPACK_IMPORTED_MODULE_0__.Area.render(block, scales, data[dataOptions.dataSource], dataOptions.keyField, margin, keyAxisOrient, chart, blockSize, chart.isSegmented);\r\n        });\r\n    }\r\n    static renderPolarCharts(block, charts, data, dataSource, margin, blockSize, donutSettings) {\r\n        charts.forEach((chart) => {\r\n            if (chart.type === 'donut')\r\n                _polarNotation_donut__WEBPACK_IMPORTED_MODULE_3__.Donut.render(block, data[dataSource], margin, chart, blockSize, donutSettings);\r\n        });\r\n    }\r\n    static renderIntervalCharts(block, charts, scales, data, dataOptions, margin, keyAxisOrient, chartSettings) {\r\n        block.renderChartBlock();\r\n        charts.forEach(chart => {\r\n            if (chart.type === 'gantt')\r\n                _intervalNotation_gantt__WEBPACK_IMPORTED_MODULE_10__.Gantt.render(block, data[dataOptions.dataSource], dataOptions, scales, margin, keyAxisOrient, chart, chartSettings.bar);\r\n        });\r\n    }\r\n    static updateByValueAxis(block, model, data) {\r\n        const options = model.options;\r\n        const scales = _features_scale_scale__WEBPACK_IMPORTED_MODULE_7__.Scale.getScales(options.scale.scaleKey, options.scale.scaleValue, model.chartSettings.bar);\r\n        _features_axis_axis__WEBPACK_IMPORTED_MODULE_1__.Axis.updateValueAxisDomain(block, scales.scaleValue, options.scale.scaleValue, options.axis.valueAxis);\r\n        _features_gridLine_gridLine__WEBPACK_IMPORTED_MODULE_4__.GridLine.rerender(block, options.additionalElements.gridLine.flag, options.axis.keyAxis, options.axis.valueAxis, model.blockCanvas.size, model.chartBlock.margin, options.scale.scaleKey);\r\n        this.updateChartsByValueAxis(block, options.charts, scales, data, model.options.data, model.chartBlock.margin, options.axis.keyAxis.orient, model.blockCanvas.size);\r\n    }\r\n    static updateChartsByValueAxis(block, charts, scales, data, dataOptions, margin, keyAxisOrient, blockSize) {\r\n        charts.forEach((chart) => {\r\n            if (chart.type === 'bar') {\r\n                _twoDimensionalNotation_bar_bar__WEBPACK_IMPORTED_MODULE_2__.Bar.updateBarChartByValueAxis(block, scales, margin, keyAxisOrient, chart, blockSize, chart.isSegmented);\r\n            }\r\n            else if (chart.type === 'line') {\r\n                _twoDimensionalNotation_line_line__WEBPACK_IMPORTED_MODULE_6__.Line.updateLineChartByValueAxis(block, scales, data[dataOptions.dataSource], dataOptions.keyField, margin, keyAxisOrient, chart);\r\n            }\r\n            else if (chart.type === 'area') {\r\n                _twoDimensionalNotation_area_area__WEBPACK_IMPORTED_MODULE_0__.Area.updateAreaChartByValueAxis(block, scales, data[dataOptions.dataSource], dataOptions.keyField, margin, chart, keyAxisOrient, blockSize, chart.isSegmented);\r\n            }\r\n        });\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/chartRenderer.ts?");

/***/ }),

/***/ "./src/engine/engine.ts":
/*!******************************!*\
  !*** ./src/engine/engine.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Engine\n/* harmony export */ });\n/* harmony import */ var _block_block__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./block/block */ \"./src/engine/block/block.ts\");\n/* harmony import */ var _valueFormatter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./valueFormatter */ \"./src/engine/valueFormatter.ts\");\n/* harmony import */ var _chartRenderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chartRenderer */ \"./src/engine/chartRenderer.ts\");\n\r\n\r\n\r\nclass Engine {\r\n    render(model, data, parentElement) {\r\n        this.block = new _block_block__WEBPACK_IMPORTED_MODULE_0__.Block(model.blockCanvas.cssClass, parentElement);\r\n        this.block.renderWrapper(model.blockCanvas.size);\r\n        _valueFormatter__WEBPACK_IMPORTED_MODULE_1__.ValueFormatter.setFormatFunction(model.dataFormat.formatters);\r\n        if (model.options)\r\n            this.renderCharts(model, data);\r\n    }\r\n    updateData(newModel, newData) {\r\n        this.block.getSvg().remove();\r\n        this.renderCharts(newModel, newData);\r\n    }\r\n    updateFullBlock(model, data) {\r\n        this.destroy();\r\n        this.render(model, data, this.block.parentElement);\r\n    }\r\n    updateValueAxis(model, data) {\r\n        _chartRenderer__WEBPACK_IMPORTED_MODULE_2__.ChartRenderer.updateByValueAxis(this.block, model, data);\r\n    }\r\n    destroy() {\r\n        this.block.getWrapper().remove();\r\n    }\r\n    renderCharts(model, data) {\r\n        if (model.options.type === '2d')\r\n            _chartRenderer__WEBPACK_IMPORTED_MODULE_2__.ChartRenderer.render2D(this.block, model, data);\r\n        else if (model.options.type === 'polar')\r\n            _chartRenderer__WEBPACK_IMPORTED_MODULE_2__.ChartRenderer.renderPolar(this.block, model, data);\r\n        else if (model.options.type === 'interval')\r\n            _chartRenderer__WEBPACK_IMPORTED_MODULE_2__.ChartRenderer.renderInterval(this.block, model, data);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/engine.ts?");

/***/ }),

/***/ "./src/engine/features/axis/axis.ts":
/*!******************************************!*\
  !*** ./src/engine/features/axis/axis.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Axis\": () => /* binding */ Axis\n/* harmony export */ });\n/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! d3-selection */ \"./node_modules/d3-selection/src/select.js\");\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-array */ \"./node_modules/d3-array/src/max.js\");\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! d3-array */ \"./node_modules/d3-array/src/min.js\");\n/* harmony import */ var d3_format__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! d3-format */ \"./node_modules/d3-format/src/defaultLocale.js\");\n/* harmony import */ var d3_axis__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! d3-axis */ \"./node_modules/d3-axis/src/axis.js\");\n/* harmony import */ var d3_transition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-transition */ \"./node_modules/d3-transition/src/index.js\");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../helper */ \"./src/engine/helper.ts\");\n/* harmony import */ var _scale_scale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scale/scale */ \"./src/engine/features/scale/scale.ts\");\n/* harmony import */ var _model_marginModel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../model/marginModel */ \"./src/model/marginModel.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nd3_selection__WEBPACK_IMPORTED_MODULE_4__.default.prototype.transition = d3_transition__WEBPACK_IMPORTED_MODULE_0__.transition;\r\nconst MINIMAL_STEP_SIZE = 40;\r\nclass Axis {\r\n    static render(block, scales, scaleModel, axisModel, margin, blockSize) {\r\n        this.renderAxis(block, scales.scaleValue, scaleModel.scaleValue, axisModel.valueAxis, margin, blockSize);\r\n        this.renderAxis(block, scales.scaleKey, scaleModel.scaleKey, axisModel.keyAxis, margin, blockSize);\r\n    }\r\n    static updateValueAxisDomain(block, scaleValue, scaleOptions, axisOptions) {\r\n        const axis = this.getAxisByOrient(axisOptions.orient, scaleValue);\r\n        this.setAxisFormat(scaleValue, scaleOptions, axis);\r\n        if (!axisOptions.ticks.flag)\r\n            this.removeTicks(axis);\r\n        this.setAxisLabelPaddingByOrient(axis, axisOptions);\r\n        block.getSvg()\r\n            .select(`g.${axisOptions.cssClass}`)\r\n            .transition()\r\n            .duration(1000)\r\n            .call(axis.bind(this));\r\n    }\r\n    static renderAxis(block, scale, scaleOptions, axisOptions, margin, blockSize) {\r\n        const axis = this.getAxisByOrient(axisOptions.orient, scale);\r\n        this.setAxisFormat(scale, scaleOptions, axis);\r\n        if (!axisOptions.ticks.flag)\r\n            this.removeTicks(axis);\r\n        if (axisOptions.type === 'value')\r\n            this.setStepSize(blockSize, margin, axis, axisOptions, scaleOptions);\r\n        this.setAxisLabelPaddingByOrient(axis, axisOptions);\r\n        const axisElement = block.getSvg()\r\n            .append('g')\r\n            .attr('transform', `translate(${axisOptions.translate.translateX}, ${axisOptions.translate.translateY})`)\r\n            .attr('class', `axis ${axisOptions.cssClass} data-label`)\r\n            .call(axis);\r\n        if (axisOptions.labels.visible) {\r\n            if (axisOptions.orient === 'bottom' && axisOptions.type === 'key' && axisOptions.labels.positition === 'rotated')\r\n                this.rotateLabels(axisElement);\r\n            if ((axisOptions.orient === 'left' || axisOptions.orient === 'right') && axisOptions.type === 'key' && _scale_scale__WEBPACK_IMPORTED_MODULE_2__.Scale.getScaleStep(scale) >= 38) {\r\n                axisElement.selectAll('.tick text').call(this.wrap, axisOptions.labels.maxSize);\r\n            }\r\n            else {\r\n                this.cropLabels(block, scale, scaleOptions, axisOptions, blockSize);\r\n            }\r\n            if (axisOptions.type === 'key') {\r\n                if (axisOptions.orient === 'left')\r\n                    this.alignLabels(axisElement, 'start', axisOptions.labels.maxSize, true);\r\n                else if (axisOptions.orient === 'right')\r\n                    this.alignLabels(axisElement, 'start', axisOptions.labels.maxSize, false);\r\n            }\r\n        }\r\n        else {\r\n            this.hideLabels(axisElement);\r\n        }\r\n    }\r\n    static setStepSize(blockSize, margin, axis, axisOptions, scale) {\r\n        let axisLength = blockSize.width - margin.left - margin.right;\r\n        if (axisOptions.orient === 'left' || axisOptions.orient === 'right') {\r\n            axisLength = blockSize.height - margin.top - margin.bottom;\r\n        }\r\n        if (axisLength / 10 < MINIMAL_STEP_SIZE) {\r\n            if (Math.floor(axisLength / MINIMAL_STEP_SIZE) > 2)\r\n                axis.ticks(Math.floor(axisLength / MINIMAL_STEP_SIZE));\r\n            else\r\n                axis.tickValues([(0,d3_array__WEBPACK_IMPORTED_MODULE_5__.default)(scale.domain), (0,d3_array__WEBPACK_IMPORTED_MODULE_6__.default)(scale.domain)]);\r\n        }\r\n    }\r\n    static alignLabels(axisElement, anchor, maxLabelSize, changeCoordinate) {\r\n        const axisTextBlocks = axisElement.selectAll('text');\r\n        const spans = axisElement.selectAll('tspan');\r\n        axisTextBlocks.attr('text-anchor', anchor);\r\n        spans.attr('text-anchor', anchor);\r\n        if (changeCoordinate) {\r\n            axisTextBlocks.attr('x', -(maxLabelSize + _model_marginModel__WEBPACK_IMPORTED_MODULE_3__.AXIS_VERTICAL_LABEL_PADDING));\r\n            spans.attr('x', -(maxLabelSize + _model_marginModel__WEBPACK_IMPORTED_MODULE_3__.AXIS_VERTICAL_LABEL_PADDING));\r\n        }\r\n        else {\r\n            spans.attr('x', _model_marginModel__WEBPACK_IMPORTED_MODULE_3__.AXIS_VERTICAL_LABEL_PADDING);\r\n        }\r\n    }\r\n    static setAxisLabelPaddingByOrient(axis, axisOptions) {\r\n        let axisLabelPadding = _model_marginModel__WEBPACK_IMPORTED_MODULE_3__.AXIS_HORIZONTAL_LABEL_PADDING;\r\n        if (axisOptions.orient === 'left' || axisOptions.orient === 'right')\r\n            axisLabelPadding = _model_marginModel__WEBPACK_IMPORTED_MODULE_3__.AXIS_VERTICAL_LABEL_PADDING;\r\n        axis.tickPadding(axisLabelPadding);\r\n    }\r\n    static rotateLabels(axisElement) {\r\n        const labelBlocks = axisElement.selectAll('text');\r\n        labelBlocks.attr('text-anchor', 'end');\r\n        labelBlocks\r\n            .attr('x', -_model_marginModel__WEBPACK_IMPORTED_MODULE_3__.AXIS_HORIZONTAL_LABEL_PADDING)\r\n            .attr('y', -4)\r\n            .attr('transform', 'rotate(-90)');\r\n    }\r\n    static removeTicks(axis) {\r\n        axis.tickSize(0);\r\n    }\r\n    static getAxisByOrient(orient, scale) {\r\n        if (orient === 'top')\r\n            return (0,d3_axis__WEBPACK_IMPORTED_MODULE_7__.axisTop)(scale);\r\n        if (orient === 'bottom')\r\n            return (0,d3_axis__WEBPACK_IMPORTED_MODULE_7__.axisBottom)(scale);\r\n        if (orient === 'left')\r\n            return (0,d3_axis__WEBPACK_IMPORTED_MODULE_7__.axisLeft)(scale);\r\n        if (orient === 'right')\r\n            return (0,d3_axis__WEBPACK_IMPORTED_MODULE_7__.axisRight)(scale);\r\n    }\r\n    static setAxisFormat(scale, scaleOptions, axis) {\r\n        if (scaleOptions.type === 'linear') {\r\n            if ((0,d3_array__WEBPACK_IMPORTED_MODULE_5__.default)(scale.domain()) > 1000) {\r\n                axis.tickFormat((0,d3_format__WEBPACK_IMPORTED_MODULE_8__.format)('.2s')); // examples: 1.2K, 350, 0 \r\n            }\r\n        }\r\n    }\r\n    static cropLabels(block, scale, scaleOptions, axisOptions, blockSize) {\r\n        if (scaleOptions.type === 'point' || scaleOptions.type === 'band') {\r\n            const axisTextBlocks = block.getSvg().select(`.${axisOptions.cssClass}`).selectAll('text');\r\n            let labelSize;\r\n            if ((axisOptions.orient === 'left' || axisOptions.orient === 'right') || (axisOptions.type === 'key' && axisOptions.labels.positition === 'rotated'))\r\n                labelSize = axisOptions.labels.maxSize;\r\n            else\r\n                labelSize = scale.step();\r\n            _helper__WEBPACK_IMPORTED_MODULE_1__.Helper.cropLabels(axisTextBlocks, labelSize);\r\n            if (scaleOptions.type === 'point' && axisOptions.labels.positition === 'straight' && (axisOptions.orient === 'top' || axisOptions.orient === 'bottom')) {\r\n                this.cropAndAlignExtremeLabels(block, labelSize, axisOptions, blockSize);\r\n            }\r\n        }\r\n    }\r\n    static cropAndAlignExtremeLabels(block, labelSize, axisOptions, blockSize) {\r\n        const lastTick = block.getSvg().select(`.${axisOptions.cssClass}`).select('.tick:last-of-type');\r\n        const lastLabel = lastTick.select('text');\r\n        const translateX = _helper__WEBPACK_IMPORTED_MODULE_1__.Helper.getTranslateNumbers(lastTick.attr('transform'))[0];\r\n        if (translateX + lastLabel.node().getBBox().width + axisOptions.translate.translateX > blockSize.width) {\r\n            lastLabel.attr('text-anchor', 'end');\r\n            _helper__WEBPACK_IMPORTED_MODULE_1__.Helper.cropLabels(lastLabel, labelSize / 2);\r\n        }\r\n        const firtsLabel = block.getSvg()\r\n            .select(`.${axisOptions.cssClass}`)\r\n            .select('.tick:first-of-type')\r\n            .select('text');\r\n        if (axisOptions.translate.translateX - firtsLabel.node().getBBox().width < 0) {\r\n            firtsLabel.attr('text-anchor', 'start');\r\n            _helper__WEBPACK_IMPORTED_MODULE_1__.Helper.cropLabels(firtsLabel, labelSize / 2);\r\n        }\r\n    }\r\n    static hideLabels(axisElement) {\r\n        axisElement.selectAll('.tick text')\r\n            .style('display', 'none');\r\n    }\r\n    static wrap(textBlocks, maxWidth) {\r\n        textBlocks.each(function () {\r\n            let textBlock = (0,d3_selection__WEBPACK_IMPORTED_MODULE_4__.default)(this);\r\n            if (textBlock.node().getBBox().width > maxWidth) {\r\n                let letters = textBlock.text().split('').reverse(), // split text to letters.\r\n                letter, line = [], // one line. letters from this var into tpsans.\r\n                lineNumber = 0, y = textBlock.attr(\"y\"), dy = 1.4, tspan = textBlock.text(null).append(\"tspan\").attr(\"y\", y).attr(\"dy\", dy + \"em\");\r\n                while (letter = letters.pop()) {\r\n                    line.push(letter);\r\n                    tspan.text(line.join(''));\r\n                    if (tspan.node().getComputedTextLength() > maxWidth && line.length > 1 && letters.length > 0) {\r\n                        line.pop();\r\n                        tspan.text(line.join(''));\r\n                        if (lineNumber === 0 && line[line.length - 1] !== ' ')\r\n                            tspan.text(tspan.text() + '-');\r\n                        line = [letter];\r\n                        if (lineNumber >= 1) { // If text block has 2 lines, text cropped.\r\n                            if (letters.length > 0)\r\n                                tspan.text(tspan.text().substr(0, tspan.text().length - 1) + '...');\r\n                            break;\r\n                        }\r\n                        tspan = textBlock.append(\"tspan\").attr(\"y\", y).attr(\"dy\", dy * lineNumber + 1 + \"em\").text(letter);\r\n                        lineNumber++;\r\n                    }\r\n                }\r\n                if (!textBlock.selectAll('tspan').empty()) {\r\n                    textBlock.attr('y', -(textBlock.node().getBBox().height / 2 + 4.8));\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/features/axis/axis.ts?");

/***/ }),

/***/ "./src/engine/features/embeddedLabels/embeddedLabels.ts":
/*!**************************************************************!*\
  !*** ./src/engine/features/embeddedLabels/embeddedLabels.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EmbeddedLabels\": () => /* binding */ EmbeddedLabels\n/* harmony export */ });\n/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-selection */ \"./node_modules/d3-selection/src/select.js\");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../helper */ \"./src/engine/helper.ts\");\n/* harmony import */ var _valueFormatter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../valueFormatter */ \"./src/engine/valueFormatter.ts\");\n/* harmony import */ var _embeddedLabelsHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./embeddedLabelsHelper */ \"./src/engine/features/embeddedLabels/embeddedLabelsHelper.ts\");\n\r\n\r\n\r\n\r\nclass EmbeddedLabels {\r\n    static render(block, bars, field, type, keyAxisOrient, blockSize, margin) {\r\n        const thisClass = this;\r\n        bars.each(function (d) {\r\n            thisClass.renderOneLabel(block, (0,d3_selection__WEBPACK_IMPORTED_MODULE_3__.default)(this), d, field, type, keyAxisOrient, blockSize, margin);\r\n        });\r\n    }\r\n    static renderOneLabel(block, bar, dataRow, field, type, keyAxisOrient, blockSize, margin) {\r\n        const labelBlock = block.getChartBlock()\r\n            .append('text')\r\n            .attr('class', 'embedded-label')\r\n            .style('pointer-events', 'none')\r\n            .text(_valueFormatter__WEBPACK_IMPORTED_MODULE_1__.ValueFormatter.formatValue(field.format, dataRow[field.name]));\r\n        const barAttrs = {\r\n            x: _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getSelectionNumericAttr(bar, 'x'),\r\n            y: _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getSelectionNumericAttr(bar, 'y'),\r\n            width: _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getSelectionNumericAttr(bar, 'width'),\r\n            height: _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getSelectionNumericAttr(bar, 'height')\r\n        };\r\n        const labelUnserveFlag = _embeddedLabelsHelper__WEBPACK_IMPORTED_MODULE_2__.EmbeddedLabelsHelper.getLabelUnserveFlag(barAttrs.height); // if bar is too small to serve label inside. This flag is needed for set outside postion and change text anchor if bar wide as whole chart block\r\n        const position = _embeddedLabelsHelper__WEBPACK_IMPORTED_MODULE_2__.EmbeddedLabelsHelper.getLabelPosition(barAttrs, labelBlock.node().getBBox().width, margin, blockSize, labelUnserveFlag);\r\n        const attrs = _embeddedLabelsHelper__WEBPACK_IMPORTED_MODULE_2__.EmbeddedLabelsHelper.getLabelAttrs(barAttrs, type, position, keyAxisOrient);\r\n        labelBlock\r\n            .attr('x', attrs.x)\r\n            .attr('y', attrs.y)\r\n            .attr('text-anchor', attrs.textAnchor)\r\n            .attr('dominant-baseline', 'middle');\r\n        if (position === 'inside')\r\n            labelBlock.style('fill', '#FFFFFF');\r\n        this.checkLabelsToResetTextAnchor(labelBlock, labelUnserveFlag, margin, blockSize);\r\n        this.cropText(labelBlock, barAttrs, position, labelUnserveFlag, margin, blockSize);\r\n    }\r\n    static checkLabelsToResetTextAnchor(labelBlock, labelUnserveFlag, margin, blockSize) {\r\n        if (_helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getSelectionNumericAttr(labelBlock, 'x') + labelBlock.node().getBBox().width > blockSize.width - margin.right && labelUnserveFlag) {\r\n            labelBlock.attr('x', blockSize.width - margin.right);\r\n            labelBlock.attr('text-anchor', 'end');\r\n        }\r\n    }\r\n    static cropText(labelBlock, barAttrs, position, labelUnserveFlag, margin, blockSize) {\r\n        let labelTextSpace;\r\n        if (labelUnserveFlag)\r\n            labelTextSpace = blockSize.width - margin.left - margin.right;\r\n        else\r\n            labelTextSpace = _embeddedLabelsHelper__WEBPACK_IMPORTED_MODULE_2__.EmbeddedLabelsHelper.getSpaceSizeForType(position, barAttrs.width, margin, blockSize);\r\n        _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.cropLabels(labelBlock, labelTextSpace);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/features/embeddedLabels/embeddedLabels.ts?");

/***/ }),

/***/ "./src/engine/features/embeddedLabels/embeddedLabelsHelper.ts":
/*!********************************************************************!*\
  !*** ./src/engine/features/embeddedLabels/embeddedLabelsHelper.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LABEL_BAR_PADDING\": () => /* binding */ LABEL_BAR_PADDING,\n/* harmony export */   \"EmbeddedLabelsHelper\": () => /* binding */ EmbeddedLabelsHelper\n/* harmony export */ });\nconst LABEL_BAR_PADDING = 6;\r\nconst MIN_BAR_HEIGHT_FOR_LABEL_SERVE = 12;\r\nclass EmbeddedLabelsHelper {\r\n    static getLabelPosition(barAttrs, labelBlockWidth, margin, blockSize, labelUnserveFlag) {\r\n        if (labelUnserveFlag || this.getSpaceSizeForType('inside', barAttrs.width, margin, blockSize) < labelBlockWidth\r\n            && this.getSpaceSizeForType('inside', barAttrs.width, margin, blockSize) < this.getSpaceSizeForType('outside', barAttrs.width, margin, blockSize))\r\n            return 'outside';\r\n        return 'inside';\r\n    }\r\n    static getSpaceSizeForType(position, barWidth, margin, blockSize) {\r\n        if (position === 'outside')\r\n            return blockSize.width - margin.left - margin.right - barWidth - LABEL_BAR_PADDING;\r\n        return barWidth - LABEL_BAR_PADDING * 2;\r\n    }\r\n    static getLabelAttrs(barAttrs, type, position, keyAxisOrient) {\r\n        return {\r\n            x: this.getLabelAttrX(barAttrs, type, position, keyAxisOrient),\r\n            y: this.getLabelAttrY(barAttrs.y, barAttrs.height),\r\n            textAnchor: this.getTextAnchor(type, position, keyAxisOrient)\r\n        };\r\n    }\r\n    static getLabelField(type, valueFields, keyField, index) {\r\n        if (type === 'key')\r\n            return keyField;\r\n        else if (type === 'value')\r\n            return valueFields[index];\r\n        return null;\r\n    }\r\n    static getLabelUnserveFlag(barHeight) {\r\n        return barHeight < MIN_BAR_HEIGHT_FOR_LABEL_SERVE;\r\n    }\r\n    static getLabelAttrX(barAttrs, type, position, keyAxisOrient) {\r\n        if (keyAxisOrient === 'left') {\r\n            if (position === 'outside')\r\n                return barAttrs.x + barAttrs.width + LABEL_BAR_PADDING;\r\n            if (type === 'key')\r\n                return barAttrs.x + LABEL_BAR_PADDING;\r\n            return barAttrs.x + barAttrs.width - LABEL_BAR_PADDING;\r\n        }\r\n        if (position === 'outside')\r\n            return barAttrs.x - LABEL_BAR_PADDING;\r\n        if (type === 'key')\r\n            return barAttrs.x + barAttrs.width - LABEL_BAR_PADDING;\r\n        return barAttrs.x + LABEL_BAR_PADDING;\r\n    }\r\n    static getLabelAttrY(barY, barHeight) {\r\n        return barY + barHeight / 2 + 1;\r\n    }\r\n    static getTextAnchor(type, position, keyAxisOrient) {\r\n        if (keyAxisOrient === 'left') {\r\n            if (position === 'outside' || type === 'key')\r\n                return 'start';\r\n            return 'end';\r\n        }\r\n        if (position === 'outside' || type === 'key')\r\n            return 'end';\r\n        return 'start';\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/features/embeddedLabels/embeddedLabelsHelper.ts?");

/***/ }),

/***/ "./src/engine/features/gridLine/gridLine.ts":
/*!**************************************************!*\
  !*** ./src/engine/features/gridLine/gridLine.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GridLine\": () => /* binding */ GridLine\n/* harmony export */ });\nclass GridLine {\r\n    static render(block, gridLineFlag, keyAxis, valueAxis, blockSize, margin, scaleKey) {\r\n        if (gridLineFlag.value) {\r\n            const lineLength = this.getGridLineLength('value', keyAxis, valueAxis, blockSize, margin);\r\n            const lineAttributes = this.getLineAttributes(valueAxis, lineLength);\r\n            this.renderLine(block, valueAxis, lineAttributes);\r\n        }\r\n        if (gridLineFlag.key) {\r\n            const lineLength = this.getGridLineLength('key', keyAxis, valueAxis, blockSize, margin);\r\n            const lineAttributes = this.getLineAttributes(keyAxis, lineLength);\r\n            this.renderLine(block, keyAxis, lineAttributes);\r\n        }\r\n        if (scaleKey.type === 'point' && (gridLineFlag.key || gridLineFlag.value))\r\n            this.removeGridLinesOnAxes(block, keyAxis, valueAxis, false);\r\n        else if (gridLineFlag.key || gridLineFlag.value)\r\n            this.removeGridLinesOnAxes(block, keyAxis, valueAxis, true);\r\n    }\r\n    static rerender(block, gridLineFlag, keyAxis, valueAxis, blockSize, margin, scaleKey) {\r\n        this.clear(block, keyAxis.cssClass, valueAxis.cssClass);\r\n        this.render(block, gridLineFlag, keyAxis, valueAxis, blockSize, margin, scaleKey);\r\n    }\r\n    static renderLine(block, axis, lineAttributes) {\r\n        block\r\n            .getSvg()\r\n            .selectAll(`.${axis.cssClass}`)\r\n            .selectAll('g.tick')\r\n            .append('line')\r\n            .attr('class', this.gridLineClass)\r\n            .attr('x1', lineAttributes.x1)\r\n            .attr('y1', lineAttributes.y1)\r\n            .attr('x2', lineAttributes.x2)\r\n            .attr('y2', lineAttributes.y2);\r\n        // .attr('shape-rendering', 'crispEdges');\r\n    }\r\n    static getLineAttributes(axis, lineLength) {\r\n        const attributes = {\r\n            x1: 0,\r\n            y1: 0,\r\n            x2: 0,\r\n            y2: 0\r\n        };\r\n        if (axis.orient === 'left' || axis.orient === 'right')\r\n            attributes.x2 = lineLength;\r\n        else\r\n            attributes.y2 = lineLength;\r\n        return attributes;\r\n    }\r\n    static clear(block, keyAxisClass, valueAxisClass) {\r\n        block.getSvg()\r\n            .select(`.${keyAxisClass}, .${valueAxisClass}`)\r\n            .selectAll('g.tick')\r\n            .selectAll(`.${this.gridLineClass}`)\r\n            .remove();\r\n    }\r\n    static getGridLineLength(gridLineType, keyAxis, valueAxis, blockSize, margin) {\r\n        let axis;\r\n        let axisLength;\r\n        if (gridLineType === 'key')\r\n            axis = keyAxis;\r\n        else\r\n            axis = valueAxis;\r\n        if (axis.orient === 'left' || axis.orient === 'right')\r\n            axisLength = blockSize.width - margin.left - margin.right;\r\n        else\r\n            axisLength = blockSize.height - margin.top - margin.bottom;\r\n        if (axis.orient === 'right' || axis.orient === 'bottom')\r\n            axisLength = -axisLength;\r\n        return axisLength;\r\n    }\r\n    static removeGridLinesOnAxes(block, keyAxis, valueAxis, excludeKey) {\r\n        let tickOnKeyAxisSelector = '';\r\n        let tickOnValueAxisSelector = '';\r\n        if (valueAxis.orient === 'right' || valueAxis.orient === 'bottom')\r\n            tickOnValueAxisSelector = ':last-of-type';\r\n        if (keyAxis.orient === 'bottom' || keyAxis.orient === 'right')\r\n            tickOnKeyAxisSelector = ':last-of-type';\r\n        block.getSvg()\r\n            .select(`.${valueAxis.cssClass}`)\r\n            .select(`g.tick${tickOnKeyAxisSelector}`)\r\n            .select(`.${this.gridLineClass}`)\r\n            .remove();\r\n        if (!excludeKey)\r\n            block.getSvg()\r\n                .select(`.${keyAxis.cssClass}`)\r\n                .select(`g.tick${tickOnValueAxisSelector}`)\r\n                .select(`.${this.gridLineClass}`)\r\n                .remove();\r\n    }\r\n}\r\nGridLine.gridLineClass = 'grid-line';\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/features/gridLine/gridLine.ts?");

/***/ }),

/***/ "./src/engine/features/legend/legend.ts":
/*!**********************************************!*\
  !*** ./src/engine/features/legend/legend.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Legend\": () => /* binding */ Legend\n/* harmony export */ });\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../helper */ \"./src/engine/helper.ts\");\n\r\nclass Legend {\r\n    static render(block, data, options, legendBlockModel, blockSize) {\r\n        if (options.legend.position !== 'off') {\r\n            const legendItemsContent = this.getLegendItemsContent(options, data);\r\n            const chartElementsColor = this.getMarksColor(options);\r\n            const legendItemsDirection = this.getLegendItemsDirection(options.type, options.legend.position);\r\n            this.renderLegendBlock(block, legendItemsContent, options.legend.position, legendBlockModel, chartElementsColor, blockSize, legendItemsDirection);\r\n        }\r\n    }\r\n    static renderLegendBlock(block, items, legendPosition, legendBlockModel, colorPalette, blockSize, itemsDirection) {\r\n        const legendBlock = block.getSvg()\r\n            .append('foreignObject')\r\n            .attr('class', 'legend-object');\r\n        const legendCoordinate = this.getLegendCoordinateByPosition(legendPosition, legendBlockModel, blockSize);\r\n        this.fillLegendCoordinate(legendBlock, legendCoordinate);\r\n        this.renderLegendContent(legendBlock, items, colorPalette, itemsDirection, legendPosition);\r\n    }\r\n    static getLegendItemsContent(options, data) {\r\n        if (options.type === '2d') {\r\n            let texts = [];\r\n            options.charts.forEach(chart => {\r\n                texts = texts.concat(chart.data.valueFields.map(field => field.title));\r\n            });\r\n            return texts;\r\n        }\r\n        else if (options.type === 'polar') {\r\n            return data[options.data.dataSource].map((record) => record[options.data.keyField.name]);\r\n        }\r\n        else if (options.type === 'interval') {\r\n            return options.charts.map(chart => chart.title);\r\n        }\r\n    }\r\n    static getMarksColor(options) {\r\n        if (options.type === '2d') {\r\n            let colors = [];\r\n            options.charts.forEach(chart => {\r\n                colors = colors.concat(chart.style.elementColors);\r\n            });\r\n            return colors;\r\n        }\r\n        else if (options.type === 'polar') {\r\n            return options.charts.map(chart => chart.style.elementColors)[0];\r\n        }\r\n        else if (options.type === 'interval') {\r\n            return options.charts.map(chart => chart.style.elementColors[0]);\r\n        }\r\n    }\r\n    static getLegendCoordinateByPosition(legendPosition, legendBlockModel, blockSize) {\r\n        const legendModel = legendBlockModel[legendPosition];\r\n        const coordinate = {\r\n            x: 0,\r\n            y: 0,\r\n            width: 0,\r\n            height: 0\r\n        };\r\n        if (legendPosition === 'left' || legendPosition === 'right') {\r\n            coordinate.y = legendModel.margin.top;\r\n            coordinate.width = legendModel.size;\r\n            coordinate.height = blockSize.height - legendModel.margin.top - legendModel.margin.bottom;\r\n        }\r\n        else if (legendPosition === 'bottom' || legendPosition === 'top') {\r\n            coordinate.x = legendModel.margin.left;\r\n            coordinate.width = blockSize.width - legendModel.margin.left - legendModel.margin.right;\r\n            coordinate.height = legendModel.size;\r\n        }\r\n        if (legendPosition === 'left')\r\n            coordinate.x = legendModel.margin.left;\r\n        else if (legendPosition === 'right')\r\n            coordinate.x = blockSize.width - legendModel.size - legendModel.margin.right;\r\n        else if (legendPosition === 'top')\r\n            coordinate.y = legendModel.margin.top;\r\n        else if (legendPosition === 'bottom')\r\n            coordinate.y = blockSize.height - legendModel.size - legendModel.margin.bottom;\r\n        return coordinate;\r\n    }\r\n    static fillLegendCoordinate(legendBlock, coordinate) {\r\n        legendBlock\r\n            .attr('x', coordinate.x)\r\n            .attr('y', coordinate.y)\r\n            .attr('width', coordinate.width)\r\n            .attr('height', coordinate.height);\r\n    }\r\n    static renderLegendContent(legendBlock, items, colorPalette, itemsDirection, position) {\r\n        const wrapper = legendBlock.append('xhtml:div')\r\n            .attr('class', 'legend-block');\r\n        wrapper\r\n            .style('height', '100%')\r\n            .style('display', 'flex');\r\n        if (itemsDirection === 'column') {\r\n            wrapper.style('flex-direction', 'column');\r\n        }\r\n        const itemWrappers = wrapper\r\n            .selectAll('.legend-item')\r\n            .data(items)\r\n            .enter()\r\n            .append('div')\r\n            .attr('class', this.getItemClasses(itemsDirection, position));\r\n        itemWrappers\r\n            .append('span')\r\n            .attr('class', 'legend-circle')\r\n            .style('background-color', (d, i) => colorPalette[i % colorPalette.length].toString());\r\n        itemWrappers\r\n            .data(items)\r\n            .append('span')\r\n            .attr('class', this.getLegendLabelClassByPosition(position))\r\n            .text(d => d.toString());\r\n        if (itemsDirection === 'column' && position === 'bottom')\r\n            this.cropColumnLabels(legendBlock, itemWrappers, itemsDirection);\r\n        if (itemsDirection === 'row')\r\n            this.cropRowLabels(legendBlock, itemWrappers);\r\n    }\r\n    static cropRowLabels(legendBlock, items) {\r\n        const maxWidth = legendBlock.node().getBoundingClientRect().width;\r\n        let sumOfItemsWidth = this.getSumOfItemsWidths(items);\r\n        const maxItemWidth = this.getMaxItemWidth(legendBlock, items, 'row');\r\n        let index = 0;\r\n        let loopFlag = true; // if at least one label has no text, loop ends\r\n        while (sumOfItemsWidth > maxWidth && loopFlag) {\r\n            items.nodes().forEach(node => {\r\n                const textBlock = node.querySelector('.legend-label');\r\n                if (node.getBoundingClientRect().width > maxItemWidth && textBlock.textContent) {\r\n                    let labelText = index > 0\r\n                        ? textBlock.textContent.substr(0, textBlock.textContent.length - 3)\r\n                        : textBlock.textContent;\r\n                    labelText = labelText.substr(0, labelText.length - 1);\r\n                    textBlock.textContent = labelText + '...';\r\n                    sumOfItemsWidth = this.getSumOfItemsWidths(items);\r\n                    if (labelText.length === 0) {\r\n                        textBlock.textContent = '';\r\n                        loopFlag = false;\r\n                    }\r\n                }\r\n            });\r\n            index++;\r\n        }\r\n    }\r\n    static cropColumnLabels(legendBlock, items, itemsDirection) {\r\n        const maxItemWidth = this.getMaxItemWidth(legendBlock, items, itemsDirection);\r\n        items.nodes().forEach(node => {\r\n            if (node.getBoundingClientRect().width > maxItemWidth) {\r\n                const text = node.querySelector('.legend-label');\r\n                let labelText = text.textContent;\r\n                while (node.getBoundingClientRect().width > maxItemWidth && labelText.length > 3) {\r\n                    labelText = labelText.substr(0, labelText.length - 1);\r\n                    text.textContent = labelText + '...';\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static getMaxItemWidth(legendBlock, items, itemsDirection) {\r\n        if (itemsDirection === 'row') {\r\n            const margins = items.nodes().map(node => _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getPXValueFromString(_helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getCssPropertyValue(node, 'margin-left')));\r\n            const sumOfMargins = _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getSumOfNumbers(margins);\r\n            return (parseFloat(legendBlock.attr('width')) - sumOfMargins) / items.size();\r\n        }\r\n        return parseFloat(legendBlock.attr('width'));\r\n    }\r\n    static getItemClasses(itemsDirection, position) {\r\n        let cssClasses = this.getLegendItemClassByDirection(itemsDirection);\r\n        if (itemsDirection === 'column')\r\n            cssClasses += ` ${this.getLegendItemsMarginClass(position)}`;\r\n        return cssClasses;\r\n    }\r\n    static getLegendItemClassByDirection(itemsDirection) {\r\n        return itemsDirection === 'column' ? 'legend-item-row' : 'legend-item-inline';\r\n    }\r\n    static getLegendItemsMarginClass(legendPosition) {\r\n        return legendPosition === 'right' ? 'mt-15' : 'mt-10';\r\n    }\r\n    static getLegendLabelClassByPosition(position) {\r\n        if (position === 'top' || position === 'bottom')\r\n            return 'legend-label legend-label-nowrap';\r\n        return 'legend-label';\r\n    }\r\n    static getLegendItemsDirection(chartNotation, legendPosition) {\r\n        if (legendPosition === 'right' || legendPosition === 'left')\r\n            return 'column';\r\n        else\r\n            return chartNotation === 'polar' ? 'column' : 'row';\r\n    }\r\n    static getSumOfItemsWidths(items) {\r\n        let sumOfItemsWidth = _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getSumOfNumbers(items.nodes().map(node => node.getBoundingClientRect().width));\r\n        sumOfItemsWidth += _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getSumOfNumbers(items.nodes().map(node => _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getPXValueFromString(_helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getCssPropertyValue(node, 'margin-left'))));\r\n        return sumOfItemsWidth;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/features/legend/legend.ts?");

/***/ }),

/***/ "./src/engine/features/lineDots/dot.ts":
/*!*********************************************!*\
  !*** ./src/engine/features/lineDots/dot.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Dot\": () => /* binding */ Dot\n/* harmony export */ });\n/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-selection */ \"./node_modules/d3-selection/src/select.js\");\n/* harmony import */ var d3_transition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-transition */ \"./node_modules/d3-transition/src/index.js\");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../helper */ \"./src/engine/helper.ts\");\n/* harmony import */ var _scale_scale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scale/scale */ \"./src/engine/features/scale/scale.ts\");\n\r\n\r\n\r\n\r\nd3_selection__WEBPACK_IMPORTED_MODULE_3__.default.prototype.transition = d3_transition__WEBPACK_IMPORTED_MODULE_0__.transition;\r\nclass Dot {\r\n    static render(block, data, keyAxisOrient, scales, margin, keyField, valueField, cssClasses, itemIndex, colorPalette, blockSize, isSegmented) {\r\n        const dotsWrapper = block.getChartBlock()\r\n            .selectAll(`.${this.dotClass}${_helper__WEBPACK_IMPORTED_MODULE_1__.Helper.getCssClassesLine(cssClasses)}.chart-index-${itemIndex}`)\r\n            .data(data)\r\n            .enter();\r\n        const attrs = this.getDotAttrs(keyAxisOrient, scales, margin, keyField, valueField, isSegmented);\r\n        const dots = dotsWrapper.append('circle')\r\n            .attr('class', this.dotClass)\r\n            .attr('cx', d => attrs.cx(d))\r\n            .attr('cy', d => attrs.cy(d))\r\n            .attr('r', this.dotRadius);\r\n        // .style('clip-path', `url(${block.getClipPathId()})`);\r\n        const dotsInside = dotsWrapper.append('circle')\r\n            .attr('class', this.innerDotClass)\r\n            .attr('cx', d => attrs.cx(d))\r\n            .attr('cy', d => attrs.cy(d))\r\n            .attr('r', this.innerDotRadius)\r\n            .style('fill', 'white')\r\n            .style('pointer-events', 'none');\r\n        // DotArea.render(block, dotsWrapper, attrs, keyField, cssClasses, this.dotClass);\r\n        _helper__WEBPACK_IMPORTED_MODULE_1__.Helper.setCssClasses(dots, _helper__WEBPACK_IMPORTED_MODULE_1__.Helper.getCssClassesWithElementIndex(cssClasses, itemIndex));\r\n        _helper__WEBPACK_IMPORTED_MODULE_1__.Helper.setCssClasses(dotsInside, _helper__WEBPACK_IMPORTED_MODULE_1__.Helper.getCssClassesWithElementIndex(cssClasses, itemIndex));\r\n        _helper__WEBPACK_IMPORTED_MODULE_1__.Helper.setChartElementColor(dots, colorPalette, itemIndex, 'fill');\r\n    }\r\n    static getAllDots(block, chartCssClasses) {\r\n        return block.getSvg()\r\n            .selectAll(`.${this.dotClass}${_helper__WEBPACK_IMPORTED_MODULE_1__.Helper.getCssClassesLine(chartCssClasses)}`);\r\n    }\r\n    static updateDotsCoordinateByValueAxis(block, data, keyAxisOrient, scales, margin, keyField, valueField, cssClasses, index, isSegmented) {\r\n        const dots = block.getChartBlock()\r\n            .selectAll(`.${this.dotClass}${_helper__WEBPACK_IMPORTED_MODULE_1__.Helper.getCssClassesLine(cssClasses)}.chart-element-${index}`)\r\n            .data(data);\r\n        const attrs = this.getDotAttrs(keyAxisOrient, scales, margin, keyField, valueField, isSegmented);\r\n        dots\r\n            .transition()\r\n            .duration(1000)\r\n            .attr('cx', d => attrs.cx(d))\r\n            .attr('cy', d => attrs.cy(d));\r\n        block.getChartBlock()\r\n            .selectAll(`.${this.innerDotClass}${_helper__WEBPACK_IMPORTED_MODULE_1__.Helper.getCssClassesLine(cssClasses)}.chart-element-${index}`)\r\n            .data(data)\r\n            .transition()\r\n            .duration(1000)\r\n            .attr('cx', d => attrs.cx(d))\r\n            .attr('cy', d => attrs.cy(d));\r\n    }\r\n    static getDotAttrs(keyAxisOrient, scales, margin, keyField, valueField, isSegmented) {\r\n        const attrs = { cx: null, cy: null };\r\n        if (keyAxisOrient === 'left' || keyAxisOrient === 'right') {\r\n            attrs.cx = d => scales.scaleValue(d[valueField]) + margin.left;\r\n            attrs.cy = d => _scale_scale__WEBPACK_IMPORTED_MODULE_2__.Scale.getScaledValue(scales.scaleKey, this.getKeyFieldValue(d, keyField, isSegmented)) + margin.top;\r\n        }\r\n        else if (keyAxisOrient === 'bottom' || keyAxisOrient === 'top') {\r\n            attrs.cx = d => _scale_scale__WEBPACK_IMPORTED_MODULE_2__.Scale.getScaledValue(scales.scaleKey, this.getKeyFieldValue(d, keyField, isSegmented)) + margin.left,\r\n                attrs.cy = d => scales.scaleValue(d[valueField]) + margin.top;\r\n        }\r\n        return attrs;\r\n    }\r\n    static getKeyFieldValue(row, keyFieldName, isSegmented) {\r\n        return isSegmented ? row.data[keyFieldName] : row[keyFieldName];\r\n    }\r\n}\r\nDot.dotClass = 'dot';\r\nDot.innerDotClass = 'dot-inside';\r\nDot.dotRadius = 5.5;\r\nDot.innerDotRadius = 2.5;\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/features/lineDots/dot.ts?");

/***/ }),

/***/ "./src/engine/features/recordOverflowAlert/recordOverflowAlert.ts":
/*!************************************************************************!*\
  !*** ./src/engine/features/recordOverflowAlert/recordOverflowAlert.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RecordOverflowAlert\": () => /* binding */ RecordOverflowAlert\n/* harmony export */ });\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../helper */ \"./src/engine/helper.ts\");\n\r\nclass RecordOverflowAlert {\r\n    static render(block, hidedRecordsAmount, position, chartOrientation = null) {\r\n        const alertBlock = block.getWrapper()\r\n            .append('div')\r\n            .attr('class', 'record-overflow-alert')\r\n            .text(this.getAlertText(hidedRecordsAmount, chartOrientation));\r\n        const attrs = this.getBlockPositionAttrs(position, block);\r\n        this.setAlertPosition(alertBlock, attrs);\r\n    }\r\n    static setAlertPosition(alertBlock, attrs) {\r\n        alertBlock\r\n            .style('position', 'absolute')\r\n            .style('left', attrs.left)\r\n            .style('right', attrs.right)\r\n            .style('top', attrs.top)\r\n            .style('bottom', attrs.bottom);\r\n    }\r\n    static getAlertText(hidedRecordsAmount, chartOrientation) {\r\n        return `+ ${hidedRecordsAmount} ${this.getWordTextEndingByAmount(hidedRecordsAmount, chartOrientation)}`;\r\n    }\r\n    static getWordTextEndingByAmount(hidedRecordsAmount, chartOrientation) {\r\n        const lastDigit = hidedRecordsAmount % 10;\r\n        if (chartOrientation === 'vertical') {\r\n            if (hidedRecordsAmount >= 10 && hidedRecordsAmount <= 20)\r\n                return 'столбцов';\r\n            if (lastDigit === 1)\r\n                return 'столбец';\r\n            if (lastDigit >= 2 && lastDigit <= 4)\r\n                return 'столбца';\r\n            return 'столбцов';\r\n        }\r\n        else if (chartOrientation === 'horizontal') {\r\n            if (hidedRecordsAmount >= 10 && hidedRecordsAmount <= 20)\r\n                return 'строк';\r\n            if (lastDigit === 1)\r\n                return 'строка';\r\n            if (lastDigit >= 2 && lastDigit <= 4)\r\n                return 'строки';\r\n            return 'строк';\r\n        }\r\n        else {\r\n            if (hidedRecordsAmount >= 10 && hidedRecordsAmount <= 20)\r\n                return 'категорий';\r\n            if (lastDigit === 1)\r\n                return 'категория';\r\n            if (lastDigit >= 2 && lastDigit <= 4)\r\n                return 'категории';\r\n            return 'категорий';\r\n        }\r\n    }\r\n    static getBlockPositionAttrs(position, block) {\r\n        const attrs = {\r\n            bottom: null,\r\n            top: null,\r\n            right: null,\r\n            left: null\r\n        };\r\n        if (position === 'top') {\r\n            attrs.right = '17px';\r\n            attrs.top = '1rem';\r\n        }\r\n        if (position === 'right') {\r\n            attrs.bottom = '20px';\r\n            attrs.left = this.getLeftAttrForRightBlock(block) + 'px';\r\n        }\r\n        if (position === 'bottom') {\r\n            attrs.left = '20px';\r\n            attrs.bottom = '20px';\r\n        }\r\n        return attrs;\r\n    }\r\n    static getLeftAttrForRightBlock(block) {\r\n        const legendBlock = block.getSvg().select('.legend-object');\r\n        if (legendBlock.empty())\r\n            return null;\r\n        return _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getSelectionNumericAttr(legendBlock, 'x');\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/features/recordOverflowAlert/recordOverflowAlert.ts?");

/***/ }),

/***/ "./src/engine/features/scale/scale.ts":
/*!********************************************!*\
  !*** ./src/engine/features/scale/scale.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Scale\": () => /* binding */ Scale\n/* harmony export */ });\n/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-scale */ \"./node_modules/d3-scale/src/band.js\");\n/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-scale */ \"./node_modules/d3-scale/src/linear.js\");\n/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-scale */ \"./node_modules/d3-scale/src/time.js\");\n\r\nclass Scale {\r\n    static getScales(scaleKey, scaleValue, bandSettings) {\r\n        const scales = {\r\n            scaleKey: null,\r\n            scaleValue: null\r\n        };\r\n        if (scaleKey.type === 'band')\r\n            scales.scaleKey = this.getScaleBand(scaleKey.domain, scaleKey.range, bandSettings, scaleKey.elementsAmount);\r\n        else if (scaleKey.type === 'point')\r\n            scales.scaleKey = this.getScalePoint(scaleKey.domain, scaleKey.range);\r\n        if (scaleValue.type === 'linear')\r\n            scales.scaleValue = this.getScaleLinear(scaleValue.domain, scaleValue.range);\r\n        else if (scaleValue.type === 'datetime')\r\n            scales.scaleValue = this.getScaleTime(scaleValue.domain, scaleValue.range);\r\n        return scales;\r\n    }\r\n    static getScaleBandWidth(scale) {\r\n        if (scale.bandwidth && scale.bandwidth() !== 0) {\r\n            return scale.bandwidth();\r\n        }\r\n        else if (scale.step) {\r\n            return scale.step();\r\n        }\r\n    }\r\n    static getScaleStep(scale) {\r\n        if (scale.step) {\r\n            return scale.step();\r\n        }\r\n    }\r\n    static getScaledValue(scale, value) {\r\n        if (scale.bandwidth && scale.bandwidth() !== 0) {\r\n            return scale(value) + this.getScaleBandWidth(scale) / 2;\r\n        }\r\n        return scale(value);\r\n    }\r\n    static getScaleBand(domain, range, bandSettings, elementsInGroupAmount) {\r\n        const scale = (0,d3_scale__WEBPACK_IMPORTED_MODULE_0__.default)()\r\n            .domain(domain)\r\n            .range([range.start, range.end]);\r\n        const bandSize = scale.bandwidth();\r\n        if (bandSettings.groupMinDistance < bandSize) {\r\n            scale.paddingInner(bandSettings.groupMinDistance / bandSize);\r\n            scale.paddingOuter(bandSettings.groupMinDistance / bandSize / 2);\r\n        }\r\n        // Padding inner = 10. If bandwidth more than needed, paddingInner is increased to number less than 35 \r\n        let paddingInner = bandSettings.groupMinDistance;\r\n        while (scale.bandwidth() > bandSettings.maxBarWidth * elementsInGroupAmount + bandSettings.barDistance * (elementsInGroupAmount - 1) && paddingInner < bandSettings.groupMaxDistance) {\r\n            scale.paddingInner(++paddingInner / bandSize);\r\n        }\r\n        // if bandwidth more than all bars widths in group + distance between it + distance between groups\r\n        let paddingOuter = 1;\r\n        while (scale.step() > bandSettings.maxBarWidth * elementsInGroupAmount + bandSettings.groupMaxDistance + bandSettings.barDistance * (elementsInGroupAmount - 1)) {\r\n            scale.paddingOuter(++paddingOuter / bandSize);\r\n        }\r\n        return scale;\r\n    }\r\n    static getScaleLinear(domain, range) {\r\n        return (0,d3_scale__WEBPACK_IMPORTED_MODULE_1__.default)()\r\n            .domain(domain)\r\n            .range([range.start, range.end]);\r\n    }\r\n    static getScalePoint(domain, range) {\r\n        return (0,d3_scale__WEBPACK_IMPORTED_MODULE_0__.point)()\r\n            .domain(domain)\r\n            .range([range.start, range.end]);\r\n    }\r\n    static getScaleTime(domain, range) {\r\n        return (0,d3_scale__WEBPACK_IMPORTED_MODULE_2__.default)()\r\n            .domain(domain)\r\n            .range([range.start, range.end])\r\n            .nice();\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/features/scale/scale.ts?");

/***/ }),

/***/ "./src/engine/features/tolltip/tooltip.ts":
/*!************************************************!*\
  !*** ./src/engine/features/tolltip/tooltip.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Tooltip\": () => /* binding */ Tooltip\n/* harmony export */ });\n/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! d3-selection */ \"./node_modules/d3-selection/src/pointer.js\");\n/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-selection */ \"./node_modules/d3-selection/src/select.js\");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../helper */ \"./src/engine/helper.ts\");\n/* harmony import */ var _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tooltipHelper */ \"./src/engine/features/tolltip/tooltipHelper.ts\");\n/* harmony import */ var _polarNotation_donut__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../polarNotation/donut */ \"./src/engine/polarNotation/donut.ts\");\n/* harmony import */ var _polarNotation_DonutHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../polarNotation/DonutHelper */ \"./src/engine/polarNotation/DonutHelper.ts\");\n\r\n\r\n\r\n\r\n\r\nclass Tooltip {\r\n    static renderTooltips(block, model, data, scales) {\r\n        this.renderTooltipWrapper(block);\r\n        const chartsWithTooltipIndex = model.options.charts.findIndex((chart) => chart.tooltip.show);\r\n        if (chartsWithTooltipIndex !== -1) {\r\n            if (model.options.type === '2d') {\r\n                this.rednerTooltipFor2DCharts(block, model.chartBlock.margin, model.options.charts, data, model.options.data, model.blockCanvas.size, model.options.orient, scales.scaleKey, model.options.scale.scaleKey, model.options.axis.keyAxis.orient);\r\n            }\r\n            else if (model.options.type === 'polar') {\r\n                this.renderTooltipsForDonut(block, model.options.charts, data, model.options.data, model.blockCanvas.size, model.chartBlock.margin, _polarNotation_DonutHelper__WEBPACK_IMPORTED_MODULE_3__.DonutHelper.getThickness(model.chartSettings.donut, model.blockCanvas.size, model.chartBlock.margin));\r\n            }\r\n            else if (model.options.type === 'interval') {\r\n                this.renderTooltipsForInterval(block, model.options.charts, data, model.options.data, model.blockCanvas.size, model.options.orient);\r\n            }\r\n        }\r\n    }\r\n    static rednerTooltipFor2DCharts(block, margin, charts, data, dataOptions, blockSize, chartOrientation, scaleKey, scaleKeyModel, keyAxisOrient) {\r\n        if (scaleKey.domain().length === 0)\r\n            return;\r\n        this.renderLineTooltip(block, scaleKey, margin, blockSize, charts, chartOrientation, keyAxisOrient, data, dataOptions, scaleKeyModel);\r\n    }\r\n    static renderTooltipsForDonut(block, charts, data, dataOptions, blockSize, margin, chartThickness) {\r\n        charts.forEach(chart => {\r\n            const attrTransform = block.getSvg().select(`.${_polarNotation_donut__WEBPACK_IMPORTED_MODULE_2__.Donut.donutBlockClass}`).attr('transform');\r\n            const translateNumbers = _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getTranslateNumbers(attrTransform);\r\n            const translateX = translateNumbers[0];\r\n            const translateY = translateNumbers[1];\r\n            const arcItems = _polarNotation_donut__WEBPACK_IMPORTED_MODULE_2__.Donut.getAllArcGroups(block);\r\n            this.renderTooltipForDonut(block, arcItems, data, dataOptions, chart, blockSize, margin, chartThickness, translateX, translateY);\r\n        });\r\n    }\r\n    static renderTooltipsForInterval(block, charts, data, dataOptions, blockSize, chartOrientation) {\r\n        charts.forEach(chart => {\r\n            const bars = block.getSvg()\r\n                .selectAll(`rect${_helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getCssClassesLine(chart.cssClasses)}`);\r\n            this.renderTooltipForGantt(block, bars, data, dataOptions, chart, chartOrientation, blockSize);\r\n        });\r\n    }\r\n    static renderLineTooltip(block, scaleKey, margin, blockSize, charts, chartOrientation, keyAxisOrient, data, dataOptions, scaleKeyModel) {\r\n        const tooltipBlock = this.renderTooltipBlock(block);\r\n        const tooltipContent = this.renderTooltipContentBlock(tooltipBlock);\r\n        const thisClass = this;\r\n        const tooltipLine = this.renderTooltipLine(block);\r\n        const tipBoxAttributes = _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.getTipBoxAttributes(margin, blockSize);\r\n        const tipBox = this.renderTipBox(block, tipBoxAttributes);\r\n        tipBox\r\n            .on('mouseover', function () {\r\n            tooltipBlock.style('display', 'block');\r\n        })\r\n            .on('mousemove', function (event) {\r\n            const index = _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.getKeyIndex((0,d3_selection__WEBPACK_IMPORTED_MODULE_4__.default)(event, this), chartOrientation, margin, blockSize, scaleKey, scaleKeyModel.type);\r\n            const keyValue = scaleKey.domain()[index];\r\n            _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.fillMultyFor2DChart(tooltipContent, charts, data, dataOptions, keyValue);\r\n            const coordinatePointer = (0,d3_selection__WEBPACK_IMPORTED_MODULE_4__.default)(event, this);\r\n            // const tooltipCoordinate = TooltipHelper.getTooltipCoordinate(coordinatePointer);\r\n            const tooltipCoordinate = _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.getTooltipFixedCoordinate(scaleKey, margin, blockSize, keyValue, tooltipContent.node(), keyAxisOrient);\r\n            thisClass.setTooltipCoordinate(tooltipBlock, tooltipCoordinate);\r\n            tooltipLine.style('display', 'block');\r\n            const tooltipLineAttributes = _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.getTooltipLineAttributes(scaleKey, margin, keyValue, chartOrientation, blockSize);\r\n            thisClass.setTooltipLineAttributes(tooltipLine, tooltipLineAttributes);\r\n        })\r\n            .on('mouseleave', function () {\r\n            tooltipBlock.style('display', 'none');\r\n            tooltipLine.style('display', 'none');\r\n        });\r\n    }\r\n    static renderTooltipForDonut(block, elemets, data, dataOptions, chart, blockSize, margin, donutThickness, translateX = 0, translateY = 0) {\r\n        const tooltipBlock = this.renderTooltipBlock(block, translateX, translateY);\r\n        const tooltipContent = this.renderTooltipContentBlock(tooltipBlock);\r\n        const tooltipArrow = this.renderTooltipArrow(tooltipBlock);\r\n        const thisClass = this;\r\n        const filter = block.renderDefs()\r\n            .append('filter')\r\n            .attr('id', 'shadow')\r\n            .attr('width', '300%')\r\n            .attr('height', '300%')\r\n            .attr('x', '-100%')\r\n            .attr('y', '-100%')\r\n            .style('outline', '1px solid red');\r\n        filter.append('feDropShadow')\r\n            .attr('dx', 0)\r\n            .attr('dy', 0)\r\n            .attr('flood-color', 'rgba(0, 0, 0, 0.15)')\r\n            .attr('stdDeviation', 20);\r\n        let clone;\r\n        elemets\r\n            .on('mouseover', function (_event, dataRow) {\r\n            thisClass.showTooltipBlock(tooltipBlock);\r\n            const key = dataRow.data[dataOptions.keyField.name];\r\n            _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.fillTooltipForPolarChart(tooltipContent, chart, data, dataOptions, key, (0,d3_selection__WEBPACK_IMPORTED_MODULE_5__.default)(this).select('path').style('fill'));\r\n            const coordinatePointer = _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.getRecalcedCoordinateByArrow(_polarNotation_DonutHelper__WEBPACK_IMPORTED_MODULE_3__.DonutHelper.getArcCentroid(blockSize, margin, dataRow, donutThickness), tooltipBlock, blockSize, tooltipArrow, translateX, translateY);\r\n            const tooltipCoordinate = _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.getTooltipCoordinate(coordinatePointer);\r\n            thisClass.setTooltipCoordinate(tooltipBlock, tooltipCoordinate);\r\n            // Выделение выбранного сегмента с помощью тени. Для этого создается копия сегмента, которая отображает поверх оригинального\r\n            // Оригинальный сегмент на оргинальный сегмент вешается фильтр, который преобразовывает его в тень.\r\n            clone = (0,d3_selection__WEBPACK_IMPORTED_MODULE_5__.default)(this).clone();\r\n            (0,d3_selection__WEBPACK_IMPORTED_MODULE_5__.default)(this).style('filter', 'url(#shadow)');\r\n            // Задание прозрачности всем сегментам, кроме выделенного\r\n            // TooltipHelper.setElementsSemiOpacity(elemets.filter(d => d.data[dataOptions.keyField.name] !== key));\r\n            // Выезд сегмента наружу\r\n            // select<SVGGElement, PieArcDatum<DataRow>>(this)\r\n            //     .select('path')\r\n            //     .attr('d', (d, i) => Donut.getArcGeneratorObject(blockSize, margin, donutThickness)\r\n            //         .outerRadius(Donut.getOuterRadius(margin, blockSize) + 5)\r\n            //         .innerRadius(Donut.getOuterRadius(margin, blockSize) - donutThickness + 5)\r\n            //         .padAngle(0.025)(d, i));\r\n        });\r\n        elemets.on('mouseleave', function () {\r\n            thisClass.hideTooltipBlock(tooltipBlock);\r\n            _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.setElementsFullOpacity(elemets);\r\n            (0,d3_selection__WEBPACK_IMPORTED_MODULE_5__.default)(this) // удаление тени с оригинального сегмента\r\n                .style('filter', null);\r\n            clone.remove(); // удаление клона\r\n        });\r\n    }\r\n    static renderTooltipForGantt(block, elemets, data, dataOptions, chart, chartOrientation, blockSize) {\r\n        const tooltipBlock = this.renderTooltipBlock(block);\r\n        const tooltipContent = this.renderTooltipContentBlock(tooltipBlock);\r\n        const tooltipArrow = this.renderTooltipArrow(tooltipBlock);\r\n        const thisClass = this;\r\n        elemets\r\n            .on('mouseover', function (_event, dataRow) {\r\n            thisClass.showTooltipBlock(tooltipBlock);\r\n            const key = _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.getKeyForTooltip(dataRow, dataOptions.keyField.name, false);\r\n            _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.fillTooltipForIntervalChart(tooltipContent, chart, data, dataOptions, key, (0,d3_selection__WEBPACK_IMPORTED_MODULE_5__.default)(this).style('fill'));\r\n            const coordinatePointer = _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.getTooltipBlockCoordinateByRect((0,d3_selection__WEBPACK_IMPORTED_MODULE_5__.default)(this), tooltipBlock, blockSize, tooltipArrow, chartOrientation);\r\n            const tooltipCoordinate = _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.getTooltipCoordinate(coordinatePointer);\r\n            thisClass.setTooltipCoordinate(tooltipBlock, tooltipCoordinate);\r\n            _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.setElementsSemiOpacity(_tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.getFilteredElements(elemets, dataOptions.keyField.name, key, false));\r\n        });\r\n        elemets.on('mouseleave', function () {\r\n            thisClass.hideTooltipBlock(tooltipBlock);\r\n            _tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.TooltipHelper.setElementsFullOpacity(elemets);\r\n        });\r\n    }\r\n    static renderTooltipWrapper(block) {\r\n        let tooltipWrapper = block.getWrapper()\r\n            .select(`.${this.tooltipWrapperClass}`);\r\n        if (tooltipWrapper.empty())\r\n            block.getWrapper()\r\n                .append('div')\r\n                .attr('class', this.tooltipWrapperClass);\r\n    }\r\n    static renderTooltipLine(block) {\r\n        return block.getChartBlock()\r\n            .append('line')\r\n            .attr('class', 'tooltip-line')\r\n            .raise();\r\n    }\r\n    static renderTipBox(block, attributes) {\r\n        return block.getSvg()\r\n            .append('rect')\r\n            .attr('class', 'tipbox')\r\n            .attr('x', attributes.x)\r\n            .attr('y', attributes.y)\r\n            .attr('width', attributes.width)\r\n            .attr('height', attributes.height)\r\n            .style('opacity', 0);\r\n    }\r\n    static setTooltipLineAttributes(tooltipLine, attributes) {\r\n        tooltipLine\r\n            .attr('x1', attributes.x1)\r\n            .attr('x2', attributes.x2)\r\n            .attr('y1', attributes.y1)\r\n            .attr('y2', attributes.y2);\r\n    }\r\n    static renderTooltipArrow(tooltipBlock) {\r\n        let tooltipArrow = tooltipBlock.select(`.${this.tooltipArrowClass}`);\r\n        if (tooltipArrow.empty())\r\n            tooltipArrow = tooltipBlock\r\n                .append('div')\r\n                .attr('class', this.tooltipArrowClass)\r\n                .style('position', 'absolute')\r\n                .style('left', `${_tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.ARROW_DEFAULT_POSITION}px`)\r\n                .style('bottom', '-6px')\r\n                .style('width', `${_tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.ARROW_SIZE}px`)\r\n                .style('height', `${_tooltipHelper__WEBPACK_IMPORTED_MODULE_1__.ARROW_SIZE}px`);\r\n        return tooltipArrow;\r\n    }\r\n    static renderTooltipBlock(block, translateX = 0, translateY = 0) {\r\n        const wrapper = block.getWrapper().select(`.${this.tooltipWrapperClass}`);\r\n        let tooltipBlock = wrapper.select(`.${this.tooltipBlockClass}`);\r\n        if (tooltipBlock.empty()) {\r\n            tooltipBlock = wrapper\r\n                .append('div')\r\n                .attr('class', this.tooltipBlockClass)\r\n                .style('position', 'absolute')\r\n                .style('display', 'none');\r\n        }\r\n        if (translateX !== 0 || translateY !== 0)\r\n            tooltipBlock.style('transform', `translate(${translateX}px, ${translateY}px)`);\r\n        return tooltipBlock;\r\n    }\r\n    static renderTooltipContentBlock(tooltipBlock) {\r\n        let tooltipContentBlock = tooltipBlock.select(`div.${this.tooltipContentClass}`);\r\n        if (tooltipContentBlock.empty())\r\n            tooltipContentBlock = tooltipBlock.append('div')\r\n                .attr('class', this.tooltipContentClass);\r\n        return tooltipContentBlock;\r\n    }\r\n    static setTooltipCoordinate(tooltipBlock, tooltipCoordinate) {\r\n        tooltipBlock\r\n            .style('left', tooltipCoordinate.left)\r\n            .style('top', tooltipCoordinate.top)\r\n            .style('right', tooltipCoordinate.right)\r\n            .style('bottom', tooltipCoordinate.bottom);\r\n    }\r\n    static showTooltipBlock(tooltipBlock) {\r\n        tooltipBlock.style('display', 'block');\r\n    }\r\n    static hideTooltipBlock(tooltipBlock) {\r\n        tooltipBlock.style('display', 'none');\r\n    }\r\n}\r\nTooltip.tooltipWrapperClass = 'tooltip-wrapper';\r\nTooltip.tooltipContentClass = 'tooltip-content';\r\nTooltip.tooltipBlockClass = 'tooltip-block';\r\nTooltip.tooltipArrowClass = 'tooltip-arrow';\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/features/tolltip/tooltip.ts?");

/***/ }),

/***/ "./src/engine/features/tolltip/tooltipHelper.ts":
/*!******************************************************!*\
  !*** ./src/engine/features/tolltip/tooltipHelper.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ARROW_SIZE\": () => /* binding */ ARROW_SIZE,\n/* harmony export */   \"ARROW_DEFAULT_POSITION\": () => /* binding */ ARROW_DEFAULT_POSITION,\n/* harmony export */   \"TooltipHelper\": () => /* binding */ TooltipHelper\n/* harmony export */ });\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../helper */ \"./src/engine/helper.ts\");\n/* harmony import */ var _valueFormatter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../valueFormatter */ \"./src/engine/valueFormatter.ts\");\n/* harmony import */ var _scale_scale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scale/scale */ \"./src/engine/features/scale/scale.ts\");\n\r\n\r\n\r\nconst ARROW_SIZE = 20;\r\nconst ARROW_DEFAULT_POSITION = 9;\r\nconst TOOLTIP_ARROW_PADDING_X = ARROW_DEFAULT_POSITION - (ARROW_SIZE * Math.sqrt(2) - ARROW_SIZE) / 2 + 14;\r\nconst TOOLTIP_ARROW_PADDING_Y = 13;\r\nclass TooltipHelper {\r\n    static fillMultyFor2DChart(tooltipContentBlock, charts, data, dataOptions, keyValue) {\r\n        tooltipContentBlock.html('');\r\n        charts.forEach(chart => {\r\n            chart.data.valueFields.forEach((field, index) => {\r\n                this.fillTooltipContent(tooltipContentBlock, data, dataOptions, keyValue, field, chart.style.elementColors[index % chart.style.elementColors.length].toString());\r\n            });\r\n        });\r\n    }\r\n    static fillTooltipForPolarChart(tooltipContentBlock, chart, data, dataOptions, keyValue, markColor) {\r\n        tooltipContentBlock.html('');\r\n        this.fillTooltipContent(tooltipContentBlock, data, dataOptions, keyValue, chart.data.valueField, markColor);\r\n    }\r\n    static fillTooltipForIntervalChart(tooltipContentBlock, chart, data, dataOptions, keyValue, markColor) {\r\n        tooltipContentBlock.html('');\r\n        this.fillTooltipContent(tooltipContentBlock, data, dataOptions, keyValue, chart.data.valueField1, markColor);\r\n    }\r\n    static getTooltipCoordinate(pointer) {\r\n        const coordinate = {\r\n            left: null,\r\n            top: null,\r\n            right: null,\r\n            bottom: null\r\n        };\r\n        coordinate.left = pointer[0] + 'px';\r\n        coordinate.top = pointer[1] + 'px';\r\n        return coordinate;\r\n    }\r\n    static getTooltipFixedCoordinate(scaleKey, margin, blockSize, keyValue, tooltipBlockElement, keyAxisOrient) {\r\n        if (keyAxisOrient === 'bottom' || keyAxisOrient === 'top') {\r\n            const coordinate = {\r\n                top: margin.top + 'px',\r\n                bottom: null,\r\n                left: _scale_scale__WEBPACK_IMPORTED_MODULE_2__.Scale.getScaledValue(scaleKey, keyValue) + margin.left - tooltipBlockElement.getBoundingClientRect().width / 2 + 'px',\r\n                right: null\r\n            };\r\n            if (_helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getPXValueFromString(coordinate.left) < margin.left)\r\n                coordinate.left = margin.left + 'px';\r\n            if (_helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getPXValueFromString(coordinate.left) + tooltipBlockElement.getBoundingClientRect().width > blockSize.width - margin.right) {\r\n                coordinate.left = null;\r\n                coordinate.right = margin.right + 'px';\r\n            }\r\n            if (keyAxisOrient === 'top') {\r\n                coordinate.top = null;\r\n                coordinate.bottom = margin.bottom + 'px';\r\n            }\r\n            return coordinate;\r\n        }\r\n        else {\r\n            const coordinate = {\r\n                top: _scale_scale__WEBPACK_IMPORTED_MODULE_2__.Scale.getScaledValue(scaleKey, keyValue) + margin.top - tooltipBlockElement.getBoundingClientRect().height / 2 + 'px',\r\n                left: margin.left + 'px',\r\n                bottom: null,\r\n                right: null\r\n            };\r\n            if (_helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getPXValueFromString(coordinate.top) < margin.top)\r\n                coordinate.top = margin.top + 'px';\r\n            if (_helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getPXValueFromString(coordinate.top) + tooltipBlockElement.getBoundingClientRect().height > blockSize.height - margin.bottom) {\r\n                coordinate.top = null;\r\n                coordinate.bottom = margin.bottom + 'px';\r\n            }\r\n            if (keyAxisOrient === 'left') {\r\n                coordinate.left = null;\r\n                coordinate.right = margin.right + 'px';\r\n            }\r\n            return coordinate;\r\n        }\r\n    }\r\n    static getTooltipBlockCoordinateByRect(element, tooltipBlock, blockSize, tooltipArrow, chartOrientation) {\r\n        const blockPositionRatio = chartOrientation === 'vertical' ? 2 : 1; // If chart has horizontal orientation, block takes coordinte of end of bar, if chart vertical, block takes center of bar.\r\n        const coordinateTuple = [parseFloat(element.attr('x')) + parseFloat(element.attr('width')) / blockPositionRatio, parseFloat(element.attr('y'))];\r\n        return this.getRecalcedCoordinateByArrow(coordinateTuple, tooltipBlock, blockSize, tooltipArrow);\r\n    }\r\n    static getRecalcedCoordinateByArrow(coordinate, tooltipBlock, blockSize, tooltipArrow, translateX = 0, translateY = 0) {\r\n        const tooltipBlockNode = tooltipBlock.node();\r\n        const horizontalPad = this.getHorizontalPad(coordinate[0], tooltipBlockNode, blockSize, translateX);\r\n        const verticalPad = this.getVerticalPad(coordinate[1], tooltipBlockNode, translateY);\r\n        this.setTooltipArrowCoordinate(tooltipArrow, this.getTooltipArrowPadding(tooltipBlockNode, horizontalPad));\r\n        return [coordinate[0] - TOOLTIP_ARROW_PADDING_X - horizontalPad,\r\n            coordinate[1] - TOOLTIP_ARROW_PADDING_Y - tooltipBlockNode.getBoundingClientRect().height - verticalPad];\r\n    }\r\n    static getKeyForTooltip(row, keyFieldName, isSegmented) {\r\n        return isSegmented ? row.data[keyFieldName] : row[keyFieldName];\r\n    }\r\n    static getFilteredElements(elements, keyFieldName, keyValue, isSegmented) {\r\n        if (isSegmented)\r\n            return elements.filter(d => d.data[keyFieldName] !== keyValue);\r\n        return elements.filter(d => d[keyFieldName] !== keyValue);\r\n    }\r\n    static setElementsSemiOpacity(elements) {\r\n        if (elements)\r\n            elements.style('opacity', 0.3);\r\n    }\r\n    static setElementsFullOpacity(elements) {\r\n        if (elements)\r\n            elements.style('opacity', 1);\r\n    }\r\n    static getTipBoxAttributes(margin, blockSize) {\r\n        return {\r\n            x: margin.left,\r\n            y: margin.top,\r\n            width: blockSize.width - margin.left - margin.right,\r\n            height: blockSize.height - margin.top - margin.bottom,\r\n        };\r\n    }\r\n    static getKeyIndex(pointer, orient, margin, blockSize, scaleKey, scaleKeyType) {\r\n        const pointerAxisType = orient === 'vertical' ? 0 : 1; // 0 - координата поинтера по оси x, 1 - по оси y\r\n        const marginByOrient = orient === 'vertical' ? margin.left : margin.top;\r\n        const scaleStep = _scale_scale__WEBPACK_IMPORTED_MODULE_2__.Scale.getScaleStep(scaleKey);\r\n        if (scaleKeyType === 'point') {\r\n            const point = pointer[pointerAxisType] - marginByOrient + scaleStep / 2;\r\n            if (point < 0)\r\n                return 0;\r\n            return Math.floor(point / scaleStep);\r\n        }\r\n        else {\r\n            const chartBlockSizeByDir = orient === 'vertical'\r\n                ? blockSize.width - margin.left - margin.right\r\n                : blockSize.height - margin.top - margin.bottom;\r\n            const outerPadding = chartBlockSizeByDir - scaleStep * scaleKey.domain().length;\r\n            if (pointer[pointerAxisType] - marginByOrient - 1 < outerPadding / 2)\r\n                return 0; // Самый первый элемент\r\n            if (pointer[pointerAxisType] - marginByOrient - 1 + outerPadding / 2 > chartBlockSizeByDir)\r\n                return scaleKey.domain().length - 1; // последний индекс\r\n            const point = pointer[pointerAxisType] - outerPadding / 2 - marginByOrient - 1;\r\n            return Math.floor(point / scaleStep);\r\n        }\r\n    }\r\n    static getTooltipLineAttributes(scaleKey, margin, key, chartOrientation, blockSize) {\r\n        const attributes = {\r\n            x1: 0, x2: 0, y1: 0, y2: 0\r\n        };\r\n        if (chartOrientation === 'vertical') {\r\n            attributes.x1 = Math.ceil(_scale_scale__WEBPACK_IMPORTED_MODULE_2__.Scale.getScaledValue(scaleKey, key) + margin.left) - 0.5;\r\n            attributes.x2 = Math.ceil(_scale_scale__WEBPACK_IMPORTED_MODULE_2__.Scale.getScaledValue(scaleKey, key) + margin.left) - 0.5;\r\n            attributes.y1 = margin.top;\r\n            attributes.y2 = blockSize.height - margin.bottom;\r\n        }\r\n        else {\r\n            attributes.x1 = margin.left;\r\n            attributes.x2 = blockSize.width - margin.right;\r\n            attributes.y1 = _scale_scale__WEBPACK_IMPORTED_MODULE_2__.Scale.getScaledValue(scaleKey, key) + margin.top;\r\n            attributes.y2 = _scale_scale__WEBPACK_IMPORTED_MODULE_2__.Scale.getScaledValue(scaleKey, key) + margin.top;\r\n        }\r\n        return attributes;\r\n    }\r\n    static fillTooltipContent(tooltipContentBlock, data, dataOptions, keyValue, valueField, markColor) {\r\n        const group = tooltipContentBlock.append('div')\r\n            .attr('class', 'tooltip-group');\r\n        group.append('div')\r\n            .attr('class', 'tooltip-color')\r\n            .append('span')\r\n            .attr('class', 'tooltip-circle')\r\n            .style('background-color', markColor);\r\n        const textBlock = group.append('div')\r\n            .attr('class', 'tooltip-texts')\r\n            .append('div')\r\n            .attr('class', 'tooltip-text-item')\r\n            .text(this.getTooltipItemText(data, dataOptions, keyValue, valueField))\r\n            .style('white-space', 'nowrap');\r\n        if (textBlock.node().getBoundingClientRect().width > 500)\r\n            textBlock.style('white-space', 'normal');\r\n    }\r\n    static getTooltipItemText(data, dataOptions, keyValue, valueField) {\r\n        const row = data[dataOptions.dataSource].find(d => d[dataOptions.keyField.name] === keyValue);\r\n        return `${row[dataOptions.keyField.name]} - ${_valueFormatter__WEBPACK_IMPORTED_MODULE_1__.ValueFormatter.formatValue(valueField.format, row[valueField.name])}`;\r\n    }\r\n    static getHorizontalPad(coordinateX, tooltipBlockNode, blockSize, translateX) {\r\n        let pad = 0;\r\n        if (tooltipBlockNode.getBoundingClientRect().width + coordinateX - TOOLTIP_ARROW_PADDING_X + translateX > blockSize.width)\r\n            pad = tooltipBlockNode.getBoundingClientRect().width + coordinateX - TOOLTIP_ARROW_PADDING_X + translateX - blockSize.width;\r\n        return pad;\r\n    }\r\n    static getVerticalPad(coordinateY, tooltipBlockNode, translateY) {\r\n        let pad = 0;\r\n        if (coordinateY - TOOLTIP_ARROW_PADDING_Y - tooltipBlockNode.getBoundingClientRect().height + translateY < -tooltipBlockNode.getBoundingClientRect().height - TOOLTIP_ARROW_PADDING_Y)\r\n            pad = coordinateY;\r\n        return pad; // return zero or sub zero\r\n    }\r\n    static setTooltipArrowCoordinate(tooltipArrow, horizontalPad) {\r\n        if (horizontalPad !== 0)\r\n            tooltipArrow.style('left', `${ARROW_DEFAULT_POSITION + Math.floor(horizontalPad)}px`);\r\n        else\r\n            tooltipArrow.style('left', `${ARROW_DEFAULT_POSITION}px`);\r\n    }\r\n    static getTooltipArrowPadding(tooltipBlockNode, horizontalPad) {\r\n        return horizontalPad > tooltipBlockNode.getBoundingClientRect().width\r\n            ? tooltipBlockNode.getBoundingClientRect().width - ARROW_DEFAULT_POSITION - 20 * Math.sqrt(2)\r\n            : horizontalPad; // If tooltip arrow has coordinate outside svg, it take X position in end of tooltip block\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/features/tolltip/tooltipHelper.ts?");

/***/ }),

/***/ "./src/engine/helper.ts":
/*!******************************!*\
  !*** ./src/engine/helper.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Helper\": () => /* binding */ Helper\n/* harmony export */ });\nclass Helper {\r\n    static setCssClasses(elem, cssClasses) {\r\n        cssClasses.forEach(cssClass => {\r\n            elem.classed(cssClass, true);\r\n        });\r\n    }\r\n    /**\r\n     * Возвращает все CSS-классы через точку. Используется для создания селектора для поиска\r\n     * @param cssClasses\r\n     */\r\n    static getCssClassesLine(cssClasses) {\r\n        return '.' + cssClasses.join('.');\r\n    }\r\n    static setChartStyle(elements, chartStyle, fieldIndex, styleType) {\r\n        this.setChartElementColor(elements, chartStyle.elementColors, fieldIndex, styleType);\r\n        this.setChartOpacity(elements, chartStyle.opacity);\r\n    }\r\n    static setChartElementColor(elements, colorPalette, fieldIndex, styleType) {\r\n        elements.style(styleType, colorPalette[fieldIndex % colorPalette.length].toString());\r\n    }\r\n    static cropLabels(labelBlocks, maxWidth) {\r\n        labelBlocks.nodes().forEach(node => {\r\n            if (node.getBBox().width > maxWidth) {\r\n                const text = node.textContent;\r\n                let textLength = text.length;\r\n                while (node.getBBox().width > maxWidth && textLength > 0) {\r\n                    node.textContent = text.substring(0, --textLength) + '...';\r\n                }\r\n                if (textLength === 0)\r\n                    node.textContent = '';\r\n            }\r\n        });\r\n    }\r\n    static getCssClassesArray(cssClass) {\r\n        return cssClass.split(' ');\r\n    }\r\n    static getTranslateNumbers(transformValue) {\r\n        if (!transformValue)\r\n            return [0, 0];\r\n        const translateNumbers = transformValue.substring(10, transformValue.length - 1).split(', ');\r\n        const translateX = parseFloat(translateNumbers[0]);\r\n        const translateY = parseFloat(translateNumbers[1]);\r\n        return [translateX, translateY];\r\n    }\r\n    static getSumOfNumbers(numbers) {\r\n        let sum = 0;\r\n        numbers.forEach(num => sum += num);\r\n        return sum;\r\n    }\r\n    static getCssPropertyValue(node, propertyName) {\r\n        return window.getComputedStyle(node).getPropertyValue(propertyName);\r\n    }\r\n    static getPXValueFromString(propertyValue) {\r\n        return parseFloat(propertyValue);\r\n    }\r\n    static getSelectionNumericAttr(selection, attrName) {\r\n        return parseFloat(selection.attr(attrName));\r\n    }\r\n    /**\r\n     * Если значение больше лимитера, то возвращается лимитер, иначе возвращается само значение\r\n     * @param value\r\n     * @param limiter\r\n     * @param isBigger Если параметр установлен true, лимитр возвращается, если он меньше значения, в противном случае - если больше\r\n     */\r\n    static getValueWithLimiter(value, limiter, isBigger) {\r\n        if (isBigger)\r\n            return value > limiter ? limiter : value;\r\n        return value < limiter ? limiter : value;\r\n    }\r\n    static getCssClassesWithElementIndex(cssClasses, index) {\r\n        return cssClasses.concat([`chart-element-${index}`]);\r\n    }\r\n    static setChartOpacity(elements, opacity) {\r\n        elements.attr('opacity', opacity);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/helper.ts?");

/***/ }),

/***/ "./src/engine/intervalNotation/gantt.ts":
/*!**********************************************!*\
  !*** ./src/engine/intervalNotation/gantt.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Gantt\": () => /* binding */ Gantt\n/* harmony export */ });\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helper */ \"./src/engine/helper.ts\");\n/* harmony import */ var _features_scale_scale__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../features/scale/scale */ \"./src/engine/features/scale/scale.ts\");\n\r\n\r\nclass Gantt {\r\n    static render(block, data, dataOptions, scales, margin, keyAxisOrient, chart, barSettings) {\r\n        const ganttItems = block.getChartBlock()\r\n            .selectAll(`.${this.ganttItemClass}`)\r\n            .data(data)\r\n            .enter()\r\n            .append('rect')\r\n            .attr('class', this.ganttItemClass)\r\n            .style('clip-path', `url(${block.getClipPathId()})`);\r\n        const itemsAttrs = this.getItemsAttrsByKeyOrient(keyAxisOrient, scales, margin, dataOptions.keyField.name, chart.data.valueField1.name, chart.data.valueField2.name, barSettings);\r\n        this.fillItemsAttrs(ganttItems, itemsAttrs);\r\n        _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.setCssClasses(ganttItems, chart.cssClasses);\r\n        _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.setChartStyle(ganttItems, chart.style, 0, 'fill');\r\n    }\r\n    static fillItemsAttrs(ganttItems, attrs) {\r\n        ganttItems\r\n            .attr('x', d => attrs.x(d))\r\n            .attr('y', d => attrs.y(d))\r\n            .attr('width', d => attrs.width(d))\r\n            .attr('height', d => attrs.height(d));\r\n    }\r\n    static getItemsAttrsByKeyOrient(axisOrient, scales, margin, keyField, valueField1, valueField2, barSettings) {\r\n        const attrs = {\r\n            x: null,\r\n            y: null,\r\n            width: null,\r\n            height: null\r\n        };\r\n        const itemSize = _features_scale_scale__WEBPACK_IMPORTED_MODULE_1__.Scale.getScaleBandWidth(scales.scaleKey) > barSettings.maxBarWidth\r\n            ? barSettings.maxBarWidth\r\n            : _features_scale_scale__WEBPACK_IMPORTED_MODULE_1__.Scale.getScaleBandWidth(scales.scaleKey);\r\n        const sizeDiff = (_features_scale_scale__WEBPACK_IMPORTED_MODULE_1__.Scale.getScaleBandWidth(scales.scaleKey) - itemSize) / 2;\r\n        if (axisOrient === 'top' || axisOrient === 'bottom') {\r\n            attrs.x = d => scales.scaleKey(d[keyField]) + margin.left + sizeDiff;\r\n            attrs.width = d => itemSize;\r\n        }\r\n        if (axisOrient === 'left' || axisOrient === 'right') {\r\n            attrs.y = d => scales.scaleKey(d[keyField]) + margin.top + sizeDiff;\r\n            attrs.height = d => itemSize;\r\n        }\r\n        if (axisOrient === 'top') {\r\n            attrs.y = d => scales.scaleValue(d[valueField1]) + margin.top;\r\n            attrs.height = d => scales.scaleValue(d[valueField2]) - scales.scaleValue(d[valueField1]);\r\n        }\r\n        else if (axisOrient === 'bottom') {\r\n            attrs.y = d => scales.scaleValue(d[valueField2]) + margin.top;\r\n            attrs.height = d => scales.scaleValue(d[valueField1]) - scales.scaleValue(d[valueField2]);\r\n        }\r\n        else if (axisOrient === 'left') {\r\n            attrs.x = d => scales.scaleValue(d[valueField1]) + margin.left;\r\n            attrs.width = d => scales.scaleValue(d[valueField2]) - scales.scaleValue(d[valueField1]);\r\n        }\r\n        else if (axisOrient === 'right') {\r\n            attrs.x = d => scales.scaleValue(d[valueField2]) + margin.left;\r\n            attrs.width = d => scales.scaleValue(d[valueField1]) - scales.scaleValue(d[valueField2]);\r\n        }\r\n        return attrs;\r\n    }\r\n}\r\nGantt.ganttItemClass = 'gantt-item';\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/intervalNotation/gantt.ts?");

/***/ }),

/***/ "./src/engine/polarNotation/DonutHelper.ts":
/*!*************************************************!*\
  !*** ./src/engine/polarNotation/DonutHelper.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DonutHelper\": () => /* binding */ DonutHelper\n/* harmony export */ });\n/* harmony import */ var d3_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-shape */ \"./node_modules/d3-shape/src/arc.js\");\n/* harmony import */ var d3_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-shape */ \"./node_modules/d3-shape/src/pie.js\");\n\r\nclass DonutHelper {\r\n    static getThickness(donutSettings, blockSize, margin) {\r\n        if (Math.min(blockSize.width - margin.left - margin.right, blockSize.height - margin.bottom - margin.top) > 400)\r\n            return donutSettings.maxThickness;\r\n        return donutSettings.minThickness;\r\n    }\r\n    static getArcCentroid(blockSize, margin, dataItem, donutThickness) {\r\n        const arc = this.getArcGeneratorObject(blockSize, margin, donutThickness);\r\n        return arc.centroid(dataItem);\r\n    }\r\n    static getArcGeneratorObject(blockSize, margin, donutThickness) {\r\n        const outerRadius = this.getOuterRadius(margin, blockSize);\r\n        const arc = this.getArcGenerator(outerRadius, outerRadius - donutThickness);\r\n        return arc;\r\n    }\r\n    static getOuterRadius(margin, blockSize) {\r\n        return Math.min(blockSize.width - margin.left - margin.right, blockSize.height - margin.top - margin.bottom) / 2;\r\n    }\r\n    static getInnerRadius(outerRadius, thickness) {\r\n        return outerRadius - thickness;\r\n    }\r\n    static getTranslate(margin, blockSize) {\r\n        return {\r\n            x: (blockSize.width - margin.left - margin.right) / 2 + margin.left,\r\n            y: (blockSize.height - margin.top - margin.bottom) / 2 + margin.top\r\n        };\r\n    }\r\n    static getArcGenerator(outerRadius, innerRadius) {\r\n        return (0,d3_shape__WEBPACK_IMPORTED_MODULE_0__.default)()\r\n            .innerRadius(innerRadius)\r\n            .outerRadius(outerRadius);\r\n    }\r\n    static getPieGenerator(valueField, padAngle) {\r\n        return (0,d3_shape__WEBPACK_IMPORTED_MODULE_1__.default)()\r\n            .padAngle(padAngle)\r\n            .sort(null)\r\n            .value(d => d[valueField]);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/polarNotation/DonutHelper.ts?");

/***/ }),

/***/ "./src/engine/polarNotation/aggregator.ts":
/*!************************************************!*\
  !*** ./src/engine/polarNotation/aggregator.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Aggregator\": () => /* binding */ Aggregator\n/* harmony export */ });\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-array */ \"./node_modules/d3-array/src/sum.js\");\n\r\nclass Aggregator {\r\n    static render(block, data, valueField, innerRadius, translate, fontSize) {\r\n        const aggregator = {\r\n            name: 'Сумма',\r\n            value: (0,d3_array__WEBPACK_IMPORTED_MODULE_0__.default)(data.map(d => d[valueField]))\r\n        };\r\n        this.renderAggregatorText(block, innerRadius, aggregator, translate, fontSize);\r\n    }\r\n    static renderAggregatorText(block, innerRadius, aggregator, translate, fontSize) {\r\n        if (innerRadius > 50) {\r\n            const aggregatorObject = this.renderAggregatorObject(block, innerRadius, translate);\r\n            const wrapper = this.renderAggregatorWrapper(aggregatorObject);\r\n            wrapper\r\n                .append('div')\r\n                .attr('class', 'aggregator-value')\r\n                .style('text-align', 'center')\r\n                .style('font-size', `${fontSize}px`)\r\n                .text(aggregator.value);\r\n            wrapper\r\n                .append('div')\r\n                .attr('class', 'aggregator-name')\r\n                .style('text-align', 'center')\r\n                .style('font-size', '18px')\r\n                .text(aggregator.name);\r\n        }\r\n    }\r\n    static renderAggregatorObject(block, innerRadius, translate) {\r\n        return block.getSvg()\r\n            .append('foreignObject')\r\n            .attr('class', 'aggregator-object')\r\n            .attr('transform-origin', 'center')\r\n            .attr('width', innerRadius * 2)\r\n            .attr('height', innerRadius * 2)\r\n            .attr('transform', `translate(${translate.x - innerRadius}, ${translate.y - innerRadius})`)\r\n            .style('pointer-events', `none`);\r\n    }\r\n    static renderAggregatorWrapper(aggregatorObject) {\r\n        return aggregatorObject\r\n            .append('xhtml:div')\r\n            .style('width', '100%')\r\n            .style('height', '100%')\r\n            .style('border-radius', '50%')\r\n            .style('display', 'flex')\r\n            .style('flex-direction', 'column')\r\n            .style('justify-content', 'center')\r\n            .style('align-items', 'center');\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/polarNotation/aggregator.ts?");

/***/ }),

/***/ "./src/engine/polarNotation/donut.ts":
/*!*******************************************!*\
  !*** ./src/engine/polarNotation/donut.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Donut\": () => /* binding */ Donut\n/* harmony export */ });\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helper */ \"./src/engine/helper.ts\");\n/* harmony import */ var _aggregator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aggregator */ \"./src/engine/polarNotation/aggregator.ts\");\n/* harmony import */ var _DonutHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DonutHelper */ \"./src/engine/polarNotation/DonutHelper.ts\");\n\r\n\r\n\r\nclass Donut {\r\n    static render(block, data, margin, chart, blockSize, donutSettings) {\r\n        const outerRadius = _DonutHelper__WEBPACK_IMPORTED_MODULE_2__.DonutHelper.getOuterRadius(margin, blockSize);\r\n        const thickness = _DonutHelper__WEBPACK_IMPORTED_MODULE_2__.DonutHelper.getThickness(donutSettings, blockSize, margin);\r\n        const innerRadius = _DonutHelper__WEBPACK_IMPORTED_MODULE_2__.DonutHelper.getInnerRadius(outerRadius, thickness);\r\n        const arc = _DonutHelper__WEBPACK_IMPORTED_MODULE_2__.DonutHelper.getArcGenerator(outerRadius, innerRadius);\r\n        const pie = _DonutHelper__WEBPACK_IMPORTED_MODULE_2__.DonutHelper.getPieGenerator(chart.data.valueField.name, donutSettings.padAngle);\r\n        const translate = _DonutHelper__WEBPACK_IMPORTED_MODULE_2__.DonutHelper.getTranslate(margin, blockSize);\r\n        const donutBlock = block.getSvg()\r\n            .append('g')\r\n            .attr('class', this.donutBlockClass)\r\n            .attr('x', translate.x)\r\n            .attr('y', translate.y)\r\n            .attr('transform', `translate(${translate.x}, ${translate.y})`);\r\n        const items = donutBlock\r\n            .selectAll(`.${this.arcItemClass}`)\r\n            .data(pie(data))\r\n            .enter()\r\n            .append('g')\r\n            .attr('class', this.arcItemClass);\r\n        const arcs = items\r\n            .append('path')\r\n            .attr('d', arc);\r\n        _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.setCssClasses(arcs, chart.cssClasses);\r\n        this.setElementsColor(items, chart.style.elementColors);\r\n        _aggregator__WEBPACK_IMPORTED_MODULE_1__.Aggregator.render(block, data, chart.data.valueField.name, innerRadius, translate, thickness);\r\n    }\r\n    static getAllArcGroups(block) {\r\n        return block.getSvg()\r\n            .selectAll(`.${this.arcItemClass}`);\r\n    }\r\n    static setElementsColor(arcItems, colorPalette) {\r\n        arcItems\r\n            .select('path')\r\n            .style('fill', (d, i) => colorPalette[i % colorPalette.length].toString());\r\n    }\r\n}\r\nDonut.donutBlockClass = 'donut-block';\r\nDonut.arcItemClass = 'arc';\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/polarNotation/donut.ts?");

/***/ }),

/***/ "./src/engine/twoDimensionalNotation/area/area.ts":
/*!********************************************************!*\
  !*** ./src/engine/twoDimensionalNotation/area/area.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Area\": () => /* binding */ Area\n/* harmony export */ });\n/* harmony import */ var d3_shape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-shape */ \"./node_modules/d3-shape/src/stack.js\");\n/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! d3-selection */ \"./node_modules/d3-selection/src/select.js\");\n/* harmony import */ var d3_transition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-transition */ \"./node_modules/d3-transition/src/index.js\");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../helper */ \"./src/engine/helper.ts\");\n/* harmony import */ var _features_lineDots_dot__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../features/lineDots/dot */ \"./src/engine/features/lineDots/dot.ts\");\n/* harmony import */ var _areaHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./areaHelper */ \"./src/engine/twoDimensionalNotation/area/areaHelper.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\nd3_selection__WEBPACK_IMPORTED_MODULE_4__.default.prototype.transition = d3_transition__WEBPACK_IMPORTED_MODULE_0__.transition;\r\nclass Area {\r\n    static render(block, scales, data, keyField, margin, keyAxisOrient, chart, blockSize, isSegmented) {\r\n        if (isSegmented)\r\n            this.renderSegmented(block, scales, data, keyField, margin, keyAxisOrient, chart, blockSize);\r\n        else\r\n            this.renderGrouped(block, scales, data, keyField, margin, keyAxisOrient, chart, blockSize);\r\n    }\r\n    static updateAreaChartByValueAxis(block, scales, data, keyField, margin, chart, keyAxisOrient, blockSize, isSegmented) {\r\n        if (isSegmented) {\r\n            const areaGenerator = _areaHelper__WEBPACK_IMPORTED_MODULE_3__.AreaHelper.getSegmentedAreaGenerator(keyAxisOrient, scales, margin, keyField.name);\r\n            const areas = block.getChartBlock()\r\n                .selectAll(`path.${this.areaChartClass}${_helper__WEBPACK_IMPORTED_MODULE_1__.Helper.getCssClassesLine(chart.cssClasses)}`);\r\n            areas\r\n                .transition()\r\n                .duration(1000)\r\n                .attr('d', d => areaGenerator(d));\r\n            areas.each((d, i) => {\r\n                _features_lineDots_dot__WEBPACK_IMPORTED_MODULE_2__.Dot.updateDotsCoordinateByValueAxis(block, d, keyAxisOrient, scales, margin, keyField.name, '1', chart.cssClasses, i, isSegmented);\r\n            });\r\n        }\r\n        else {\r\n            chart.data.valueFields.forEach((field, index) => {\r\n                const area = _areaHelper__WEBPACK_IMPORTED_MODULE_3__.AreaHelper.getGroupedAreaGenerator(keyAxisOrient, scales, margin, keyField.name, field.name, blockSize);\r\n                block.getChartBlock()\r\n                    .select(`.${this.areaChartClass}${_helper__WEBPACK_IMPORTED_MODULE_1__.Helper.getCssClassesLine(chart.cssClasses)}.chart-element-${index}`)\r\n                    .transition()\r\n                    .duration(1000)\r\n                    .attr('d', area(data));\r\n                _features_lineDots_dot__WEBPACK_IMPORTED_MODULE_2__.Dot.updateDotsCoordinateByValueAxis(block, data, keyAxisOrient, scales, margin, keyField.name, field.name, chart.cssClasses, index, isSegmented);\r\n            });\r\n        }\r\n    }\r\n    static renderGrouped(block, scales, data, keyField, margin, keyAxisOrient, chart, blockSize) {\r\n        chart.data.valueFields.forEach((field, index) => {\r\n            const area = _areaHelper__WEBPACK_IMPORTED_MODULE_3__.AreaHelper.getGroupedAreaGenerator(keyAxisOrient, scales, margin, keyField.name, field.name, blockSize);\r\n            const path = block.getChartBlock()\r\n                .append('path')\r\n                .attr('d', area(data))\r\n                .attr('class', this.areaChartClass)\r\n                // .style('clip-path', `url(${block.getClipPathId()})`)\r\n                .style('pointer-events', 'none');\r\n            _helper__WEBPACK_IMPORTED_MODULE_1__.Helper.setCssClasses(path, _helper__WEBPACK_IMPORTED_MODULE_1__.Helper.getCssClassesWithElementIndex(chart.cssClasses, index));\r\n            _helper__WEBPACK_IMPORTED_MODULE_1__.Helper.setChartStyle(path, chart.style, index, 'fill');\r\n            _features_lineDots_dot__WEBPACK_IMPORTED_MODULE_2__.Dot.render(block, data, keyAxisOrient, scales, margin, keyField.name, field.name, chart.cssClasses, index, chart.style.elementColors, blockSize, false);\r\n        });\r\n    }\r\n    static renderSegmented(block, scales, data, keyField, margin, keyAxisOrient, chart, blockSize) {\r\n        const keys = chart.data.valueFields.map(field => field.name);\r\n        const stackedData = (0,d3_shape__WEBPACK_IMPORTED_MODULE_5__.default)().keys(keys)(data);\r\n        const area = _areaHelper__WEBPACK_IMPORTED_MODULE_3__.AreaHelper.getSegmentedAreaGenerator(keyAxisOrient, scales, margin, keyField.name);\r\n        const areas = block.getChartBlock()\r\n            .selectAll(`.${this.areaChartClass}${_helper__WEBPACK_IMPORTED_MODULE_1__.Helper.getCssClassesLine(chart.cssClasses)}`)\r\n            .data(stackedData)\r\n            .enter()\r\n            .append('path')\r\n            .attr('d', d => area(d))\r\n            .attr('class', this.areaChartClass)\r\n            // .style('clip-path', `url(${block.getClipPathId()})`)\r\n            .style('pointer-events', 'none');\r\n        areas.each(function (d, i) {\r\n            _helper__WEBPACK_IMPORTED_MODULE_1__.Helper.setCssClasses((0,d3_selection__WEBPACK_IMPORTED_MODULE_4__.default)(this), _helper__WEBPACK_IMPORTED_MODULE_1__.Helper.getCssClassesWithElementIndex(chart.cssClasses, i));\r\n        });\r\n        this.setSegmentColor(areas, chart.style.elementColors);\r\n        stackedData.forEach((sd, index) => {\r\n            _features_lineDots_dot__WEBPACK_IMPORTED_MODULE_2__.Dot.render(block, sd, keyAxisOrient, scales, margin, keyField.name, '1', chart.cssClasses, index, chart.style.elementColors, blockSize, true);\r\n        });\r\n    }\r\n    static setSegmentColor(segments, colorPalette) {\r\n        segments.style('fill', (d, i) => colorPalette[i % colorPalette.length].toString());\r\n    }\r\n}\r\nArea.areaChartClass = 'area';\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/twoDimensionalNotation/area/area.ts?");

/***/ }),

/***/ "./src/engine/twoDimensionalNotation/area/areaHelper.ts":
/*!**************************************************************!*\
  !*** ./src/engine/twoDimensionalNotation/area/areaHelper.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AreaHelper\": () => /* binding */ AreaHelper\n/* harmony export */ });\n/* harmony import */ var d3_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-shape */ \"./node_modules/d3-shape/src/area.js\");\n/* harmony import */ var _features_scale_scale__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../features/scale/scale */ \"./src/engine/features/scale/scale.ts\");\n\r\n\r\nclass AreaHelper {\r\n    static getGroupedAreaGenerator(keyAxisOrient, scales, margin, keyFieldName, valueFieldName, blockSize) {\r\n        if (keyAxisOrient === 'bottom' || keyAxisOrient === 'top')\r\n            return (0,d3_shape__WEBPACK_IMPORTED_MODULE_1__.default)()\r\n                .x(d => _features_scale_scale__WEBPACK_IMPORTED_MODULE_0__.Scale.getScaledValue(scales.scaleKey, d[keyFieldName]) + margin.left)\r\n                .y0(d => this.getZeroCoordinate(keyAxisOrient, margin, blockSize))\r\n                .y1(d => scales.scaleValue(d[valueFieldName]) + margin.top);\r\n        if (keyAxisOrient === 'left' || keyAxisOrient === 'right')\r\n            return (0,d3_shape__WEBPACK_IMPORTED_MODULE_1__.default)()\r\n                .x0(d => this.getZeroCoordinate(keyAxisOrient, margin, blockSize))\r\n                .x1(d => scales.scaleValue(d[valueFieldName]) + margin.left)\r\n                .y(d => _features_scale_scale__WEBPACK_IMPORTED_MODULE_0__.Scale.getScaledValue(scales.scaleKey, d[keyFieldName]) + margin.top);\r\n    }\r\n    static getSegmentedAreaGenerator(keyAxisOrient, scales, margin, keyFieldName) {\r\n        if (keyAxisOrient === 'bottom' || keyAxisOrient === 'top') {\r\n            return (0,d3_shape__WEBPACK_IMPORTED_MODULE_1__.default)()\r\n                .x(d => _features_scale_scale__WEBPACK_IMPORTED_MODULE_0__.Scale.getScaledValue(scales.scaleKey, d.data[keyFieldName]) + margin.left)\r\n                .y0(d => scales.scaleValue(d[0]) + margin.top)\r\n                .y1(d => scales.scaleValue(d[1]) + margin.top);\r\n        }\r\n        if (keyAxisOrient === 'left' || keyAxisOrient === 'right') {\r\n            return (0,d3_shape__WEBPACK_IMPORTED_MODULE_1__.default)()\r\n                .x0(d => scales.scaleValue(d[0]) + margin.left)\r\n                .x1(d => scales.scaleValue(d[1]) + margin.left)\r\n                .y(d => _features_scale_scale__WEBPACK_IMPORTED_MODULE_0__.Scale.getScaledValue(scales.scaleKey, d.data[keyFieldName]) + margin.top);\r\n        }\r\n    }\r\n    static getZeroCoordinate(axisOrient, margin, blockSize) {\r\n        if (axisOrient === 'bottom')\r\n            return blockSize.height - margin.bottom;\r\n        if (axisOrient === 'top')\r\n            return margin.top;\r\n        if (axisOrient === 'left')\r\n            return margin.left;\r\n        if (axisOrient === 'right')\r\n            return blockSize.width - margin.right;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/twoDimensionalNotation/area/areaHelper.ts?");

/***/ }),

/***/ "./src/engine/twoDimensionalNotation/bar/bar.ts":
/*!******************************************************!*\
  !*** ./src/engine/twoDimensionalNotation/bar/bar.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Bar\": () => /* binding */ Bar\n/* harmony export */ });\n/* harmony import */ var d3_shape__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! d3-shape */ \"./node_modules/d3-shape/src/stack.js\");\n/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! d3-selection */ \"./node_modules/d3-selection/src/select.js\");\n/* harmony import */ var d3_transition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-transition */ \"./node_modules/d3-transition/src/index.js\");\n/* harmony import */ var _valueFormatter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../valueFormatter */ \"./src/engine/valueFormatter.ts\");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../helper */ \"./src/engine/helper.ts\");\n/* harmony import */ var _features_embeddedLabels_embeddedLabels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../features/embeddedLabels/embeddedLabels */ \"./src/engine/features/embeddedLabels/embeddedLabels.ts\");\n/* harmony import */ var _features_embeddedLabels_embeddedLabelsHelper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../features/embeddedLabels/embeddedLabelsHelper */ \"./src/engine/features/embeddedLabels/embeddedLabelsHelper.ts\");\n/* harmony import */ var _barHelper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./barHelper */ \"./src/engine/twoDimensionalNotation/bar/barHelper.ts\");\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! d3-array */ \"./node_modules/d3-array/src/sum.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nd3_selection__WEBPACK_IMPORTED_MODULE_6__.default.prototype.transition = d3_transition__WEBPACK_IMPORTED_MODULE_0__.transition;\r\nclass Bar {\r\n    static render(block, scales, data, keyField, margin, keyAxisOrient, chart, blockSize, barSettings, barsAmounts, isSegmented, firstBarIndex) {\r\n        if (isSegmented)\r\n            this.renderSegmented(block, scales, data, keyField, margin, keyAxisOrient, chart, barsAmounts, blockSize, firstBarIndex, barSettings);\r\n        else\r\n            this.renderGrouped(block, scales, data, keyField, margin, keyAxisOrient, chart, barsAmounts, blockSize, firstBarIndex, barSettings);\r\n    }\r\n    static updateBarChartByValueAxis(block, scales, margin, keyAxisOrient, chart, blockSize, isSegmented) {\r\n        if (isSegmented) {\r\n            const bars = block.getChartBlock()\r\n                .selectAll(`.${this.barItemClass}${_helper__WEBPACK_IMPORTED_MODULE_2__.Helper.getCssClassesLine(chart.cssClasses)}`);\r\n            this.fillStackedBarAttrsByKeyOrientWithTransition(bars, keyAxisOrient, scales.scaleValue, margin, blockSize, 1000);\r\n        }\r\n        else {\r\n            chart.data.valueFields.forEach((field, index) => {\r\n                const bars = block.getChartBlock()\r\n                    .selectAll(`.${this.barItemClass}${_helper__WEBPACK_IMPORTED_MODULE_2__.Helper.getCssClassesLine(chart.cssClasses)}.chart-element-${index}`);\r\n                this.fillBarAttrsByKeyOrientWithTransition(bars, keyAxisOrient, scales.scaleValue, margin, field.name, blockSize, 1000);\r\n            });\r\n        }\r\n    }\r\n    static getAllBarItems(block, chartCssClasses) {\r\n        return block.getSvg().selectAll(`rect.${this.barItemClass}${_helper__WEBPACK_IMPORTED_MODULE_2__.Helper.getCssClassesLine(chartCssClasses)}`);\r\n    }\r\n    static renderGrouped(block, scales, data, keyField, margin, keyAxisOrient, chart, barsAmounts, blockSize, firstBarIndex, barSettings) {\r\n        this.renderBarGroups(block, data);\r\n        chart.data.valueFields.forEach((field, index) => {\r\n            const bars = block.getChartBlock()\r\n                .selectAll('.bar-group')\r\n                .data(data)\r\n                .append('rect')\r\n                .attr('class', this.barItemClass);\r\n            // .style('clip-path', `url(${block.getClipPathId()})`);\r\n            const barAttrs = _barHelper__WEBPACK_IMPORTED_MODULE_5__.BarHelper.getGroupedBarAttrsByKeyOrient(keyAxisOrient, scales, margin, keyField.name, field.name, blockSize, _barHelper__WEBPACK_IMPORTED_MODULE_5__.BarHelper.getBarIndex(barsAmounts, chart.index) + index - firstBarIndex, (0,d3_array__WEBPACK_IMPORTED_MODULE_7__.default)(barsAmounts), barSettings);\r\n            this.fillBarAttrsByKeyOrient(bars, barAttrs);\r\n            _helper__WEBPACK_IMPORTED_MODULE_2__.Helper.setCssClasses(bars, _helper__WEBPACK_IMPORTED_MODULE_2__.Helper.getCssClassesWithElementIndex(chart.cssClasses, index));\r\n            _helper__WEBPACK_IMPORTED_MODULE_2__.Helper.setChartStyle(bars, chart.style, index, 'fill');\r\n            if (chart.embeddedLabels !== 'none')\r\n                _features_embeddedLabels_embeddedLabels__WEBPACK_IMPORTED_MODULE_3__.EmbeddedLabels.render(block, bars, _features_embeddedLabels_embeddedLabelsHelper__WEBPACK_IMPORTED_MODULE_4__.EmbeddedLabelsHelper.getLabelField(chart.embeddedLabels, chart.data.valueFields, keyField, index), chart.embeddedLabels, keyAxisOrient, blockSize, margin);\r\n        });\r\n    }\r\n    static renderSegmented(block, scales, data, keyField, margin, keyAxisOrient, chart, barsAmounts, blockSize, firstBarIndex, barSettings) {\r\n        const keys = chart.data.valueFields.map(field => field.name);\r\n        const stackedData = (0,d3_shape__WEBPACK_IMPORTED_MODULE_8__.default)().keys(keys)(data);\r\n        let groups = block.getChartBlock()\r\n            .selectAll('g')\r\n            .data(stackedData);\r\n        if (groups.empty())\r\n            groups = groups\r\n                .data(stackedData)\r\n                .enter()\r\n                .append('g');\r\n        const bars = groups\r\n            .selectAll(`rect${_helper__WEBPACK_IMPORTED_MODULE_2__.Helper.getCssClassesLine(chart.cssClasses)}`)\r\n            .data(d => d)\r\n            .enter()\r\n            .append('rect')\r\n            .attr('class', this.barItemClass);\r\n        // .style('clip-path', `url(${block.getClipPathId()})`);\r\n        const barAttrs = _barHelper__WEBPACK_IMPORTED_MODULE_5__.BarHelper.getStackedBarAttrByKeyOrient(keyAxisOrient, scales, margin, keyField.name, blockSize, _barHelper__WEBPACK_IMPORTED_MODULE_5__.BarHelper.getBarIndex(barsAmounts, chart.index) - firstBarIndex, (0,d3_array__WEBPACK_IMPORTED_MODULE_7__.default)(barsAmounts), barSettings);\r\n        bars\r\n            .attr('x', barAttrs.x)\r\n            .attr('y', barAttrs.y)\r\n            .attr('width', barAttrs.width)\r\n            .attr('height', barAttrs.height);\r\n        _helper__WEBPACK_IMPORTED_MODULE_2__.Helper.setCssClasses(bars, chart.cssClasses); // Для обозначения принадлежности бара к конкретному чарту\r\n        const thisClass = this;\r\n        groups.each(function (d, i) {\r\n            _helper__WEBPACK_IMPORTED_MODULE_2__.Helper.setCssClasses((0,d3_selection__WEBPACK_IMPORTED_MODULE_6__.default)(this).selectAll(`rect${_helper__WEBPACK_IMPORTED_MODULE_2__.Helper.getCssClassesLine(chart.cssClasses)}`), _helper__WEBPACK_IMPORTED_MODULE_2__.Helper.getCssClassesWithElementIndex(chart.cssClasses, i)); // Для обозначения принадлежности бара к конкретной части стака\r\n            thisClass.setSegmentColor((0,d3_selection__WEBPACK_IMPORTED_MODULE_6__.default)(this).selectAll(_helper__WEBPACK_IMPORTED_MODULE_2__.Helper.getCssClassesLine(chart.cssClasses)), chart.style.elementColors, i);\r\n        });\r\n    }\r\n    static renderBarGroups(block, data) {\r\n        let groups = block.getChartBlock()\r\n            .selectAll('.bar-group');\r\n        if (groups.empty())\r\n            groups = block.getChartBlock()\r\n                .selectAll('.bar-group')\r\n                .data(data)\r\n                .enter()\r\n                .append('g')\r\n                .attr('class', 'bar-group');\r\n    }\r\n    static fillBarAttrsByKeyOrient(bars, barAttrs) {\r\n        bars.attr('x', d => barAttrs.x(d))\r\n            .attr('y', d => barAttrs.y(d))\r\n            .attr('height', d => barAttrs.height(d))\r\n            .attr('width', d => barAttrs.width(d));\r\n    }\r\n    static fillBarAttrsByKeyOrientWithTransition(bars, axisOrient, scaleValue, margin, valueField, blockSize, transitionDuration) {\r\n        const barsTran = bars.transition().duration(transitionDuration);\r\n        if (axisOrient === 'top')\r\n            barsTran\r\n                .attr('y', d => margin.top)\r\n                .attr('height', d => _valueFormatter__WEBPACK_IMPORTED_MODULE_1__.ValueFormatter.getValueOrZero(scaleValue(d[valueField])));\r\n        else if (axisOrient === 'bottom')\r\n            barsTran\r\n                .attr('y', d => scaleValue(d[valueField]) + margin.top)\r\n                .attr('height', d => _valueFormatter__WEBPACK_IMPORTED_MODULE_1__.ValueFormatter.getValueOrZero(blockSize.height - margin.top - margin.bottom - scaleValue(d[valueField])));\r\n        else if (axisOrient === 'left')\r\n            barsTran\r\n                .attr('x', d => margin.left)\r\n                .attr('width', d => _valueFormatter__WEBPACK_IMPORTED_MODULE_1__.ValueFormatter.getValueOrZero(scaleValue(d[valueField])));\r\n        else if (axisOrient === 'right')\r\n            barsTran\r\n                .attr('x', d => scaleValue(d[valueField]) + margin.left)\r\n                .attr('width', d => _valueFormatter__WEBPACK_IMPORTED_MODULE_1__.ValueFormatter.getValueOrZero(blockSize.width - margin.left - margin.right - scaleValue(d[valueField])));\r\n    }\r\n    static fillStackedBarAttrsByKeyOrientWithTransition(bars, axisOrient, scaleValue, margin, blockSize, transitionDuration) {\r\n        const barsTran = bars.transition().duration(transitionDuration);\r\n        if (axisOrient === 'top') {\r\n            barsTran\r\n                .attr('y', d => margin.top + scaleValue(d[0]))\r\n                .attr('height', d => _valueFormatter__WEBPACK_IMPORTED_MODULE_1__.ValueFormatter.getValueOrZero(scaleValue(d[1] - d[0])));\r\n        }\r\n        if (axisOrient === 'bottom') {\r\n            barsTran\r\n                .attr('y', d => scaleValue(d[1]) + margin.top)\r\n                .attr('height', d => blockSize.height - margin.top - margin.bottom - scaleValue(d[1] - d[0]));\r\n        }\r\n        if (axisOrient === 'left') {\r\n            barsTran\r\n                .attr('x', d => margin.left + scaleValue(d[0]) + 1) // 1px - ось\r\n                .attr('width', d => _valueFormatter__WEBPACK_IMPORTED_MODULE_1__.ValueFormatter.getValueOrZero(scaleValue(d[1] - d[0])));\r\n        }\r\n        if (axisOrient === 'right') {\r\n            barsTran\r\n                .attr('x', d => scaleValue(d[1]) + margin.left)\r\n                .attr('width', d => _valueFormatter__WEBPACK_IMPORTED_MODULE_1__.ValueFormatter.getValueOrZero(blockSize.width - margin.left - margin.right - scaleValue(d[1] - d[0])));\r\n        }\r\n    }\r\n    static setSegmentColor(segments, colorPalette, segmentedIndex) {\r\n        segments.style('fill', colorPalette[segmentedIndex % colorPalette.length].toString());\r\n    }\r\n}\r\nBar.barItemClass = 'bar-item';\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/twoDimensionalNotation/bar/bar.ts?");

/***/ }),

/***/ "./src/engine/twoDimensionalNotation/bar/barHelper.ts":
/*!************************************************************!*\
  !*** ./src/engine/twoDimensionalNotation/bar/barHelper.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BarHelper\": () => /* binding */ BarHelper\n/* harmony export */ });\n/* harmony import */ var _features_scale_scale__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../features/scale/scale */ \"./src/engine/features/scale/scale.ts\");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../helper */ \"./src/engine/helper.ts\");\n/* harmony import */ var _valueFormatter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../valueFormatter */ \"./src/engine/valueFormatter.ts\");\n\r\n\r\n\r\nclass BarHelper {\r\n    static getGroupedBarAttrsByKeyOrient(axisOrient, scales, margin, keyField, valueField, blockSize, barIndex, barsAmount, barSettings) {\r\n        const barDistance = barSettings.barDistance;\r\n        const barStep = (_features_scale_scale__WEBPACK_IMPORTED_MODULE_0__.Scale.getScaleBandWidth(scales.scaleKey) - barDistance * (barsAmount - 1)) / barsAmount; // Space for one bar\r\n        const barSize = barStep > barSettings.maxBarWidth ? barSettings.maxBarWidth : barStep;\r\n        const barDiff = (barStep - barSize) * barsAmount / 2; // if bar bigger than maxWidth, diff for x coordinate\r\n        const attrs = {\r\n            x: null,\r\n            y: null,\r\n            width: null,\r\n            height: null\r\n        };\r\n        if (axisOrient === 'top' || axisOrient === 'bottom') {\r\n            attrs.x = d => scales.scaleKey(d[keyField]) + margin.left + barSize * barIndex + barDistance * barIndex + barDiff;\r\n            attrs.width = d => barSize;\r\n        }\r\n        if (axisOrient === 'left' || axisOrient === 'right') {\r\n            attrs.y = d => scales.scaleKey(d[keyField]) + margin.top + barSize * barIndex + barDistance * barIndex + barDiff;\r\n            attrs.height = d => barSize;\r\n        }\r\n        if (axisOrient === 'top') {\r\n            attrs.y = d => margin.top;\r\n            attrs.height = d => _helper__WEBPACK_IMPORTED_MODULE_1__.Helper.getValueWithLimiter(_valueFormatter__WEBPACK_IMPORTED_MODULE_2__.ValueFormatter.getValueOrZero(scales.scaleValue(d[valueField])), blockSize.height - margin.top - margin.bottom, true);\r\n        }\r\n        else if (axisOrient === 'bottom') {\r\n            attrs.y = d => scales.scaleValue(d[valueField]) + margin.top;\r\n            attrs.height = d => _valueFormatter__WEBPACK_IMPORTED_MODULE_2__.ValueFormatter.getValueOrZero(blockSize.height - margin.top - margin.bottom - scales.scaleValue(d[valueField]));\r\n        }\r\n        else if (axisOrient === 'left') {\r\n            attrs.x = d => margin.left + 1;\r\n            attrs.width = d => _valueFormatter__WEBPACK_IMPORTED_MODULE_2__.ValueFormatter.getValueOrZero(scales.scaleValue(d[valueField]));\r\n        }\r\n        else if (axisOrient === 'right') {\r\n            attrs.x = d => scales.scaleValue(d[valueField]) + margin.left;\r\n            attrs.width = d => _valueFormatter__WEBPACK_IMPORTED_MODULE_2__.ValueFormatter.getValueOrZero(blockSize.width - margin.left - margin.right - scales.scaleValue(d[valueField]));\r\n        }\r\n        return attrs;\r\n    }\r\n    static getStackedBarAttrByKeyOrient(axisOrient, scales, margin, keyField, blockSize, barIndex, barsAmount, barSettings) {\r\n        const barDistance = barSettings.barDistance;\r\n        const barStep = (_features_scale_scale__WEBPACK_IMPORTED_MODULE_0__.Scale.getScaleBandWidth(scales.scaleKey) - barDistance * (barsAmount - 1)) / barsAmount; // Space for one bar\r\n        const barSize = barStep > barSettings.maxBarWidth ? barSettings.maxBarWidth : barStep;\r\n        const barDiff = (barStep - barSize) * barsAmount / 2; // if bar bigger than maxWidth, diff for x coordinate\r\n        const attrs = {\r\n            x: null,\r\n            y: null,\r\n            width: null,\r\n            height: null\r\n        };\r\n        if (axisOrient === 'top' || axisOrient === 'bottom') {\r\n            attrs.x = d => scales.scaleKey(d.data[keyField]) + margin.left + barSize * barIndex + barDistance * barIndex + barDiff;\r\n            attrs.width = d => barSize;\r\n        }\r\n        if (axisOrient === 'left' || axisOrient === 'right') {\r\n            attrs.y = d => scales.scaleKey(d.data[keyField]) + margin.top + barSize * barIndex + barDistance * barIndex + barDiff;\r\n            attrs.height = d => barSize;\r\n        }\r\n        if (axisOrient === 'top') {\r\n            attrs.y = d => margin.top + scales.scaleValue(d[0]);\r\n            attrs.height = d => _valueFormatter__WEBPACK_IMPORTED_MODULE_2__.ValueFormatter.getValueOrZero(scales.scaleValue(d[1] - d[0]));\r\n        }\r\n        if (axisOrient === 'bottom') {\r\n            attrs.y = d => scales.scaleValue(d[1]) + margin.top;\r\n            attrs.height = d => blockSize.height - margin.top - margin.bottom - scales.scaleValue(d[1] - d[0]);\r\n        }\r\n        if (axisOrient === 'left') {\r\n            attrs.x = d => margin.left + scales.scaleValue(d[0]) + 1;\r\n            attrs.width = d => _valueFormatter__WEBPACK_IMPORTED_MODULE_2__.ValueFormatter.getValueOrZero(scales.scaleValue(d[1] - d[0]));\r\n        }\r\n        if (axisOrient === 'right') {\r\n            attrs.x = d => scales.scaleValue(d[1]) + margin.left;\r\n            attrs.width = d => _valueFormatter__WEBPACK_IMPORTED_MODULE_2__.ValueFormatter.getValueOrZero(blockSize.width - margin.left - margin.right - scales.scaleValue(d[1] - d[0]));\r\n        }\r\n        return attrs;\r\n    }\r\n    static getBarsInGroupAmount(charts) {\r\n        let amounts = [];\r\n        charts.forEach((chart, i) => {\r\n            if (chart.type === 'bar' && chart.isSegmented)\r\n                amounts.push(1); // Сегментированный бар содержит все свои valueFields в одном баре\r\n            else if (chart.type === 'bar')\r\n                amounts.push(chart.data.valueFields.length);\r\n        });\r\n        return amounts;\r\n    }\r\n    static getBarIndex(barsAmounts, chartIndex) {\r\n        if (barsAmounts.length < 2)\r\n            return 0;\r\n        let index = 0;\r\n        barsAmounts.forEach((chartBars, i) => {\r\n            if (i < chartIndex) {\r\n                index += chartBars;\r\n            }\r\n        });\r\n        return index;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/twoDimensionalNotation/bar/barHelper.ts?");

/***/ }),

/***/ "./src/engine/twoDimensionalNotation/line/line.ts":
/*!********************************************************!*\
  !*** ./src/engine/twoDimensionalNotation/line/line.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Line\": () => /* binding */ Line\n/* harmony export */ });\n/* harmony import */ var d3_shape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-shape */ \"./node_modules/d3-shape/src/stack.js\");\n/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! d3-selection */ \"./node_modules/d3-selection/src/select.js\");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../helper */ \"./src/engine/helper.ts\");\n/* harmony import */ var _features_lineDots_dot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../features/lineDots/dot */ \"./src/engine/features/lineDots/dot.ts\");\n/* harmony import */ var d3_transition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-transition */ \"./node_modules/d3-transition/src/index.js\");\n/* harmony import */ var _lineHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lineHelper */ \"./src/engine/twoDimensionalNotation/line/lineHelper.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\nd3_selection__WEBPACK_IMPORTED_MODULE_4__.default.prototype.transition = d3_transition__WEBPACK_IMPORTED_MODULE_2__.transition;\r\nclass Line {\r\n    static render(block, scales, data, keyField, margin, keyAxisOrient, chart, blockSize, isSegmented) {\r\n        if (isSegmented)\r\n            this.renderSegmented(block, scales, data, keyField, margin, keyAxisOrient, chart, blockSize);\r\n        else\r\n            this.renderGrouped(block, scales, data, keyField, margin, keyAxisOrient, chart, blockSize);\r\n    }\r\n    static updateLineChartByValueAxis(block, scales, data, keyField, margin, keyAxisOrient, chart) {\r\n        if (chart.isSegmented) {\r\n            const lineGenerator = _lineHelper__WEBPACK_IMPORTED_MODULE_3__.LineHelper.getSegmentedLineGenerator(keyAxisOrient, scales, keyField.name, margin);\r\n            const lines = block.getChartBlock()\r\n                .selectAll(`path.${this.lineChartClass}${_helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getCssClassesLine(chart.cssClasses)}`);\r\n            lines\r\n                .transition()\r\n                .duration(1000)\r\n                .attr('d', d => lineGenerator(d));\r\n            lines.each((d, i) => {\r\n                _features_lineDots_dot__WEBPACK_IMPORTED_MODULE_1__.Dot.updateDotsCoordinateByValueAxis(block, d, keyAxisOrient, scales, margin, keyField.name, '1', chart.cssClasses, i, chart.isSegmented);\r\n            });\r\n        }\r\n        else {\r\n            chart.data.valueFields.forEach((valueField, index) => {\r\n                const line = _lineHelper__WEBPACK_IMPORTED_MODULE_3__.LineHelper.getLineGenerator(keyAxisOrient, scales, keyField.name, valueField.name, margin);\r\n                block.getChartBlock()\r\n                    .select(`.${this.lineChartClass}${_helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getCssClassesLine(chart.cssClasses)}.chart-element-${index}`)\r\n                    .transition()\r\n                    .duration(1000)\r\n                    .attr('d', line(data));\r\n                _features_lineDots_dot__WEBPACK_IMPORTED_MODULE_1__.Dot.updateDotsCoordinateByValueAxis(block, data, keyAxisOrient, scales, margin, keyField.name, valueField.name, chart.cssClasses, index, false);\r\n            });\r\n        }\r\n    }\r\n    static renderGrouped(block, scales, data, keyField, margin, keyAxisOrient, chart, blockSize) {\r\n        chart.data.valueFields.forEach((valueField, index) => {\r\n            const lineGenerator = _lineHelper__WEBPACK_IMPORTED_MODULE_3__.LineHelper.getLineGenerator(keyAxisOrient, scales, keyField.name, valueField.name, margin);\r\n            const path = block.getChartBlock()\r\n                .append('path')\r\n                .attr('d', lineGenerator(data))\r\n                .attr('class', this.lineChartClass)\r\n                .style('fill', 'none')\r\n                // .style('clip-path', `url(${block.getClipPathId()})`)\r\n                .style('pointer-events', 'none');\r\n            _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.setCssClasses(path, _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getCssClassesWithElementIndex(chart.cssClasses, index));\r\n            _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.setChartStyle(path, chart.style, index, 'stroke');\r\n            _features_lineDots_dot__WEBPACK_IMPORTED_MODULE_1__.Dot.render(block, data, keyAxisOrient, scales, margin, keyField.name, valueField.name, chart.cssClasses, index, chart.style.elementColors, blockSize, false);\r\n        });\r\n    }\r\n    static renderSegmented(block, scales, data, keyField, margin, keyAxisOrient, chart, blockSize) {\r\n        const keys = chart.data.valueFields.map(field => field.name);\r\n        const stackedData = (0,d3_shape__WEBPACK_IMPORTED_MODULE_5__.default)().keys(keys)(data);\r\n        const lineGenerator = _lineHelper__WEBPACK_IMPORTED_MODULE_3__.LineHelper.getSegmentedLineGenerator(keyAxisOrient, scales, keyField.name, margin);\r\n        const lines = block.getChartBlock()\r\n            .selectAll(`.${this.lineChartClass}${_helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getCssClassesLine(chart.cssClasses)}`)\r\n            .data(stackedData)\r\n            .enter()\r\n            .append('path')\r\n            .attr('d', d => lineGenerator(d))\r\n            .attr('class', this.lineChartClass)\r\n            .style('fill', 'none')\r\n            // .style('clip-path', `url(${block.getClipPathId()})`)\r\n            .style('pointer-events', 'none');\r\n        lines.each(function (d, i) {\r\n            _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.setCssClasses((0,d3_selection__WEBPACK_IMPORTED_MODULE_4__.default)(this), _helper__WEBPACK_IMPORTED_MODULE_0__.Helper.getCssClassesWithElementIndex(chart.cssClasses, i));\r\n        });\r\n        this.setSegmentColor(lines, chart.style.elementColors);\r\n        stackedData.forEach((sd, index) => {\r\n            _features_lineDots_dot__WEBPACK_IMPORTED_MODULE_1__.Dot.render(block, sd, keyAxisOrient, scales, margin, keyField.name, '1', chart.cssClasses, index, chart.style.elementColors, blockSize, true);\r\n        });\r\n    }\r\n    static setSegmentColor(segments, colorPalette) {\r\n        segments.style('stroke', (d, i) => colorPalette[i % colorPalette.length].toString());\r\n    }\r\n}\r\nLine.lineChartClass = 'line';\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/twoDimensionalNotation/line/line.ts?");

/***/ }),

/***/ "./src/engine/twoDimensionalNotation/line/lineHelper.ts":
/*!**************************************************************!*\
  !*** ./src/engine/twoDimensionalNotation/line/lineHelper.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LineHelper\": () => /* binding */ LineHelper\n/* harmony export */ });\n/* harmony import */ var d3_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-shape */ \"./node_modules/d3-shape/src/line.js\");\n/* harmony import */ var _features_scale_scale__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../features/scale/scale */ \"./src/engine/features/scale/scale.ts\");\n\r\n\r\nclass LineHelper {\r\n    static getLineGenerator(keyAxisOrient, scales, keyFieldName, valueFieldName, margin) {\r\n        if (keyAxisOrient === 'bottom' || keyAxisOrient === 'top') {\r\n            return (0,d3_shape__WEBPACK_IMPORTED_MODULE_1__.default)()\r\n                .x(d => _features_scale_scale__WEBPACK_IMPORTED_MODULE_0__.Scale.getScaledValue(scales.scaleKey, d[keyFieldName]) + margin.left)\r\n                .y(d => scales.scaleValue(d[valueFieldName]) + margin.top);\r\n        }\r\n        if (keyAxisOrient === 'left' || keyAxisOrient === 'right') {\r\n            return (0,d3_shape__WEBPACK_IMPORTED_MODULE_1__.default)()\r\n                .x(d => scales.scaleValue(d[valueFieldName]) + margin.left)\r\n                .y(d => _features_scale_scale__WEBPACK_IMPORTED_MODULE_0__.Scale.getScaledValue(scales.scaleKey, d[keyFieldName]) + margin.top);\r\n        }\r\n    }\r\n    static getSegmentedLineGenerator(keyAxisOrient, scales, keyFieldName, margin) {\r\n        if (keyAxisOrient === 'bottom' || keyAxisOrient === 'top') {\r\n            return (0,d3_shape__WEBPACK_IMPORTED_MODULE_1__.default)()\r\n                .x(d => _features_scale_scale__WEBPACK_IMPORTED_MODULE_0__.Scale.getScaledValue(scales.scaleKey, d.data[keyFieldName]) + margin.left)\r\n                .y(d => scales.scaleValue(d[1]) + margin.top);\r\n        }\r\n        if (keyAxisOrient === 'left' || keyAxisOrient === 'right') {\r\n            return (0,d3_shape__WEBPACK_IMPORTED_MODULE_1__.default)()\r\n                .x(d => scales.scaleValue(d[1]) + margin.left)\r\n                .y(d => _features_scale_scale__WEBPACK_IMPORTED_MODULE_0__.Scale.getScaledValue(scales.scaleKey, d.data[keyFieldName]) + margin.top);\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/twoDimensionalNotation/line/lineHelper.ts?");

/***/ }),

/***/ "./src/engine/valueFormatter.ts":
/*!**************************************!*\
  !*** ./src/engine/valueFormatter.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ValueFormatter\": () => /* binding */ ValueFormatter\n/* harmony export */ });\nclass ValueFormatter {\r\n    static formatValue(valueType, value) {\r\n        return this.format[valueType](value);\r\n    }\r\n    static setFormatFunction(formatFunction) {\r\n        this.format = formatFunction;\r\n    }\r\n    static getValueOrZero(value) {\r\n        return value > 0 ? value : 0;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/engine/valueFormatter.ts?");

/***/ }),

/***/ "./src/model/axisModel.ts":
/*!********************************!*\
  !*** ./src/model/axisModel.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AxisModel\": () => /* binding */ AxisModel\n/* harmony export */ });\n/* harmony import */ var _modelHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modelHelper */ \"./src/model/modelHelper.ts\");\n/* harmony import */ var _modelOptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modelOptions */ \"./src/model/modelOptions.ts\");\n\r\n\r\nclass AxisModel {\r\n    static getLabelSize(labelMaxWidth, labelTexts) {\r\n        const labelSize = {\r\n            width: 0,\r\n            height: 0\r\n        };\r\n        const textBlock = document.createElement('span');\r\n        textBlock.style.position = 'absolute';\r\n        textBlock.style.whiteSpace = 'nowrap';\r\n        textBlock.classList.add(_modelOptions__WEBPACK_IMPORTED_MODULE_1__.CLASSES.dataLabel);\r\n        let maxLabel = '';\r\n        let biggestScore = 0;\r\n        let maxWidth = 0;\r\n        labelTexts.forEach((text) => {\r\n            if (_modelHelper__WEBPACK_IMPORTED_MODULE_0__.ModelHelper.getStringScore(text) > biggestScore) {\r\n                maxLabel = text;\r\n                biggestScore = _modelHelper__WEBPACK_IMPORTED_MODULE_0__.ModelHelper.getStringScore(text);\r\n            }\r\n        });\r\n        textBlock.textContent = maxLabel === '0000' ? maxLabel : maxLabel + 'D';\r\n        document.body.append(textBlock);\r\n        maxWidth = Math.ceil(textBlock.getBoundingClientRect().width);\r\n        labelSize.height = textBlock.getBoundingClientRect().height;\r\n        labelSize.width = maxWidth > labelMaxWidth ? labelMaxWidth : maxWidth;\r\n        textBlock.remove();\r\n        return labelSize;\r\n    }\r\n    static getAxisLength(chartOrientation, margin, blockSize) {\r\n        if (chartOrientation === 'horizontal') {\r\n            return blockSize.height - margin.top - margin.bottom;\r\n        }\r\n        else {\r\n            return blockSize.width - margin.left - margin.right;\r\n        }\r\n    }\r\n    static getAxisOrient(axisType, chartOrientation, axisPosition) {\r\n        if (chartOrientation === 'vertical') {\r\n            if (axisPosition === 'start')\r\n                return axisType === _modelOptions__WEBPACK_IMPORTED_MODULE_1__.AxisType.Key ? 'top' : 'left';\r\n            return axisType === _modelOptions__WEBPACK_IMPORTED_MODULE_1__.AxisType.Key ? 'bottom' : 'right';\r\n        }\r\n        if (axisPosition === 'start')\r\n            return axisType === _modelOptions__WEBPACK_IMPORTED_MODULE_1__.AxisType.Key ? 'left' : 'top';\r\n        return axisType === _modelOptions__WEBPACK_IMPORTED_MODULE_1__.AxisType.Key ? 'right' : 'bottom';\r\n    }\r\n    static getAxisTranslateX(axisType, chartOrientation, axisPosition, margin, blockWidth) {\r\n        const orient = AxisModel.getAxisOrient(axisType, chartOrientation, axisPosition);\r\n        if (orient === 'top' || orient === 'left')\r\n            return margin.left;\r\n        else if (orient === 'bottom')\r\n            return margin.left;\r\n        return blockWidth - margin.right;\r\n    }\r\n    static getAxisTranslateY(axisType, chartOrientation, axisPosition, margin, blockHeight) {\r\n        const orient = AxisModel.getAxisOrient(axisType, chartOrientation, axisPosition);\r\n        if (orient === 'top' || orient === 'left')\r\n            return margin.top;\r\n        else if (orient === 'bottom')\r\n            return blockHeight - margin.bottom;\r\n        return margin.top;\r\n    }\r\n    static getKeyAxisLabelPosition(margin, blockSize, scopedDataLength) {\r\n        const minBandSize = 50;\r\n        if ((blockSize.width - margin.left - margin.right) / scopedDataLength < minBandSize)\r\n            return 'rotated';\r\n        return 'straight';\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/model/axisModel.ts?");

/***/ }),

/***/ "./src/model/chartStyleModel.ts":
/*!**************************************!*\
  !*** ./src/model/chartStyleModel.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ChartStyleModel\": () => /* binding */ ChartStyleModel\n/* harmony export */ });\n/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-color */ \"./node_modules/d3-color/src/color.js\");\n\r\nconst colorsTemplate = __webpack_require__(/*! ../assets/materialColors.json */ \"./src/assets/materialColors.json\");\r\nclass ChartStyleModel {\r\n    static getCssClasses(chartIndex) {\r\n        const cssClasses = [`chart-${chartIndex}`];\r\n        return cssClasses;\r\n    }\r\n    static get2DChartStyle(chartsAmount, chartType, chartsValueFieldAmount, chartIndex, isSegmented, chartStyleConfig) {\r\n        let startIndex = 0;\r\n        for (let i = 0; i < chartIndex; i++) {\r\n            startIndex += chartsValueFieldAmount[i];\r\n        }\r\n        const valueFieldsAmount = chartsValueFieldAmount[chartIndex];\r\n        return {\r\n            elementColors: this.getColors(this.palette, chartStyleConfig.step, valueFieldsAmount, startIndex, chartStyleConfig.baseColor, isSegmented),\r\n            opacity: this.getChartOpacity(chartsAmount, chartType, chartsValueFieldAmount[chartIndex], isSegmented)\r\n        };\r\n    }\r\n    static getChartStyle(elementsAmount, chartStyleConfig) {\r\n        return {\r\n            elementColors: this.getColors(this.palette, chartStyleConfig.step, elementsAmount, 0, chartStyleConfig.baseColor, false),\r\n            opacity: 1\r\n        };\r\n    }\r\n    static getChartOpacity(chartsLength, chartType, chartsValueFieldAmount, isSegmented) {\r\n        if (chartType === 'area' && (chartsLength > 1 || chartsValueFieldAmount > 1) && !isSegmented)\r\n            return 0.5; // combined area with other charts has 0.5 opacity\r\n        return 1;\r\n    }\r\n    static getColors(palette, step, valueFieldsAmount, startIndex, baseColorName, isSegmented) {\r\n        const colorsArray = [];\r\n        const baseColorIndex = this.getColorIndex(palette, baseColorName);\r\n        let indexOfDesired = 0;\r\n        startIndex *= step;\r\n        do {\r\n            indexOfDesired = baseColorIndex + startIndex + colorsArray.length * step;\r\n            indexOfDesired = indexOfDesired % palette.length;\r\n            if (isSegmented) {\r\n                colorsArray.push(...this.getColorRow(palette[indexOfDesired].colorPalette, valueFieldsAmount));\r\n            }\r\n            else {\r\n                colorsArray.push(this.getBaseColor(palette[indexOfDesired].colorPalette));\r\n            }\r\n        } while (colorsArray.length !== valueFieldsAmount);\r\n        return colorsArray.map(elementColor => (0,d3_color__WEBPACK_IMPORTED_MODULE_0__.default)(elementColor));\r\n    }\r\n    static getColorRow(colorSet, colorsAmount) {\r\n        const colors = [];\r\n        for (let colorCode in colorSet) {\r\n            if (colorCode === '100' || colorCode === '200' || colorCode === '300' || colorCode === '500')\r\n                colors.push(colorSet[colorCode]);\r\n        }\r\n        colors.reverse();\r\n        const chartColorSet = [];\r\n        for (let i = 0; i < colorsAmount; i++) {\r\n            chartColorSet.push(colors[i % colors.length]);\r\n        }\r\n        return chartColorSet;\r\n    }\r\n    static getColorIndex(palette, baseColorName) {\r\n        const index = palette.findIndex(colorObject => colorObject.colorName === baseColorName);\r\n        return index === -1 ? 0 : index;\r\n    }\r\n    static getBaseColor(colorSet) {\r\n        let firstKey;\r\n        for (let key in colorSet) {\r\n            firstKey = firstKey || key;\r\n            if (key === \"500\")\r\n                return colorSet[key];\r\n        }\r\n        return colorSet[firstKey];\r\n    }\r\n}\r\nChartStyleModel.palette = colorsTemplate.colors;\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/model/chartStyleModel.ts?");

/***/ }),

/***/ "./src/model/dataManagerModel.ts":
/*!***************************************!*\
  !*** ./src/model/dataManagerModel.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DataManagerModel\": () => /* binding */ DataManagerModel\n/* harmony export */ });\n/* harmony import */ var _axisModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./axisModel */ \"./src/model/axisModel.ts\");\n/* harmony import */ var _legendModel_legendCanvasModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./legendModel/legendCanvasModel */ \"./src/model/legendModel/legendCanvasModel.ts\");\n/* harmony import */ var _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./legendModel/legendModel */ \"./src/model/legendModel/legendModel.ts\");\n/* harmony import */ var _modelHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modelHelper */ \"./src/model/modelHelper.ts\");\n\r\n\r\n\r\n\r\nclass DataManagerModel {\r\n    static getPreparedData(data, allowableKeys, config) {\r\n        const scopedData = this.getScopedData(data, allowableKeys, config);\r\n        this.setDataType(scopedData, config);\r\n        return scopedData;\r\n    }\r\n    static getDataScope(config, margin, data, designerConfig, legendBlock) {\r\n        if (config.options.type === '2d' || config.options.type === 'interval') {\r\n            return this.getDataScopeFor2D(config.options, config.canvas.size, margin, data, designerConfig);\r\n        }\r\n        else if (config.options.type === 'polar') {\r\n            return this.getDataScopeForPolar(config.options, config.canvas.size, margin, data, designerConfig, legendBlock);\r\n        }\r\n    }\r\n    static getDataValuesByKeyField(data, dataSource, keyFieldName) {\r\n        return data[dataSource].map(dataRow => dataRow[keyFieldName]);\r\n    }\r\n    static getDataScopeFor2D(configOptions, blockSize, margin, data, designerConfig) {\r\n        // Выбор чартов, которые используют столбики\r\n        const chartsWithBarElement = configOptions.charts\r\n            .filter((chart) => chart.type === 'bar' || chart.type === 'gantt');\r\n        if (chartsWithBarElement.length !== 0) {\r\n            const axisLength = _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisLength(configOptions.orientation, margin, blockSize);\r\n            const uniqueKeys = _modelHelper__WEBPACK_IMPORTED_MODULE_3__.ModelHelper.getUniqueValues(data[configOptions.data.dataSource].map(d => d[configOptions.data.keyField.name]));\r\n            const dataLength = uniqueKeys.length;\r\n            const limit = this.getDataLimitByBarSize(this.getElementsInGroupAmount(configOptions, chartsWithBarElement.length), dataLength, axisLength, designerConfig.canvas.chartOptions.bar);\r\n            const allowableKeys = uniqueKeys.slice(0, limit);\r\n            return {\r\n                allowableKeys,\r\n                hidedRecordsAmount: dataLength - allowableKeys.length\r\n            };\r\n        }\r\n        return {\r\n            allowableKeys: this.getDataValuesByKeyField(data, configOptions.data.dataSource, configOptions.data.keyField.name),\r\n            hidedRecordsAmount: 0\r\n        };\r\n    }\r\n    static getDataScopeForPolar(configOptions, blockSize, margin, data, designerConfig, legendBlock) {\r\n        const dataset = data[configOptions.data.dataSource];\r\n        const keyFieldName = configOptions.data.keyField.name;\r\n        const keys = dataset.map(dataRow => dataRow[keyFieldName]);\r\n        if (!configOptions.legend.show) {\r\n            return {\r\n                allowableKeys: keys,\r\n                hidedRecordsAmount: 0\r\n            };\r\n        }\r\n        let position;\r\n        if (blockSize.width - margin.left - margin.right >= _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_2__.MIN_DONUT_BLOCK_SIZE)\r\n            position = 'right';\r\n        else\r\n            position = 'bottom';\r\n        if (position === 'right') {\r\n            if (blockSize.width - margin.left - margin.right < _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_2__.MIN_DONUT_BLOCK_SIZE)\r\n                position = 'bottom';\r\n        }\r\n        let maxItemsNumber;\r\n        if (position === 'right') {\r\n            maxItemsNumber = _legendModel_legendCanvasModel__WEBPACK_IMPORTED_MODULE_1__.LegendCanvasModel.findElementsAmountByLegendSize(keys, position, 200, blockSize.height - margin.top - margin.bottom);\r\n        }\r\n        else {\r\n            let marginBottom = margin.bottom - (legendBlock.bottom.size === 0 ? legendBlock.bottom.size : legendBlock.bottom.size - legendBlock.bottom.margin.bottom);\r\n            maxItemsNumber = _legendModel_legendCanvasModel__WEBPACK_IMPORTED_MODULE_1__.LegendCanvasModel.findElementsAmountByLegendSize(keys, position, blockSize.width - margin.left - margin.right, blockSize.height - margin.top - marginBottom - legendBlock.bottom.margin.bottom - _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_2__.MIN_DONUT_BLOCK_SIZE);\r\n        }\r\n        return {\r\n            allowableKeys: keys.slice(0, maxItemsNumber),\r\n            hidedRecordsAmount: keys.length - maxItemsNumber\r\n        };\r\n    }\r\n    /**\r\n     * Выводит количество элементов (преимущественно баров) в одной группе. Группа - один ключ\r\n     * @param configOptions\r\n     * @param chartsLength\r\n     */\r\n    static getElementsInGroupAmount(configOptions, chartsLength) {\r\n        if (configOptions.type === '2d')\r\n            return this.getBarChartsInGroupAmount(configOptions.charts);\r\n        return chartsLength;\r\n    }\r\n    static getBarChartsInGroupAmount(charts) {\r\n        let barsAmount = 0;\r\n        charts.forEach(chart => {\r\n            if (chart.type === 'bar' && chart.isSegmented)\r\n                barsAmount += 1; // в сегментированном баре все valueFields находятся внутри одного бара, поэтому бар всегда один.\r\n            else if (chart.type === 'bar')\r\n                barsAmount += chart.data.valueFields.length;\r\n        });\r\n        return barsAmount;\r\n    }\r\n    static getScopedData(data, allowableKeys, config) {\r\n        const newData = {};\r\n        newData[config.options.data.dataSource] = this.getScopedChartData(data[config.options.data.dataSource], allowableKeys, config.options.data.keyField.name);\r\n        return newData;\r\n    }\r\n    static getScopedChartData(data, allowableKeys, keyFieldName) {\r\n        return data.filter(d => allowableKeys.findIndex(key => key === d[keyFieldName]) !== -1);\r\n    }\r\n    static setDataType(data, config) {\r\n        if (config.options.type === 'polar' || config.options.type === '2d') {\r\n            // Форматиривание для оси ключей пока не совсем верно установлено\r\n            // if(config.options.data.keyField.format === 'date') {\r\n            //     data[config.options.data.dataSource] = this.getTypedData(data[config.options.data.dataSource], config.options.data.keyField);\r\n            // }\r\n        }\r\n        else if (config.options.type === 'interval') {\r\n            config.options.charts.forEach((chart) => {\r\n                if (chart.data.valueField1.format === 'date') {\r\n                    data[config.options.data.dataSource] = this.getTypedData(data[config.options.data.dataSource], chart.data.valueField1);\r\n                }\r\n                if (chart.data.valueField2.format === 'date') {\r\n                    data[config.options.data.dataSource] = this.getTypedData(data[config.options.data.dataSource], chart.data.valueField2);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    static getTypedData(data, field) {\r\n        if (field.format === 'date')\r\n            data.forEach(d => {\r\n                d[field.name] = new Date(d[field.name]);\r\n            });\r\n        return data;\r\n    }\r\n    static getDataLimitByBarSize(elementsInGroupAmount, dataLength, axisLength, barOptions) {\r\n        let sumSize = dataLength * (elementsInGroupAmount * barOptions.minBarWidth + (elementsInGroupAmount - 1) * barOptions.barDistance + barOptions.groupMinDistance);\r\n        while (dataLength !== 0 && axisLength < sumSize) {\r\n            dataLength--;\r\n            // find whole space for bars in group + distance between bars + group distance\r\n            sumSize = dataLength * (elementsInGroupAmount * barOptions.minBarWidth + (elementsInGroupAmount - 1)\r\n                * barOptions.barDistance + barOptions.groupMinDistance);\r\n        }\r\n        return dataLength;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/model/dataManagerModel.ts?");

/***/ }),

/***/ "./src/model/gridLineModel.ts":
/*!************************************!*\
  !*** ./src/model/gridLineModel.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GridLineModel\": () => /* binding */ GridLineModel\n/* harmony export */ });\nclass GridLineModel {\r\n    static getGridLineOptions(configOptions, designerOptions) {\r\n        let gridKey = false;\r\n        let gridValue = false;\r\n        if (designerOptions.flag.value)\r\n            gridValue = configOptions.flag.value;\r\n        if (designerOptions.flag.key)\r\n            gridKey = configOptions.flag.key;\r\n        return {\r\n            flag: {\r\n                value: gridValue,\r\n                key: gridKey\r\n            }\r\n        };\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/model/gridLineModel.ts?");

/***/ }),

/***/ "./src/model/intervalModel.ts":
/*!************************************!*\
  !*** ./src/model/intervalModel.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IntervalModel\": () => /* binding */ IntervalModel\n/* harmony export */ });\n/* harmony import */ var _axisModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./axisModel */ \"./src/model/axisModel.ts\");\n/* harmony import */ var _chartStyleModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chartStyleModel */ \"./src/model/chartStyleModel.ts\");\n/* harmony import */ var _dataManagerModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataManagerModel */ \"./src/model/dataManagerModel.ts\");\n/* harmony import */ var _gridLineModel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gridLineModel */ \"./src/model/gridLineModel.ts\");\n/* harmony import */ var _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./legendModel/legendModel */ \"./src/model/legendModel/legendModel.ts\");\n/* harmony import */ var _modelOptions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modelOptions */ \"./src/model/modelOptions.ts\");\n/* harmony import */ var _scaleModel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scaleModel */ \"./src/model/scaleModel.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass IntervalModel {\r\n    static getOptions(config, designerConfig, margin, dataScope, data) {\r\n        const configOptions = config.options;\r\n        return {\r\n            legend: _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_4__.LegendModel.getLegendModel(config.options.type, config.options.legend.show, config.canvas.size, margin),\r\n            orient: configOptions.orientation,\r\n            scale: {\r\n                scaleKey: {\r\n                    domain: _scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleModel.getScaleKeyDomain(dataScope.allowableKeys),\r\n                    range: {\r\n                        start: 0,\r\n                        end: _scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleModel.getScaleRangePeek(_scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleType.Key, configOptions.orientation, margin, config.canvas.size)\r\n                    },\r\n                    type: _scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleModel.getScaleKeyType(configOptions.charts),\r\n                    elementsAmount: configOptions.charts.length\r\n                },\r\n                scaleValue: {\r\n                    domain: _scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleModel.getScaleDateValueDomain(data, configOptions.charts, configOptions.axis.keyAxis.position, configOptions.data.dataSource),\r\n                    range: {\r\n                        start: 0,\r\n                        end: _scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleModel.getScaleRangePeek(_scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleType.Value, configOptions.orientation, margin, config.canvas.size)\r\n                    },\r\n                    type: _scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleModel.getScaleValueType(configOptions.charts)\r\n                }\r\n            },\r\n            axis: {\r\n                keyAxis: {\r\n                    type: 'key',\r\n                    orient: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisOrient(_modelOptions__WEBPACK_IMPORTED_MODULE_5__.AxisType.Key, configOptions.orientation, configOptions.axis.keyAxis.position),\r\n                    translate: {\r\n                        translateX: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateX(_modelOptions__WEBPACK_IMPORTED_MODULE_5__.AxisType.Key, configOptions.orientation, configOptions.axis.keyAxis.position, margin, config.canvas.size.width),\r\n                        translateY: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateY(_modelOptions__WEBPACK_IMPORTED_MODULE_5__.AxisType.Key, configOptions.orientation, configOptions.axis.keyAxis.position, margin, config.canvas.size.height)\r\n                    },\r\n                    cssClass: 'key-axis',\r\n                    ticks: configOptions.axis.keyAxis.ticks,\r\n                    labels: {\r\n                        maxSize: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getLabelSize(designerConfig.canvas.axisLabel.maxSize.main, data[configOptions.data.dataSource].map(d => d[configOptions.data.keyField.name])).width,\r\n                        positition: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getKeyAxisLabelPosition(margin, config.canvas.size, _dataManagerModel__WEBPACK_IMPORTED_MODULE_2__.DataManagerModel.getDataValuesByKeyField(data, configOptions.data.dataSource, configOptions.data.keyField.name).length),\r\n                        visible: true\r\n                    }\r\n                },\r\n                valueAxis: {\r\n                    type: 'value',\r\n                    orient: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisOrient(_modelOptions__WEBPACK_IMPORTED_MODULE_5__.AxisType.Value, configOptions.orientation, configOptions.axis.valueAxis.position),\r\n                    translate: {\r\n                        translateX: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateX(_modelOptions__WEBPACK_IMPORTED_MODULE_5__.AxisType.Value, configOptions.orientation, configOptions.axis.valueAxis.position, margin, config.canvas.size.width),\r\n                        translateY: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateY(_modelOptions__WEBPACK_IMPORTED_MODULE_5__.AxisType.Value, configOptions.orientation, configOptions.axis.valueAxis.position, margin, config.canvas.size.height)\r\n                    },\r\n                    cssClass: 'value-axis',\r\n                    ticks: configOptions.axis.valueAxis.ticks,\r\n                    labels: {\r\n                        maxSize: designerConfig.canvas.axisLabel.maxSize.main,\r\n                        positition: 'straight',\r\n                        visible: true\r\n                    }\r\n                }\r\n            },\r\n            data: Object.assign({}, configOptions.data),\r\n            type: configOptions.type,\r\n            charts: this.getChartsModel(configOptions.charts, designerConfig.chartStyle),\r\n            additionalElements: this.getAdditionalElements(configOptions, designerConfig)\r\n        };\r\n    }\r\n    static getAdditionalElements(options, designerConfig) {\r\n        return {\r\n            gridLine: _gridLineModel__WEBPACK_IMPORTED_MODULE_3__.GridLineModel.getGridLineOptions(options.additionalElements.gridLine, designerConfig.additionalElements.gridLine)\r\n        };\r\n    }\r\n    static getChartsModel(charts, chartStyleConfig) {\r\n        const chartsModel = [];\r\n        charts.forEach((chart, index) => {\r\n            chartsModel.push({\r\n                type: chart.type,\r\n                title: chart.title,\r\n                data: Object.assign({}, chart.data),\r\n                tooltip: chart.tooltip,\r\n                cssClasses: _chartStyleModel__WEBPACK_IMPORTED_MODULE_1__.ChartStyleModel.getCssClasses(index),\r\n                style: _chartStyleModel__WEBPACK_IMPORTED_MODULE_1__.ChartStyleModel.getChartStyle(charts.length, chartStyleConfig)\r\n            });\r\n        });\r\n        return chartsModel;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/model/intervalModel.ts?");

/***/ }),

/***/ "./src/model/legendModel/legendCanvasModel.ts":
/*!****************************************************!*\
  !*** ./src/model/legendModel/legendCanvasModel.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LegendCanvasModel\": () => /* binding */ LegendCanvasModel\n/* harmony export */ });\n/* harmony import */ var _modelOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modelOptions */ \"./src/model/modelOptions.ts\");\n/* harmony import */ var _legendModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./legendModel */ \"./src/model/legendModel/legendModel.ts\");\n\r\n\r\nclass LegendCanvasModel {\r\n    static getLegendHeight(texts, blockWidth, marginLeft, marginRight, itemsPosition, legendPosition) {\r\n        const legendWrapper = document.createElement('div');\r\n        legendWrapper.style.display = 'flex';\r\n        if (itemsPosition === 'column')\r\n            legendWrapper.style.flexDirection = 'column';\r\n        legendWrapper.style.position = 'absolute';\r\n        legendWrapper.style.width = blockWidth - marginLeft - marginRight + 'px';\r\n        texts.forEach(text => {\r\n            const itemWrapper = document.createElement('div');\r\n            const colorBlock = document.createElement('span');\r\n            const textBlock = document.createElement('span');\r\n            itemWrapper.classList.add(_legendModel__WEBPACK_IMPORTED_MODULE_1__.LegendModel.getLegendItemClass(itemsPosition));\r\n            if (itemsPosition === 'column') {\r\n                itemWrapper.style.whiteSpace = 'nowrap';\r\n                itemWrapper.classList.add(_legendModel__WEBPACK_IMPORTED_MODULE_1__.LegendModel.getMarginClass(legendPosition));\r\n            }\r\n            colorBlock.classList.add(_modelOptions__WEBPACK_IMPORTED_MODULE_0__.CLASSES.legendColor);\r\n            textBlock.classList.add(_modelOptions__WEBPACK_IMPORTED_MODULE_0__.CLASSES.legendLabel);\r\n            textBlock.textContent = text;\r\n            itemWrapper.append(colorBlock, textBlock);\r\n            legendWrapper.append(itemWrapper);\r\n        });\r\n        document.body.append(legendWrapper);\r\n        const height = legendWrapper.offsetHeight;\r\n        legendWrapper.remove();\r\n        return height;\r\n    }\r\n    static getLegendItemWidth(text) {\r\n        const itemWrapper = document.createElement('div');\r\n        const colorBlock = document.createElement('span');\r\n        const textBlock = document.createElement('span');\r\n        itemWrapper.style.display = 'inline-block';\r\n        itemWrapper.classList.add(_modelOptions__WEBPACK_IMPORTED_MODULE_0__.CLASSES.legendItem);\r\n        colorBlock.classList.add(_modelOptions__WEBPACK_IMPORTED_MODULE_0__.CLASSES.legendColor);\r\n        textBlock.classList.add(_modelOptions__WEBPACK_IMPORTED_MODULE_0__.CLASSES.legendLabel);\r\n        textBlock.textContent = text;\r\n        itemWrapper.append(colorBlock, textBlock);\r\n        document.body.append(itemWrapper);\r\n        const sumWidth = itemWrapper.getBoundingClientRect().width\r\n            + parseFloat(window.getComputedStyle(itemWrapper, null).getPropertyValue('margin-left'))\r\n            + parseFloat(window.getComputedStyle(itemWrapper, null).getPropertyValue('margin-right'));\r\n        itemWrapper.remove();\r\n        return sumWidth;\r\n    }\r\n    static findElementsAmountByLegendSize(texts, position, legendBlockWidth, legendBlockHeight) {\r\n        const legendWrapper = document.createElement('div');\r\n        legendWrapper.style.display = 'flex';\r\n        legendWrapper.style.flexDirection = 'column';\r\n        legendWrapper.style.position = 'absolute';\r\n        legendWrapper.style.width = legendBlockWidth + 'px';\r\n        document.body.append(legendWrapper);\r\n        let amount = 0;\r\n        for (let i = 0; i < texts.length; i++) {\r\n            const itemWrapper = document.createElement('div');\r\n            const colorBlock = document.createElement('span');\r\n            const textBlock = document.createElement('span');\r\n            itemWrapper.classList.add('legend-item-row');\r\n            if (position === 'bottom')\r\n                textBlock.classList.add('legend-label-nowrap', 'mt-10');\r\n            else\r\n                itemWrapper.classList.add('mt-15');\r\n            colorBlock.classList.add(_modelOptions__WEBPACK_IMPORTED_MODULE_0__.CLASSES.legendColor);\r\n            textBlock.classList.add(_modelOptions__WEBPACK_IMPORTED_MODULE_0__.CLASSES.legendLabel);\r\n            textBlock.textContent = texts[i];\r\n            itemWrapper.append(colorBlock, textBlock);\r\n            legendWrapper.append(itemWrapper);\r\n            if (legendWrapper.offsetHeight > legendBlockHeight) {\r\n                itemWrapper.remove();\r\n                if (legendBlockHeight - legendWrapper.offsetHeight >= 15 && position !== 'bottom')\r\n                    amount = i;\r\n                else\r\n                    amount = i - 1;\r\n                break;\r\n            }\r\n            amount++;\r\n        }\r\n        legendWrapper.remove();\r\n        return amount < 0 ? 0 : amount;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/model/legendModel/legendCanvasModel.ts?");

/***/ }),

/***/ "./src/model/legendModel/legendModel.ts":
/*!**********************************************!*\
  !*** ./src/model/legendModel/legendModel.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MIN_DONUT_BLOCK_SIZE\": () => /* binding */ MIN_DONUT_BLOCK_SIZE,\n/* harmony export */   \"LegendModel\": () => /* binding */ LegendModel\n/* harmony export */ });\n/* harmony import */ var _modelHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modelHelper */ \"./src/model/modelHelper.ts\");\n/* harmony import */ var _legendCanvasModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./legendCanvasModel */ \"./src/model/legendModel/legendCanvasModel.ts\");\n\r\n\r\n/** If donut block has width less than this const, legend change postion from \"right\" to \"bottom\" */\r\nconst MIN_DONUT_BLOCK_SIZE = 260;\r\nclass LegendModel {\r\n    static getLegendSize(chartNotation, position, texts, legendMaxWidth, blockSize, legendBlockModel) {\r\n        if (position === 'left' || position === 'right')\r\n            return this.getLegendWidth(texts, legendMaxWidth);\r\n        if (chartNotation === '2d' || chartNotation === 'interval') {\r\n            return _legendCanvasModel__WEBPACK_IMPORTED_MODULE_1__.LegendCanvasModel.getLegendHeight(texts, blockSize.width, legendBlockModel[position].margin.left, legendBlockModel[position].margin.right, 'row', position);\r\n        }\r\n        else if (chartNotation === 'polar') {\r\n            const size = _legendCanvasModel__WEBPACK_IMPORTED_MODULE_1__.LegendCanvasModel.getLegendHeight(texts, blockSize.width, legendBlockModel[position].margin.left, legendBlockModel[position].margin.right, 'column', position);\r\n            return size;\r\n        }\r\n    }\r\n    static getBaseLegendBlockModel() {\r\n        const mt = 20, mb = 20, ml = 20, mr = 20;\r\n        return {\r\n            left: {\r\n                size: 0,\r\n                margin: { top: mt, bottom: mb, left: ml, right: 0 }\r\n            },\r\n            right: {\r\n                size: 0,\r\n                margin: { top: mt, bottom: mb, left: 0, right: mr }\r\n            },\r\n            bottom: {\r\n                size: 0,\r\n                margin: { top: 0, bottom: 20, left: 20, right: 20 }\r\n            },\r\n            top: {\r\n                size: 0,\r\n                margin: { top: 20, bottom: 0, left: 20, right: 20 }\r\n            }\r\n        };\r\n    }\r\n    static getLegendModel(chartNotation, legendShow, blockSize, margin) {\r\n        let legendPosition = 'off';\r\n        if (legendShow) {\r\n            if (chartNotation === '2d' || chartNotation === 'interval')\r\n                legendPosition = 'top';\r\n            else if (chartNotation === 'polar') {\r\n                legendPosition = blockSize.width - margin.left - margin.right < MIN_DONUT_BLOCK_SIZE ? 'bottom' : 'right';\r\n            }\r\n        }\r\n        return {\r\n            position: legendPosition\r\n        };\r\n    }\r\n    static getLegendItemClass(itemsPosition) {\r\n        return itemsPosition === 'column' ? 'legend-item-row' : 'legend-item-inline';\r\n    }\r\n    static getMarginClass(legendPosition) {\r\n        return legendPosition === 'right' ? 'mt-15' : 'mt-10';\r\n    }\r\n    static getLegendWidth(texts, legendMaxWidth) {\r\n        let longestText = '';\r\n        let biggestScore = 0;\r\n        texts.forEach(text => {\r\n            if (_modelHelper__WEBPACK_IMPORTED_MODULE_0__.ModelHelper.getStringScore(text) > biggestScore) {\r\n                longestText = text;\r\n                biggestScore = _modelHelper__WEBPACK_IMPORTED_MODULE_0__.ModelHelper.getStringScore(text);\r\n            }\r\n        });\r\n        const maxWidth = _legendCanvasModel__WEBPACK_IMPORTED_MODULE_1__.LegendCanvasModel.getLegendItemWidth(longestText + '?'); // One letter reserve\r\n        return maxWidth > legendMaxWidth ? legendMaxWidth : maxWidth;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/model/legendModel/legendModel.ts?");

/***/ }),

/***/ "./src/model/marginModel.ts":
/*!**********************************!*\
  !*** ./src/model/marginModel.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AXIS_HORIZONTAL_LABEL_PADDING\": () => /* binding */ AXIS_HORIZONTAL_LABEL_PADDING,\n/* harmony export */   \"AXIS_VERTICAL_LABEL_PADDING\": () => /* binding */ AXIS_VERTICAL_LABEL_PADDING,\n/* harmony export */   \"MarginModel\": () => /* binding */ MarginModel\n/* harmony export */ });\n/* harmony import */ var _axisModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./axisModel */ \"./src/model/axisModel.ts\");\n/* harmony import */ var _dataManagerModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataManagerModel */ \"./src/model/dataManagerModel.ts\");\n/* harmony import */ var _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./legendModel/legendModel */ \"./src/model/legendModel/legendModel.ts\");\n/* harmony import */ var _modelOptions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modelOptions */ \"./src/model/modelOptions.ts\");\n/* harmony import */ var _twoDimensionalModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./twoDimensionalModel */ \"./src/model/twoDimensionalModel.ts\");\n\r\n\r\n\r\n\r\n\r\nconst AXIS_HORIZONTAL_LABEL_PADDING = 15;\r\nconst AXIS_VERTICAL_LABEL_PADDING = 10;\r\nclass MarginModel {\r\n    static getMargin(designerConfig, config, legendBlockModel, data) {\r\n        const margin = Object.assign({}, designerConfig.canvas.chartBlockMargin);\r\n        this.recalcMarginWithLegend(margin, config, designerConfig.canvas.legendBlock.maxWidth, legendBlockModel, data);\r\n        if (config.options.type === '2d' || config.options.type === 'interval') {\r\n            const labelSize = this.getMarginValuesByAxisLabels(designerConfig.canvas.axisLabel.maxSize.main, config.options.axis, data, config.options);\r\n            this.recalcMarginWithAxisLabelHeight(labelSize, margin, config.options, config.options.axis);\r\n            // Если встроенный лейбл показывает ключи, то лейблы оси ключей не показываются\r\n            // При этом все графики должны иметь: embeddedLabels = 'key'\r\n            // И все графики должны быть типа bar. \r\n            const showingFlag = config.options.type === '2d'\r\n                ? !_twoDimensionalModel__WEBPACK_IMPORTED_MODULE_4__.TwoDimensionalModel.getChartsEmbeddedLabelsFlag(config.options.charts, config.options.orientation)\r\n                : true;\r\n            this.recalcMarginWithAxisLabelWidth(labelSize, margin, config.options, config.options.axis, showingFlag);\r\n        }\r\n        return margin;\r\n    }\r\n    static recalcPolarMarginWithScopedData(margin, blockSize, designerConfig, config, legendBlockModel, dataScope, options) {\r\n        let position = _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_2__.LegendModel.getLegendModel(config.options.type, config.options.legend.show, config.canvas.size, margin).position;\r\n        if (position !== 'off') {\r\n            if (position === 'right' && blockSize.width - margin.left - margin.right < _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_2__.MIN_DONUT_BLOCK_SIZE)\r\n                position = 'bottom';\r\n            this.clearMarginByLegendBlockPosition(margin, legendBlockModel);\r\n            let allowableKeys = [...dataScope.allowableKeys];\r\n            if (dataScope.hidedRecordsAmount !== 0 && position === 'bottom')\r\n                allowableKeys.push('1'); // Если есть спрятанные записи, то в массив добавляется объект, чтобы выделить место в легенде для индикатора переполнения\r\n            const legendSize = _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_2__.LegendModel.getLegendSize(config.options.type, position, allowableKeys, designerConfig.canvas.legendBlock.maxWidth, config.canvas.size, legendBlockModel);\r\n            margin[position] += legendSize + legendBlockModel[position].margin[position];\r\n            legendBlockModel[position].size = legendSize;\r\n            options.legend.position = position;\r\n        }\r\n    }\r\n    static recalcMargnWitVerticalAxisLabel(margin, data, config, designerConfig, dataScope) {\r\n        if ((config.options.type === '2d' || config.options.type === 'interval') && config.options.orientation === 'vertical' && config.options.axis.keyAxis.position === 'end') {\r\n            const axisLabelSize = _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getLabelSize(designerConfig.canvas.axisLabel.maxSize.main, dataScope.allowableKeys);\r\n            const axisConfig = _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getKeyAxisLabelPosition(margin, config.canvas.size, dataScope.allowableKeys.length);\r\n            if (axisConfig === 'rotated')\r\n                margin.bottom += (axisLabelSize.width - axisLabelSize.height);\r\n        }\r\n    }\r\n    static getMarginValuesByAxisLabels(labelsMaxWidth, axis, data, options) {\r\n        const keyAxisOrient = _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisOrient(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Key, options.orientation, axis.keyAxis.position);\r\n        let labelsTexts;\r\n        if (keyAxisOrient === 'left' || keyAxisOrient === 'right') {\r\n            labelsTexts = _dataManagerModel__WEBPACK_IMPORTED_MODULE_1__.DataManagerModel.getDataValuesByKeyField(data, options.data.dataSource, options.data.keyField.name);\r\n        }\r\n        else {\r\n            labelsTexts = ['0000'];\r\n        }\r\n        return _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getLabelSize(labelsMaxWidth, labelsTexts);\r\n    }\r\n    static recalcMarginWithAxisLabelHeight(labelSize, margin, options, axis) {\r\n        const keyAxisOrient = _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisOrient(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Key, options.orientation, axis.keyAxis.position);\r\n        const valueAxisOrient = _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisOrient(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Value, options.orientation, axis.valueAxis.position);\r\n        if (keyAxisOrient === 'bottom' || keyAxisOrient === 'top') {\r\n            margin[keyAxisOrient] += labelSize.height + AXIS_HORIZONTAL_LABEL_PADDING;\r\n        }\r\n        else {\r\n            margin[valueAxisOrient] += labelSize.height + AXIS_HORIZONTAL_LABEL_PADDING;\r\n        }\r\n    }\r\n    static recalcMarginWithAxisLabelWidth(labelSize, margin, options, axis, isShow) {\r\n        const keyAxisOrient = _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisOrient(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Key, options.orientation, axis.keyAxis.position);\r\n        const valueAxisOrient = _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisOrient(_modelOptions__WEBPACK_IMPORTED_MODULE_3__.AxisType.Value, options.orientation, axis.valueAxis.position);\r\n        if ((keyAxisOrient === 'left' || keyAxisOrient === 'right') && isShow) {\r\n            margin[keyAxisOrient] += labelSize.width + AXIS_VERTICAL_LABEL_PADDING;\r\n        }\r\n        else if (valueAxisOrient === 'left' || valueAxisOrient === 'right') {\r\n            margin[valueAxisOrient] += labelSize.width + AXIS_VERTICAL_LABEL_PADDING;\r\n        }\r\n    }\r\n    static recalcMarginWithLegend(margin, config, legendMaxWidth, legendBlockModel, data) {\r\n        const legendPosition = _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_2__.LegendModel.getLegendModel(config.options.type, config.options.legend.show, config.canvas.size, margin).position;\r\n        if (legendPosition !== 'off') {\r\n            const legendItemsContent = this.getLegendItemsContent(config.options.charts, config.options, data);\r\n            const legendSize = _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_2__.LegendModel.getLegendSize(config.options.type, legendPosition, legendItemsContent, legendMaxWidth, config.canvas.size, legendBlockModel);\r\n            margin[legendPosition] += legendSize;\r\n            if (legendSize !== 0)\r\n                this.appendToGlobalMarginValuesLegendMargin(margin, legendPosition, legendBlockModel);\r\n            legendBlockModel[legendPosition].size = legendSize;\r\n        }\r\n    }\r\n    static getLegendItemsContent(charts, options, data) {\r\n        if (options.type === '2d') {\r\n            let texts = [];\r\n            options.charts.forEach(chart => {\r\n                texts = texts.concat(chart.data.valueFields.map(field => field.title));\r\n            });\r\n            return texts;\r\n        }\r\n        else if (options.type === 'polar') {\r\n            return _dataManagerModel__WEBPACK_IMPORTED_MODULE_1__.DataManagerModel.getDataValuesByKeyField(data, options.data.dataSource, options.data.keyField.name);\r\n        }\r\n        else if (options.type === 'interval') {\r\n            return charts.map(chart => chart.title);\r\n        }\r\n    }\r\n    static appendToGlobalMarginValuesLegendMargin(margin, position, legendBlockModel) {\r\n        if (position === 'left' || position === 'right')\r\n            margin[position] += legendBlockModel[position].margin.left + legendBlockModel[position].margin.right;\r\n        else\r\n            margin[position] += legendBlockModel[position].margin.top + legendBlockModel[position].margin.bottom;\r\n    }\r\n    static clearMarginByLegendBlockPosition(margin, legendBlockModel) {\r\n        ['left', 'right', 'top', 'bottom'].forEach((position) => {\r\n            margin[position] -= legendBlockModel[position].size === 0\r\n                ? 0\r\n                : legendBlockModel[position].size + legendBlockModel[position].margin[position];\r\n        });\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/model/marginModel.ts?");

/***/ }),

/***/ "./src/model/modelHelper.ts":
/*!**********************************!*\
  !*** ./src/model/modelHelper.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ModelHelper\": () => /* binding */ ModelHelper\n/* harmony export */ });\nclass ModelHelper {\r\n    static getMinAndMaxOfIntervalData(data, dataSource, charts) {\r\n        let min = data[dataSource][0][charts[0].data.valueField1.name];\r\n        let max = data[dataSource][0][charts[0].data.valueField1.name];\r\n        charts.forEach(chart => {\r\n            const chartData = data[dataSource];\r\n            const valueField1 = chart.data.valueField1.name;\r\n            const valueField2 = chart.data.valueField2.name;\r\n            chartData.forEach(dataRow => {\r\n                if (dataRow[valueField1] > max)\r\n                    max = dataRow[valueField1];\r\n                if (dataRow[valueField1] < min)\r\n                    min = dataRow[valueField1];\r\n                if (dataRow[valueField2] > max)\r\n                    max = dataRow[valueField2];\r\n                if (dataRow[valueField2] < min)\r\n                    min = dataRow[valueField2];\r\n            });\r\n        });\r\n        return [min, max];\r\n    }\r\n    static getUniqueValues(values) {\r\n        const uniqueValues = values.filter((keyValue, index, self) => self.indexOf(keyValue) === index);\r\n        return uniqueValues;\r\n    }\r\n    static getUniqueValuesLength(values) {\r\n        return this.getUniqueValues(values).length;\r\n    }\r\n    static getStringScore(word) {\r\n        // lower case letter width ~ 0.74 from upper case width.\r\n        // Number width == lower case letter width\r\n        let score = 0;\r\n        const upperLetterScore = 1;\r\n        const lowerLetterScore = 0.74;\r\n        for (let i = 0; i < word.length; i++) {\r\n            if (word[i].toUpperCase() === word[i] && parseFloat(word[i]).toString() !== word[i])\r\n                score += upperLetterScore;\r\n            else\r\n                score += lowerLetterScore;\r\n        }\r\n        return score;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/model/modelHelper.ts?");

/***/ }),

/***/ "./src/model/modelOptions.ts":
/*!***********************************!*\
  !*** ./src/model/modelOptions.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AxisType\": () => /* binding */ AxisType,\n/* harmony export */   \"CLASSES\": () => /* binding */ CLASSES,\n/* harmony export */   \"assembleModel\": () => /* binding */ assembleModel,\n/* harmony export */   \"getPreparedData\": () => /* binding */ getPreparedData,\n/* harmony export */   \"getUpdatedModel\": () => /* binding */ getUpdatedModel\n/* harmony export */ });\n/* harmony import */ var _marginModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./marginModel */ \"./src/model/marginModel.ts\");\n/* harmony import */ var _twoDimensionalModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./twoDimensionalModel */ \"./src/model/twoDimensionalModel.ts\");\n/* harmony import */ var _polarModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./polarModel */ \"./src/model/polarModel.ts\");\n/* harmony import */ var _dataManagerModel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dataManagerModel */ \"./src/model/dataManagerModel.ts\");\n/* harmony import */ var _intervalModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./intervalModel */ \"./src/model/intervalModel.ts\");\n/* harmony import */ var _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./legendModel/legendModel */ \"./src/model/legendModel/legendModel.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\nvar AxisType;\r\n(function (AxisType) {\r\n    AxisType[AxisType[\"Key\"] = 0] = \"Key\";\r\n    AxisType[AxisType[\"Value\"] = 1] = \"Value\";\r\n})(AxisType || (AxisType = {}));\r\nconst CLASSES = {\r\n    dataLabel: 'data-label',\r\n    legendLabel: 'legend-label',\r\n    legendColor: 'legend-circle',\r\n    legendItem: 'legend-item',\r\n};\r\nfunction getBlockCanvas(config) {\r\n    return {\r\n        size: {\r\n            width: config.canvas.size.width,\r\n            height: config.canvas.size.height\r\n        },\r\n        cssClass: config.canvas.class\r\n    };\r\n}\r\nfunction getChartBlock(margin) {\r\n    return {\r\n        margin\r\n    };\r\n}\r\nfunction getOptions(config, designerConfig, margin, dataScope, data) {\r\n    if (config.options.type === '2d') {\r\n        return _twoDimensionalModel__WEBPACK_IMPORTED_MODULE_1__.TwoDimensionalModel.getOptions(config, designerConfig, margin, dataScope, data);\r\n    }\r\n    else if (config.options.type === 'polar') {\r\n        return _polarModel__WEBPACK_IMPORTED_MODULE_2__.PolarModel.getOptions(config, data, margin);\r\n    }\r\n    else if (config.options.type === 'interval') {\r\n        return _intervalModel__WEBPACK_IMPORTED_MODULE_4__.IntervalModel.getOptions(config, designerConfig, margin, dataScope, data);\r\n    }\r\n}\r\nfunction getDataSettings(dataScope) {\r\n    return {\r\n        scope: dataScope\r\n    };\r\n}\r\nfunction getChartSettings(barSettings, donutSettings) {\r\n    return {\r\n        bar: Object.assign({}, barSettings),\r\n        donut: {\r\n            padAngle: donutSettings.padAngle,\r\n            maxThickness: donutSettings.maxThickness,\r\n            minThickness: donutSettings.minThickness,\r\n        }\r\n    };\r\n}\r\nfunction getDataFormat(designerConfig) {\r\n    return {\r\n        formatters: designerConfig.dataFormat.formatters\r\n    };\r\n}\r\nfunction assembleModel(config, data, designerConfig) {\r\n    if (!data || Object.keys(data).length === 0)\r\n        return {\r\n            blockCanvas: getBlockCanvas(config),\r\n            chartBlock: null,\r\n            legendBlock: null,\r\n            options: null,\r\n            dataSettings: null,\r\n            chartSettings: null,\r\n            dataFormat: getDataFormat(designerConfig)\r\n        };\r\n    const legendBlock = _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_5__.LegendModel.getBaseLegendBlockModel();\r\n    const margin = _marginModel__WEBPACK_IMPORTED_MODULE_0__.MarginModel.getMargin(designerConfig, config, legendBlock, data);\r\n    const dataScope = _dataManagerModel__WEBPACK_IMPORTED_MODULE_3__.DataManagerModel.getDataScope(config, margin, data, designerConfig, legendBlock);\r\n    const preparedData = _dataManagerModel__WEBPACK_IMPORTED_MODULE_3__.DataManagerModel.getPreparedData(data, dataScope.allowableKeys, config);\r\n    if (config.options.type === '2d' || config.options.type === 'interval')\r\n        _marginModel__WEBPACK_IMPORTED_MODULE_0__.MarginModel.recalcMargnWitVerticalAxisLabel(margin, data, config, designerConfig, dataScope);\r\n    const blockCanvas = getBlockCanvas(config);\r\n    const chartBlock = getChartBlock(margin);\r\n    const options = getOptions(config, designerConfig, margin, dataScope, preparedData);\r\n    const dataSettings = getDataSettings(dataScope);\r\n    const chartSettings = getChartSettings(designerConfig.canvas.chartOptions.bar, designerConfig.canvas.chartOptions.donut);\r\n    const dataFormat = getDataFormat(designerConfig);\r\n    if (options.type === 'polar')\r\n        _marginModel__WEBPACK_IMPORTED_MODULE_0__.MarginModel.recalcPolarMarginWithScopedData(margin, config.canvas.size, designerConfig, config, legendBlock, dataScope, options);\r\n    margin.top = Math.ceil(margin.top);\r\n    margin.bottom = Math.ceil(margin.bottom);\r\n    margin.left = Math.ceil(margin.left);\r\n    margin.right = Math.ceil(margin.right);\r\n    return {\r\n        blockCanvas,\r\n        chartBlock,\r\n        legendBlock,\r\n        options,\r\n        dataSettings,\r\n        chartSettings,\r\n        dataFormat\r\n    };\r\n}\r\nfunction getPreparedData(model, data, config) {\r\n    if (!model || Object.keys(model).length === 0 || !data || Object.keys(data).length === 0)\r\n        return null;\r\n    const preparedData = _dataManagerModel__WEBPACK_IMPORTED_MODULE_3__.DataManagerModel.getPreparedData(data, model.dataSettings.scope.allowableKeys, config);\r\n    return preparedData;\r\n}\r\nfunction getUpdatedModel(config, data, designerConfig) {\r\n    return assembleModel(config, data, designerConfig);\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/model/modelOptions.ts?");

/***/ }),

/***/ "./src/model/polarModel.ts":
/*!*********************************!*\
  !*** ./src/model/polarModel.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PolarModel\": () => /* binding */ PolarModel\n/* harmony export */ });\n/* harmony import */ var _designer_designerConfigExample__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../designer/designerConfigExample */ \"./src/designer/designerConfigExample.ts\");\n/* harmony import */ var _chartStyleModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chartStyleModel */ \"./src/model/chartStyleModel.ts\");\n/* harmony import */ var _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./legendModel/legendModel */ \"./src/model/legendModel/legendModel.ts\");\n\r\n\r\n\r\nclass PolarModel {\r\n    static getOptions(config, data, margin) {\r\n        const configOptions = config.options;\r\n        return {\r\n            type: configOptions.type,\r\n            data: Object.assign({}, configOptions.data),\r\n            charts: this.getChartsModel(configOptions.charts, data[configOptions.data.dataSource].length, _designer_designerConfigExample__WEBPACK_IMPORTED_MODULE_0__.default.chartStyle),\r\n            legend: _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_2__.LegendModel.getLegendModel(config.options.type, config.options.legend.show, config.canvas.size, margin)\r\n        };\r\n    }\r\n    static getChartsModel(charts, dataLength, chartStyleConfig) {\r\n        const chartsModel = [];\r\n        charts.forEach((chart, index) => {\r\n            chartsModel.push({\r\n                type: chart.type,\r\n                title: chart.title,\r\n                data: Object.assign({}, chart.data),\r\n                tooltip: chart.tooltip,\r\n                cssClasses: _chartStyleModel__WEBPACK_IMPORTED_MODULE_1__.ChartStyleModel.getCssClasses(index),\r\n                style: _chartStyleModel__WEBPACK_IMPORTED_MODULE_1__.ChartStyleModel.getChartStyle(dataLength, chartStyleConfig)\r\n            });\r\n        });\r\n        return chartsModel;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/model/polarModel.ts?");

/***/ }),

/***/ "./src/model/scaleModel.ts":
/*!*********************************!*\
  !*** ./src/model/scaleModel.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ScaleType\": () => /* binding */ ScaleType,\n/* harmony export */   \"ScaleModel\": () => /* binding */ ScaleModel\n/* harmony export */ });\n/* harmony import */ var _modelHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modelHelper */ \"./src/model/modelHelper.ts\");\n\r\nvar ScaleType;\r\n(function (ScaleType) {\r\n    ScaleType[ScaleType[\"Key\"] = 0] = \"Key\";\r\n    ScaleType[ScaleType[\"Value\"] = 1] = \"Value\";\r\n})(ScaleType || (ScaleType = {}));\r\nclass ScaleModel {\r\n    static getScaleRangePeek(scaleType, chartOrientation, margin, blockSize) {\r\n        if (chartOrientation === 'vertical')\r\n            return scaleType === ScaleType.Key\r\n                ? blockSize.width - margin.left - margin.right\r\n                : blockSize.height - margin.top - margin.bottom;\r\n        return scaleType === ScaleType.Key\r\n            ? blockSize.height - margin.top - margin.bottom\r\n            : blockSize.width - margin.left - margin.right;\r\n    }\r\n    static getScaleKeyDomain(allowableKeys) {\r\n        return allowableKeys;\r\n    }\r\n    static getScaleDateValueDomain(data, charts, keyAxisPosition, dataSource) {\r\n        const minMax = _modelHelper__WEBPACK_IMPORTED_MODULE_0__.ModelHelper.getMinAndMaxOfIntervalData(data, dataSource, charts);\r\n        let domainPeekMin = minMax[0];\r\n        let domainPeekMax = minMax[1];\r\n        if (keyAxisPosition === 'start')\r\n            return [domainPeekMin, domainPeekMax];\r\n        return [domainPeekMax, domainPeekMin];\r\n    }\r\n    static getScaleLinearValueDomain(configDomain, data, configOptions) {\r\n        let domainPeekMin;\r\n        let domainPeekMax;\r\n        if (configDomain.start === -1)\r\n            domainPeekMin = 0;\r\n        else\r\n            domainPeekMin = configDomain.start;\r\n        if (configDomain.end === -1)\r\n            domainPeekMax = this.getScaleMaxValue(configOptions.charts, configOptions.data.dataSource, data);\r\n        else\r\n            domainPeekMax = configDomain.end;\r\n        if (configOptions.axis.keyAxis.position === 'start')\r\n            return [domainPeekMin, domainPeekMax];\r\n        return [domainPeekMax, domainPeekMin];\r\n    }\r\n    static getScaleKeyType(charts) {\r\n        if (charts.findIndex((chart) => chart.type === 'bar' || chart.type === 'gantt') === -1)\r\n            return 'point';\r\n        return 'band';\r\n    }\r\n    static getScaleValueType(charts) {\r\n        if (charts.findIndex((chart) => chart.type === 'gantt') !== -1)\r\n            return 'datetime';\r\n        return 'linear';\r\n    }\r\n    static getScaleElementsAmount(barCharts) {\r\n        if (barCharts.length === 0)\r\n            return 1;\r\n        let barsAmount = 0;\r\n        barCharts.forEach(chart => {\r\n            if (chart.isSegmented)\r\n                barsAmount += 1; // Если бар сегментированный, то все valueFields являются частями одного бара\r\n            else\r\n                barsAmount += chart.data.valueFields.length;\r\n        });\r\n        return barsAmount;\r\n    }\r\n    static getScaleMaxValue(charts, dataSource, data) {\r\n        let max = 0;\r\n        charts.forEach(chart => {\r\n            data[dataSource].forEach(dataRow => {\r\n                let sumInRow = 0;\r\n                chart.data.valueFields.forEach(field => {\r\n                    if (chart.isSegmented)\r\n                        sumInRow += dataRow[field.name];\r\n                    else if (dataRow[field.name] > sumInRow)\r\n                        sumInRow = dataRow[field.name];\r\n                });\r\n                if (max < sumInRow)\r\n                    max = sumInRow;\r\n            });\r\n        });\r\n        return max;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/model/scaleModel.ts?");

/***/ }),

/***/ "./src/model/twoDimensionalModel.ts":
/*!******************************************!*\
  !*** ./src/model/twoDimensionalModel.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TwoDimensionalModel\": () => /* binding */ TwoDimensionalModel\n/* harmony export */ });\n/* harmony import */ var _axisModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./axisModel */ \"./src/model/axisModel.ts\");\n/* harmony import */ var _chartStyleModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chartStyleModel */ \"./src/model/chartStyleModel.ts\");\n/* harmony import */ var _dataManagerModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataManagerModel */ \"./src/model/dataManagerModel.ts\");\n/* harmony import */ var _gridLineModel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gridLineModel */ \"./src/model/gridLineModel.ts\");\n/* harmony import */ var _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./legendModel/legendModel */ \"./src/model/legendModel/legendModel.ts\");\n/* harmony import */ var _modelOptions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modelOptions */ \"./src/model/modelOptions.ts\");\n/* harmony import */ var _scaleModel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scaleModel */ \"./src/model/scaleModel.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass TwoDimensionalModel {\r\n    static getOptions(config, designerConfig, margin, dataScope, data) {\r\n        const configOptions = config.options;\r\n        return {\r\n            legend: _legendModel_legendModel__WEBPACK_IMPORTED_MODULE_4__.LegendModel.getLegendModel(config.options.type, config.options.legend.show, config.canvas.size, margin),\r\n            orient: configOptions.orientation,\r\n            scale: {\r\n                scaleKey: {\r\n                    domain: _scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleModel.getScaleKeyDomain(dataScope.allowableKeys),\r\n                    range: {\r\n                        start: 0,\r\n                        end: _scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleModel.getScaleRangePeek(_scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleType.Key, configOptions.orientation, margin, config.canvas.size)\r\n                    },\r\n                    type: _scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleModel.getScaleKeyType(configOptions.charts),\r\n                    elementsAmount: _scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleModel.getScaleElementsAmount(this.getChartsByType(configOptions.charts, 'bar'))\r\n                },\r\n                scaleValue: {\r\n                    domain: _scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleModel.getScaleLinearValueDomain(configOptions.axis.valueAxis.domain, data, configOptions),\r\n                    range: {\r\n                        start: 0,\r\n                        end: _scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleModel.getScaleRangePeek(_scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleType.Value, configOptions.orientation, margin, config.canvas.size)\r\n                    },\r\n                    type: _scaleModel__WEBPACK_IMPORTED_MODULE_6__.ScaleModel.getScaleValueType(configOptions.charts)\r\n                }\r\n            },\r\n            axis: {\r\n                keyAxis: {\r\n                    type: 'key',\r\n                    orient: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisOrient(_modelOptions__WEBPACK_IMPORTED_MODULE_5__.AxisType.Key, configOptions.orientation, configOptions.axis.keyAxis.position),\r\n                    translate: {\r\n                        translateX: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateX(_modelOptions__WEBPACK_IMPORTED_MODULE_5__.AxisType.Key, configOptions.orientation, configOptions.axis.keyAxis.position, margin, config.canvas.size.width),\r\n                        translateY: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateY(_modelOptions__WEBPACK_IMPORTED_MODULE_5__.AxisType.Key, configOptions.orientation, configOptions.axis.keyAxis.position, margin, config.canvas.size.height)\r\n                    },\r\n                    cssClass: 'key-axis',\r\n                    ticks: configOptions.axis.keyAxis.ticks,\r\n                    labels: {\r\n                        maxSize: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getLabelSize(designerConfig.canvas.axisLabel.maxSize.main, data[configOptions.data.dataSource].map(d => d[configOptions.data.keyField.name])).width,\r\n                        positition: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getKeyAxisLabelPosition(margin, config.canvas.size, _dataManagerModel__WEBPACK_IMPORTED_MODULE_2__.DataManagerModel.getDataValuesByKeyField(data, configOptions.data.dataSource, configOptions.data.keyField.name).length),\r\n                        visible: !TwoDimensionalModel.getChartsEmbeddedLabelsFlag(configOptions.charts, configOptions.orientation)\r\n                    }\r\n                },\r\n                valueAxis: {\r\n                    type: 'value',\r\n                    orient: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisOrient(_modelOptions__WEBPACK_IMPORTED_MODULE_5__.AxisType.Value, configOptions.orientation, configOptions.axis.valueAxis.position),\r\n                    translate: {\r\n                        translateX: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateX(_modelOptions__WEBPACK_IMPORTED_MODULE_5__.AxisType.Value, configOptions.orientation, configOptions.axis.valueAxis.position, margin, config.canvas.size.width),\r\n                        translateY: _axisModel__WEBPACK_IMPORTED_MODULE_0__.AxisModel.getAxisTranslateY(_modelOptions__WEBPACK_IMPORTED_MODULE_5__.AxisType.Value, configOptions.orientation, configOptions.axis.valueAxis.position, margin, config.canvas.size.height)\r\n                    },\r\n                    cssClass: 'value-axis',\r\n                    ticks: configOptions.axis.valueAxis.ticks,\r\n                    labels: {\r\n                        maxSize: designerConfig.canvas.axisLabel.maxSize.main,\r\n                        positition: 'straight',\r\n                        visible: true\r\n                    }\r\n                }\r\n            },\r\n            type: configOptions.type,\r\n            data: Object.assign({}, configOptions.data),\r\n            charts: this.getChartsModel(configOptions.charts, configOptions.orientation, designerConfig.chartStyle),\r\n            additionalElements: this.getAdditionalElements(configOptions, designerConfig)\r\n        };\r\n    }\r\n    static getChartsEmbeddedLabelsFlag(charts, chartOrientation) {\r\n        // Если НЕ найден хотя бы один чарт, который сегментированный или хотя бы один НЕ бар чарт, то лейблы можно прятать\r\n        return charts.findIndex(chart => chart.isSegmented || chart.type !== 'bar') === -1\r\n            && chartOrientation === 'horizontal'\r\n            && charts.length === this.findChartsWithEmbeddedKeyLabels(charts).length;\r\n    }\r\n    /**\r\n     * Сортирует список чартов в порядке: area - bar - line.\r\n     * Используется для того, чтобы при рендере графики с наибольшей площадью (area) не перекрывали графики с меньшей площадью (bar, line).\r\n     * @param charts Чарты из конфига\r\n     */\r\n    static sortCharts(charts) {\r\n        const chartOrder = ['area', 'bar', 'line'];\r\n        charts.sort((chart1, chart2) => chartOrder.indexOf(chart1.type) - chartOrder.indexOf(chart2.type));\r\n    }\r\n    static getChartsModel(charts, chartOrientation, chartStyleConfig) {\r\n        this.sortCharts(charts);\r\n        const chartsModel = [];\r\n        charts.forEach((chart, index) => {\r\n            chartsModel.push({\r\n                type: chart.type,\r\n                isSegmented: chart.isSegmented,\r\n                title: chart.title,\r\n                data: Object.assign({}, chart.data),\r\n                tooltip: chart.tooltip,\r\n                cssClasses: _chartStyleModel__WEBPACK_IMPORTED_MODULE_1__.ChartStyleModel.getCssClasses(index),\r\n                style: _chartStyleModel__WEBPACK_IMPORTED_MODULE_1__.ChartStyleModel.get2DChartStyle(charts.length, chart.type, this.getChartsValueFieldsAmount(charts), index, chart.isSegmented, chartStyleConfig),\r\n                embeddedLabels: this.getEmbeddedLabelType(chart, chartOrientation),\r\n                index\r\n            });\r\n        });\r\n        return chartsModel;\r\n    }\r\n    static findChartsWithEmbeddedKeyLabels(charts) {\r\n        const chartsWithEmbeddedLabels = [];\r\n        charts.forEach(chart => {\r\n            if (chart.type === 'bar' && chart.embeddedLabels === 'key')\r\n                chartsWithEmbeddedLabels.push(chart);\r\n        });\r\n        return chartsWithEmbeddedLabels;\r\n    }\r\n    static getEmbeddedLabelType(currentChart, chartOrientation) {\r\n        if (chartOrientation === 'horizontal' && currentChart.type === 'bar')\r\n            return currentChart.embeddedLabels;\r\n        return 'none';\r\n    }\r\n    static getAdditionalElements(options, designerConfig) {\r\n        return {\r\n            gridLine: _gridLineModel__WEBPACK_IMPORTED_MODULE_3__.GridLineModel.getGridLineOptions(options.additionalElements.gridLine, designerConfig.additionalElements.gridLine)\r\n        };\r\n    }\r\n    static getChartsByType(charts, type) {\r\n        return charts.filter(chart => chart.type === type);\r\n    }\r\n    static getChartsValueFieldsAmount(charts) {\r\n        return charts.map(chart => chart.data.valueFields.length);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://mdt-charts/./src/model/twoDimensionalModel.ts?");

/***/ }),

/***/ "./src/assets/materialColors.json":
/*!****************************************!*\
  !*** ./src/assets/materialColors.json ***!
  \****************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse(\"{\\\"colors\\\":[{\\\"colorName\\\":\\\"red\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#ffebee\\\",\\\"100\\\":\\\"#ffcdd2\\\",\\\"200\\\":\\\"#ef9a9a\\\",\\\"300\\\":\\\"#e57373\\\",\\\"400\\\":\\\"#ef5350\\\",\\\"500\\\":\\\"#f44336\\\",\\\"600\\\":\\\"#e53935\\\",\\\"700\\\":\\\"#d32f2f\\\",\\\"800\\\":\\\"#c62828\\\",\\\"900\\\":\\\"#b71c1c\\\"}},{\\\"colorName\\\":\\\"pink\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#fce4ec\\\",\\\"100\\\":\\\"#f8bbd0\\\",\\\"200\\\":\\\"#f48fb1\\\",\\\"300\\\":\\\"#f06292\\\",\\\"400\\\":\\\"#ec407a\\\",\\\"500\\\":\\\"#e91e63\\\",\\\"600\\\":\\\"#e53935\\\",\\\"700\\\":\\\"#d32f2f\\\",\\\"800\\\":\\\"#c62828\\\",\\\"900\\\":\\\"#b71c1c\\\"}},{\\\"colorName\\\":\\\"purple\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#f3e5f5\\\",\\\"100\\\":\\\"#e1bee7\\\",\\\"200\\\":\\\"#ce93d8\\\",\\\"300\\\":\\\"#ba68c8\\\",\\\"400\\\":\\\"#ab47bc\\\",\\\"500\\\":\\\"#9c27b0\\\",\\\"600\\\":\\\"#8e24aa\\\",\\\"700\\\":\\\"#7b1fa2\\\",\\\"800\\\":\\\"#6a1b9a\\\",\\\"900\\\":\\\"#4a148c\\\"}},{\\\"colorName\\\":\\\"deep-purple\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#ede7f6\\\",\\\"100\\\":\\\"#d1c4e9\\\",\\\"200\\\":\\\"#b39ddb\\\",\\\"300\\\":\\\"#9575cd\\\",\\\"400\\\":\\\"#7e57c2\\\",\\\"500\\\":\\\"#673ab7\\\",\\\"600\\\":\\\"#5e35b1\\\",\\\"700\\\":\\\"#512da8\\\",\\\"800\\\":\\\"#4527a0\\\",\\\"900\\\":\\\"#311b92\\\"}},{\\\"colorName\\\":\\\"indigo\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#e8eaf6\\\",\\\"100\\\":\\\"#c5cae9\\\",\\\"200\\\":\\\"#9fa8da\\\",\\\"300\\\":\\\"#7986cb\\\",\\\"400\\\":\\\"#5c6bc0\\\",\\\"500\\\":\\\"#3f51b5\\\",\\\"600\\\":\\\"#3949ab\\\",\\\"700\\\":\\\"#303f9f\\\",\\\"800\\\":\\\"#283593\\\",\\\"900\\\":\\\"#1a237e\\\"}},{\\\"colorName\\\":\\\"blue\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#e3f2fd\\\",\\\"100\\\":\\\"#bbdefb\\\",\\\"200\\\":\\\"#90caf9\\\",\\\"300\\\":\\\"#64b5f6\\\",\\\"400\\\":\\\"#42a5f5\\\",\\\"500\\\":\\\"#2196f3\\\",\\\"600\\\":\\\"#1e88e5\\\",\\\"700\\\":\\\"#1976d2\\\",\\\"800\\\":\\\"#1565c0\\\",\\\"900\\\":\\\"#0d47a1\\\"}},{\\\"colorName\\\":\\\"light-blue\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#e1f5fe\\\",\\\"100\\\":\\\"#b3e5fc\\\",\\\"200\\\":\\\"#81d4fa\\\",\\\"300\\\":\\\"#4fc3f7\\\",\\\"400\\\":\\\"#29b6f6\\\",\\\"500\\\":\\\"#03a9f4\\\",\\\"600\\\":\\\"#039be5\\\",\\\"700\\\":\\\"#0288d1\\\",\\\"800\\\":\\\"#0277bd\\\",\\\"900\\\":\\\"#01579b\\\"}},{\\\"colorName\\\":\\\"cyan\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#e0f7fa\\\",\\\"100\\\":\\\"#b2ebf2\\\",\\\"200\\\":\\\"#80deea\\\",\\\"300\\\":\\\"#4dd0e1\\\",\\\"400\\\":\\\"#26c6da\\\",\\\"500\\\":\\\"#00bcd4\\\",\\\"600\\\":\\\"#00acc1\\\",\\\"700\\\":\\\"#0097a7\\\",\\\"800\\\":\\\"#00838f\\\",\\\"900\\\":\\\"#006064\\\"}},{\\\"colorName\\\":\\\"teal\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#e0f2f1\\\",\\\"100\\\":\\\"#b2dfdb\\\",\\\"200\\\":\\\"#80cbc4\\\",\\\"300\\\":\\\"#4db6ac\\\",\\\"400\\\":\\\"#26a69a\\\",\\\"500\\\":\\\"#009688\\\",\\\"600\\\":\\\"#00897b\\\",\\\"700\\\":\\\"#00796b\\\",\\\"800\\\":\\\"#00695c\\\",\\\"900\\\":\\\"#004d40\\\"}},{\\\"colorName\\\":\\\"green\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#e8f5e9\\\",\\\"100\\\":\\\"#c8e6c9\\\",\\\"200\\\":\\\"#a5d6a7\\\",\\\"300\\\":\\\"#81c784\\\",\\\"400\\\":\\\"#66bb6a\\\",\\\"500\\\":\\\"#4caf50\\\",\\\"600\\\":\\\"#43a047\\\",\\\"700\\\":\\\"#388e3c\\\",\\\"800\\\":\\\"#2e7d32\\\",\\\"900\\\":\\\"#1b5e20\\\"}},{\\\"colorName\\\":\\\"light-green\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#f1f8e9\\\",\\\"100\\\":\\\"#dcedc8\\\",\\\"200\\\":\\\"#c5e1a5\\\",\\\"300\\\":\\\"#aed581\\\",\\\"400\\\":\\\"#9ccc65\\\",\\\"500\\\":\\\"#8bc34a\\\",\\\"600\\\":\\\"#7cb342\\\",\\\"700\\\":\\\"#689f38\\\",\\\"800\\\":\\\"#558b2f\\\",\\\"900\\\":\\\"#33691e\\\"}},{\\\"colorName\\\":\\\"lime\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#f9fbe7\\\",\\\"100\\\":\\\"#f0f4c3\\\",\\\"200\\\":\\\"#e6ee9c\\\",\\\"300\\\":\\\"#dce775\\\",\\\"400\\\":\\\"#d4e157\\\",\\\"500\\\":\\\"#cddc39\\\",\\\"600\\\":\\\"#c0ca33\\\",\\\"700\\\":\\\"#afb42b\\\",\\\"800\\\":\\\"#9e9d24\\\",\\\"900\\\":\\\"#827717\\\"}},{\\\"colorName\\\":\\\"yellow\\\",\\\"colorPalette\\\":{\\\"100\\\":\\\"#fff9c4\\\",\\\"200\\\":\\\"#fff59d\\\",\\\"300\\\":\\\"#fff176\\\",\\\"400\\\":\\\"#ffee58\\\",\\\"500\\\":\\\"#ffeb3b\\\",\\\"600\\\":\\\"#fdd835\\\",\\\"700\\\":\\\"#fbc02d\\\",\\\"800\\\":\\\"#f9a825\\\",\\\"900\\\":\\\"#f57f17\\\"}},{\\\"colorName\\\":\\\"amber\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#fff8e1\\\",\\\"100\\\":\\\"#ffecb3\\\",\\\"200\\\":\\\"#ffe082\\\",\\\"300\\\":\\\"#ffd54f\\\",\\\"400\\\":\\\"#ffca28\\\",\\\"500\\\":\\\"#ffc107\\\",\\\"600\\\":\\\"#ffb300\\\",\\\"700\\\":\\\"#ffa000\\\",\\\"800\\\":\\\"#ff8f00\\\",\\\"900\\\":\\\"#ff6f00\\\"}},{\\\"colorName\\\":\\\"orange\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#fff3e0\\\",\\\"100\\\":\\\"#ffe0b2\\\",\\\"200\\\":\\\"#ffcc80\\\",\\\"300\\\":\\\"#ffb74d\\\",\\\"400\\\":\\\"#ffa726\\\",\\\"500\\\":\\\"#ff9800\\\",\\\"600\\\":\\\"#fb8c00\\\",\\\"700\\\":\\\"#f57c00\\\",\\\"800\\\":\\\"#ef6c00\\\",\\\"900\\\":\\\"#e65100\\\"}},{\\\"colorName\\\":\\\"deep-orange\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#fbe9e7\\\",\\\"100\\\":\\\"#ffccbc\\\",\\\"200\\\":\\\"#ffab91\\\",\\\"300\\\":\\\"#ff8a65\\\",\\\"400\\\":\\\"#ff7043\\\",\\\"500\\\":\\\"#ff5722\\\",\\\"600\\\":\\\"#f4511e\\\",\\\"700\\\":\\\"#e64a19\\\",\\\"800\\\":\\\"#d84315\\\",\\\"900\\\":\\\"#bf360c\\\"}},{\\\"colorName\\\":\\\"brown\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#efebe9\\\",\\\"100\\\":\\\"#d7ccc8\\\",\\\"200\\\":\\\"#bcaaa4\\\",\\\"300\\\":\\\"#a1887f\\\",\\\"400\\\":\\\"#8d6e63\\\",\\\"500\\\":\\\"#795548\\\",\\\"600\\\":\\\"#6d4c41\\\",\\\"700\\\":\\\"#5d4037\\\",\\\"800\\\":\\\"#4e342e\\\",\\\"900\\\":\\\"#3e2723\\\"}},{\\\"colorName\\\":\\\"grey\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#fafafa\\\",\\\"100\\\":\\\"#f5f5f5\\\",\\\"200\\\":\\\"#eeeeee\\\",\\\"300\\\":\\\"#e0e0e0\\\",\\\"400\\\":\\\"#bdbdbd\\\",\\\"500\\\":\\\"#9e9e9e\\\",\\\"600\\\":\\\"#757575\\\",\\\"700\\\":\\\"#616161\\\",\\\"800\\\":\\\"#424242\\\",\\\"900\\\":\\\"#212121\\\"}},{\\\"colorName\\\":\\\"blue-grey\\\",\\\"colorPalette\\\":{\\\"50\\\":\\\"#eceff1\\\",\\\"100\\\":\\\"#cfd8dc\\\",\\\"200\\\":\\\"#b0bec5\\\",\\\"300\\\":\\\"#90a4ae\\\",\\\"400\\\":\\\"#78909c\\\",\\\"500\\\":\\\"#607d8b\\\",\\\"600\\\":\\\"#546e7a\\\",\\\"700\\\":\\\"#455a64\\\",\\\"800\\\":\\\"#37474f\\\",\\\"900\\\":\\\"#263238\\\"}}]}\");\n\n//# sourceURL=webpack://mdt-charts/./src/assets/materialColors.json?");

/***/ })

}]);